var shared_8b81f721bafa34fac60d =
/******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdate_name_hash_"];
/******/ 	window["webpackHotUpdate_name_hash_"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var head = document.getElementsByTagName("head")[0];
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		;
/******/ 		head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	var hotCurrentHash = "8b81f721bafa34fac60d"; // eslint-disable-line no-unused-vars
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentParents = []; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = []; // eslint-disable-line no-unused-vars
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (typeof dep === "undefined") hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (typeof dep === "undefined") hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = "shared";
/******/ 			{
/******/ 				// eslint-disable-line no-lone-blocks
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.slice().map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (!module || module.hot._selfAccepted) continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted
/******/ 			)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:3000/";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire(0)(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../../node_modules/msbot/bin/models/index.js":
/*!*****************************************************************************************************************!*\
  !*** delegated ../../../node_modules/msbot/bin/models/index.js from dll-reference vendors_6dc1bf031c792a36dced ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(/*! dll-reference vendors_6dc1bf031c792a36dced */ "dll-reference vendors_6dc1bf031c792a36dced"))("../../../node_modules/msbot/bin/models/index.js");

/***/ }),

/***/ "../../../node_modules/msbot/bin/schema.js":
/*!***********************************************************************************************************!*\
  !*** delegated ../../../node_modules/msbot/bin/schema.js from dll-reference vendors_6dc1bf031c792a36dced ***!
  \***********************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(/*! dll-reference vendors_6dc1bf031c792a36dced */ "dll-reference vendors_6dc1bf031c792a36dced"))("../../../node_modules/msbot/bin/schema.js");

/***/ }),

/***/ "../../../node_modules/tslib/tslib.es6.js":
/*!**********************************************************************************************************!*\
  !*** delegated ../../../node_modules/tslib/tslib.es6.js from dll-reference vendors_6dc1bf031c792a36dced ***!
  \**********************************************************************************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (__webpack_require__(/*! dll-reference vendors_6dc1bf031c792a36dced */ "dll-reference vendors_6dc1bf031c792a36dced"))("../../../node_modules/tslib/tslib.es6.js");

/***/ }),

/***/ "../../../node_modules/uuid/lib/bytesToUuid.js":
/*!**************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/node_modules/uuid/lib/bytesToUuid.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  return bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]];
}

module.exports = bytesToUuid;


/***/ }),

/***/ "../../../node_modules/uuid/lib/rng.js":
/*!******************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/node_modules/uuid/lib/rng.js ***!
  \******************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// Unique ID creation requires a high quality random # generator.  In node.js
// this is pretty straight-forward - we use the crypto API.

var crypto = __webpack_require__(/*! crypto */ "crypto");

module.exports = function nodeRNG() {
  return crypto.randomBytes(16);
};


/***/ }),

/***/ "../../../node_modules/uuid/v1.js":
/*!*************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/node_modules/uuid/v1.js ***!
  \*************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(/*! ./lib/rng */ "../../../node_modules/uuid/lib/rng.js");
var bytesToUuid = __webpack_require__(/*! ./lib/bytesToUuid */ "../../../node_modules/uuid/lib/bytesToUuid.js");

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;
var _clockseq;

// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189
  if (node == null || clockseq == null) {
    var seedBytes = rng();
    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [
        seedBytes[0] | 0x01,
        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
      ];
    }
    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  }

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;


/***/ }),

/***/ "../../sdk/client/built/index.js":
/*!************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/packages/sdk/client/built/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../sdk/shared/built/command/index.js":
/*!********************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/packages/sdk/shared/built/command/index.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "../../../node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./registry */ "../../sdk/shared/built/command/registry.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./service */ "../../sdk/shared/built/command/service.js"), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../sdk/shared/built/command/registry.js":
/*!***********************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/packages/sdk/shared/built/command/registry.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class CommandRegistryImpl {
    constructor() {
        this._commands = {};
    }
    registerCommand(idOrCommand, handler) {
        if (!idOrCommand) {
            throw new Error('invalid command');
        }
        if (typeof idOrCommand === 'string') {
            if (!handler) {
                throw new Error('invalid command');
            }
            return this.registerCommand({ id: idOrCommand, handler });
        }
        const { id } = idOrCommand;
        this._commands[id] = idOrCommand;
        return {
            dispose: () => delete this._commands[id]
        };
    }
    getCommand(id) {
        return this._commands[id];
    }
    getCommands() {
        return this._commands;
    }
}
exports.CommandRegistryImpl = CommandRegistryImpl;
//# sourceMappingURL=registry.js.map

/***/ }),

/***/ "../../sdk/shared/built/command/service.js":
/*!**********************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/packages/sdk/shared/built/command/service.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const lifecycle_1 = __webpack_require__(/*! ../lifecycle */ "../../sdk/shared/built/lifecycle/index.js");
const ipc_1 = __webpack_require__(/*! ../ipc */ "../../sdk/shared/built/ipc/index.js");
const utils_1 = __webpack_require__(/*! ../utils */ "../../sdk/shared/built/utils/index.js");
const __1 = __webpack_require__(/*! .. */ "../../sdk/shared/built/index.js");
class CommandServiceImpl extends lifecycle_1.DisposableImpl {
    get registry() {
        return this._registry;
    }
    constructor(_ipc, _channelName = 'command-service', _registry = new __1.CommandRegistryImpl()) {
        super();
        this._ipc = _ipc;
        this._channelName = _channelName;
        this._registry = _registry;
        this._channel = new ipc_1.Channel(this._channelName, this._ipc);
        this.toDispose(this._ipc.registerChannel(this._channel));
        this.toDispose(this._channel.setListener('call', (commandName, transactionId, ...args) => {
            this.call(commandName, ...args)
                .then(result => {
                result = Array.isArray(result) ? result : [result];
                this._channel.send(transactionId, true, ...result);
            })
                .catch(err => {
                err = err.message ? err.message : err;
                this._channel.send(transactionId, false, err);
            });
        }));
    }
    on(event, handler) {
        if (event === 'command-not-found') {
            this._notFoundHandler = handler;
            return undefined;
        }
        else {
            return this.registry.registerCommand(event, handler);
        }
    }
    call(commandName, ...args) {
        const command = this._registry.getCommand(commandName);
        try {
            if (!command) {
                if (this._notFoundHandler) {
                    const result = this._notFoundHandler(commandName, ...args);
                    return Promise.resolve(result);
                }
                else {
                    throw new Error(`Command '${commandName}' not found`);
                }
            }
            else {
                const result = command.handler(...args);
                return Promise.resolve(result);
            }
        }
        catch (err) {
            return Promise.reject(err);
        }
    }
    remoteCall(commandName, ...args) {
        const transactionId = utils_1.uniqueId();
        this._channel.send('call', commandName, transactionId, ...args);
        return new Promise((resolve, reject) => {
            this._channel.setListener(transactionId, (success, ...responseArgs) => {
                this._channel.clearListener(transactionId);
                if (success) {
                    let result = responseArgs.length ? responseArgs.shift() : undefined;
                    resolve(result);
                }
                else {
                    reject(responseArgs.shift());
                }
            });
        });
    }
}
exports.CommandServiceImpl = CommandServiceImpl;
//# sourceMappingURL=service.js.map

/***/ }),

/***/ "../../sdk/shared/built/index.js":
/*!************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/packages/sdk/shared/built/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "../../../node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./command */ "../../sdk/shared/built/command/index.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lifecycle */ "../../sdk/shared/built/lifecycle/index.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./ipc */ "../../sdk/shared/built/ipc/index.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./types */ "../../sdk/shared/built/types/index.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./utils */ "../../sdk/shared/built/utils/index.js"), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../sdk/shared/built/ipc/channel.js":
/*!******************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/packages/sdk/shared/built/ipc/channel.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class Channel {
    constructor(_name, _sender) {
        this._name = _name;
        this._sender = _sender;
        this._listeners = {};
    }
    get name() { return this._name; }
    send(messageName, ...args) {
        return this._sender.send(this._name, messageName, ...args);
    }
    setListener(messageName, listener) {
        this.clearListener(messageName);
        this._listeners[messageName] = listener;
        return {
            dispose: () => {
                this.clearListener(messageName);
            }
        };
    }
    clearListener(messageName) {
        delete this._listeners[messageName];
    }
    onMessage(...args) {
        const messageName = args.shift();
        const listener = this._listeners[messageName];
        if (listener) {
            listener(...args);
        }
    }
}
exports.Channel = Channel;
//# sourceMappingURL=channel.js.map

/***/ }),

/***/ "../../sdk/shared/built/ipc/index.js":
/*!****************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/packages/sdk/shared/built/ipc/index.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "../../../node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./channel */ "../../sdk/shared/built/ipc/channel.js"), exports);
const lifecycle_1 = __webpack_require__(/*! ../lifecycle */ "../../sdk/shared/built/lifecycle/index.js");
class IPC extends lifecycle_1.DisposableImpl {
    constructor() {
        super(...arguments);
        this._channels = {};
    }
    registerChannel(channel) {
        if (!channel) {
            throw new Error('channel cannot be null');
        }
        if (this._channels[channel.name]) {
            throw new Error(`channel ${channel.name} already exists`);
        }
        this._channels[channel.name] = channel;
        return {
            dispose: () => {
                delete this._channels[channel.name];
            }
        };
    }
    getChannel(name) {
        return this._channels[name];
    }
}
exports.IPC = IPC;
class NoopIPC extends IPC {
    constructor(_id) {
        super();
        this._id = _id;
    }
    get id() {
        return this._id;
    }
    send(...args) {
        return null;
    }
}
exports.NoopIPC = NoopIPC;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../sdk/shared/built/lifecycle/disposableImpl.js":
/*!*******************************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/packages/sdk/shared/built/lifecycle/disposableImpl.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function isDisposable(obj) {
    return obj && typeof obj.dispose === 'function';
}
exports.isDisposable = isDisposable;
function dispose(arg) {
    if (Array.isArray(arg)) {
        arg.forEach(elem => elem && elem.dispose());
        return [];
    }
    else {
        if (arg) {
            arg.dispose();
        }
        return undefined;
    }
}
exports.dispose = dispose;
class DisposableImpl {
    constructor() {
        this._toDispose = [];
    }
    dispose() {
        this._toDispose = dispose(this._toDispose);
    }
    toDispose(...objs) {
        this._toDispose.push(...objs);
    }
}
exports.DisposableImpl = DisposableImpl;
//# sourceMappingURL=disposableImpl.js.map

/***/ }),

/***/ "../../sdk/shared/built/lifecycle/index.js":
/*!**********************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/packages/sdk/shared/built/lifecycle/index.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "../../../node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./disposableImpl */ "../../sdk/shared/built/lifecycle/disposableImpl.js"), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../sdk/shared/built/types/attachmentTypes.js":
/*!****************************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/packages/sdk/shared/built/types/attachmentTypes.js ***!
  \****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class AttachmentContentTypes {
}
AttachmentContentTypes.animationCard = 'application/vnd.microsoft.card.animation';
AttachmentContentTypes.audioCard = 'application/vnd.microsoft.card.audio';
AttachmentContentTypes.heroCard = 'application/vnd.microsoft.card.hero';
AttachmentContentTypes.receiptCard = 'application/vnd.microsoft.card.receipt';
AttachmentContentTypes.signInCard = 'application/vnd.microsoft.card.signin';
AttachmentContentTypes.thumbnailCard = 'application/vnd.microsoft.card.thumbnail';
AttachmentContentTypes.videoCard = 'application/vnd.microsoft.card.video';
exports.AttachmentContentTypes = AttachmentContentTypes;
//# sourceMappingURL=attachmentTypes.js.map

/***/ }),

/***/ "../../sdk/shared/built/types/botConfigWithPathTypes.js":
/*!***********************************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/packages/sdk/shared/built/types/botConfigWithPathTypes.js ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const models_1 = __webpack_require__(/*! msbot/bin/models */ "../../../node_modules/msbot/bin/models/index.js");
class BotConfigWithPathImpl extends models_1.BotConfigModel {
    constructor() {
        super(...arguments);
        this.path = '';
    }
    static fromJSON(source) {
        const botConfig = super.fromJSON(source);
        const { path = '' } = source;
        const botConfigWithPath = new BotConfigWithPathImpl();
        Object.assign(botConfigWithPath, botConfig, { path });
        return botConfigWithPath;
    }
}
exports.BotConfigWithPathImpl = BotConfigWithPathImpl;
//# sourceMappingURL=botConfigWithPathTypes.js.map

/***/ }),

/***/ "../../sdk/shared/built/types/index.js":
/*!******************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/packages/sdk/shared/built/types/index.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "../../../node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./attachmentTypes */ "../../sdk/shared/built/types/attachmentTypes.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./paymentTypes */ "../../sdk/shared/built/types/paymentTypes.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./botConfigWithPathTypes */ "../../sdk/shared/built/types/botConfigWithPathTypes.js"), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../sdk/shared/built/types/paymentTypes.js":
/*!*************************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/packages/sdk/shared/built/types/paymentTypes.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Payment;
(function (Payment) {
    Payment.PaymentOperations = {
        PaymentCompleteOperationName: 'payments/complete',
        UpdateShippingAddressOperationName: 'payments/update/shippingAddress',
        UpdateShippingOptionOperationName: 'payments/update/shippingOption'
    };
})(Payment = exports.Payment || (exports.Payment = {}));
//# sourceMappingURL=paymentTypes.js.map

/***/ }),

/***/ "../../sdk/shared/built/utils/index.js":
/*!******************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/packages/sdk/shared/built/utils/index.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const uuidv1 = __webpack_require__(/*! uuid/v1 */ "../../../node_modules/uuid/v1.js");
function uniqueId() {
    return uuidv1().toString();
}
exports.uniqueId = uniqueId;
function isObject(item) {
    return (item && typeof item === 'object' && !Array.isArray(item));
}
exports.isObject = isObject;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../sdk/ui-react/built/index.js":
/*!**************************************************************************************************!*\
  !*** C:/Users/juwilaby/Documents/dev/BotFramework-Emulator/packages/sdk/ui-react/built/index.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

!function(e,t){ true?module.exports=t():undefined}(window,function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=122)}([function(e,t,n){"use strict";n.r(t),n.d(t,"__extends",function(){return r}),n.d(t,"__assign",function(){return i}),n.d(t,"__rest",function(){return a}),n.d(t,"__decorate",function(){return s}),n.d(t,"__param",function(){return l}),n.d(t,"__metadata",function(){return u}),n.d(t,"__awaiter",function(){return c}),n.d(t,"__generator",function(){return d}),n.d(t,"__exportStar",function(){return p}),n.d(t,"__values",function(){return f}),n.d(t,"__read",function(){return h}),n.d(t,"__spread",function(){return m}),n.d(t,"__await",function(){return g}),n.d(t,"__asyncGenerator",function(){return _}),n.d(t,"__asyncDelegator",function(){return v}),n.d(t,"__asyncValues",function(){return y}),n.d(t,"__makeTemplateObject",function(){return b}),n.d(t,"__importStar",function(){return C}),n.d(t,"__importDefault",function(){return S});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};function r(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e};function a(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(e);r<o.length;r++)t.indexOf(o[r])<0&&(n[o[r]]=e[o[r]])}return n}function s(e,t,n,o){var r,i=arguments.length,a=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,o);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(a=(i<3?r(a):i>3?r(t,n,a):r(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}function l(e,t){return function(n,o){t(n,o,e)}}function u(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function c(e,t,n,o){return new(n||(n=Promise))(function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(a,s)}l((o=o.apply(e,t||[])).next())})}function d(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=o[2&i[0]?"return":i[0]?"throw":"next"])&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[0,r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}function p(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}function f(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}function h(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var o,r,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(o=i.next()).done;)a.push(o.value)}catch(e){r={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}return a}function m(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(h(arguments[t]));return e}function g(e){return this instanceof g?(this.v=e,this):new g(e)}function _(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o,r=n.apply(e,t||[]),i=[];return o={},a("next"),a("throw"),a("return"),o[Symbol.asyncIterator]=function(){return this},o;function a(e){r[e]&&(o[e]=function(t){return new Promise(function(n,o){i.push([e,t,n,o])>1||s(e,t)})})}function s(e,t){try{(n=r[e](t)).value instanceof g?Promise.resolve(n.value.v).then(l,u):c(i[0][2],n)}catch(e){c(i[0][3],e)}var n}function l(e){s("next",e)}function u(e){s("throw",e)}function c(e,t){e(t),i.shift(),i.length&&s(i[0][0],i[0][1])}}function v(e){var t,n;return t={},o("next"),o("throw",function(e){throw e}),o("return"),t[Symbol.iterator]=function(){return this},t;function o(o,r){e[o]&&(t[o]=function(t){return(n=!n)?{value:g(e[o](t)),done:"return"===o}:r?r(t):t})}}function y(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=e[Symbol.asyncIterator];return t?t.call(e):f(e)}function b(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function C(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function S(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";e.exports=n(264)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(24),t)},function(e,t,n){"use strict";e.exports=n(265)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(123),t)},function(e,t,n){"use strict";function o(e,t){var n=e,o=t;n._virtual||(n._virtual={children:[]});var r=n._virtual.parent;if(r&&r!==t){var i=r._virtual.children.indexOf(n);i>-1&&r._virtual.children.splice(i,1)}n._virtual.parent=o||void 0,o&&(o._virtual||(o._virtual={children:[]}),o._virtual.children.push(n))}function r(e){var t;return e&&m(e)&&(t=e._virtual.parent),t}function i(e,t){return void 0===t&&(t=!0),e&&(t&&r(e)||e.parentNode&&e.parentNode)}function a(e,t){void 0===t&&(t=!0);var n=[];if(e){for(var o=0;o<e.children.length;o++)n.push(e.children.item(o));t&&m(e)&&n.push.apply(n,e._virtual.children)}return n}function s(e,t,n){void 0===n&&(n=!0);var o=!1;if(e&&t)if(n)for(o=!1;t;){var r=i(t);if(r===e){o=!0;break}t=r}else e.contains&&(o=e.contains(t));return o}n.d(t,"k",function(){return o}),n.d(t,"h",function(){return r}),n.d(t,"f",function(){return i}),n.d(t,"d",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"j",function(){return u}),n.d(t,"i",function(){return c}),n.d(t,"e",function(){return d}),n.d(t,"g",function(){return p}),n.d(t,"c",function(){return f}),n.d(t,"b",function(){return h});var l=!1;function u(e){l=e}function c(e){return l||"undefined"==typeof window?void 0:e&&e.ownerDocument&&e.ownerDocument.defaultView?e.ownerDocument.defaultView:window}function d(e){return l||"undefined"==typeof document?void 0:e&&e.ownerDocument?e.ownerDocument:document}function p(e){var t;return e&&(e===window?t={left:0,top:0,width:window.innerWidth,height:window.innerHeight,right:window.innerWidth,bottom:window.innerHeight}:e.getBoundingClientRect&&(t=e.getBoundingClientRect())),t}function f(e,t){return e&&e!==document.body?t(e)?e:f(i(e),t):null}function h(e,t){var n=f(e,function(e){return e.hasAttribute(t)});return n&&n.getAttribute(t)}function m(e){return e&&!!e._virtual}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0);o.__exportStar(n(246),t),o.__exportStar(n(33),t),o.__exportStar(n(45),t),o.__exportStar(n(104),t)},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";var o=n(114);n.d(t,"g",function(){return o.a});var r=n(112);n.d(t,"f",function(){return r.a});var i=n(50);n.d(t,"c",function(){return i.a});var a=n(111);n.d(t,"d",function(){return a.a});var s=n(110);n.d(t,"e",function(){return s.a});var l=n(10);n.d(t,"a",function(){return l.a}),n.d(t,"b",function(){return l.b})},function(e,t,n){"use strict";var o=n(39);n.d(t,"a",function(){return o.a}),n.d(t,"h",function(){return o.b}),n.d(t,"i",function(){return o.c});var r=n(94);n.d(t,"b",function(){return r.a});var i=n(38);n.d(t,"c",function(){return i.a}),n.d(t,"g",function(){return i.b});var a=n(92);n.d(t,"e",function(){return a.a});var s=n(91);n.d(t,"d",function(){return s.a});var l=n(13);n.d(t,"f",function(){return l.a})},function(e,t,n){"use strict";n.d(t,"a",function(){return o}),n.d(t,"b",function(){return a});var o,r=n(0);!function(e){e[e.none=0]="none",e[e.insertNode=1]="insertNode",e[e.appendChild=2]="appendChild"}(o||(o={}));var i,a=function(){function e(e){this._rules=[],this._rulesToInsert=[],this._counter=0,this._keyToClassName={},this._classNameToArgs={},this._config=r.__assign({injectionMode:1,defaultPrefix:"css"},e)}return e.getInstance=function(){var t="undefined"!=typeof window?window:{};if(!(i=t.__stylesheet__)){var n=t&&t.FabricConfig||{};i=t.__stylesheet__=new e(n.mergeStyles)}return i},e.prototype.setConfig=function(e){this._config=r.__assign({},this._config,e)},e.prototype.getClassName=function(e){return(e||this._config.defaultPrefix)+"-"+this._counter++},e.prototype.cacheClassName=function(e,t,n,o){this._keyToClassName[t]=e,this._classNameToArgs[e]={args:n,rules:o}},e.prototype.classNameFromKey=function(e){return this._keyToClassName[e]},e.prototype.argsFromClassName=function(e){var t=this._classNameToArgs[e];return t&&t.args},e.prototype.insertedRulesFromClassName=function(e){var t=this._classNameToArgs[e];return t&&t.rules},e.prototype.insertRule=function(e){var t=0!==this._config.injectionMode?this._getStyleElement():void 0;if(t)switch(this._config.injectionMode){case 1:var n=t.sheet;try{n.insertRule(e,n.cssRules.length)}catch(e){}break;case 2:t.appendChild(document.createTextNode(e))}else this._rules.push(e);this._config.onInsertRule&&this._config.onInsertRule(e)},e.prototype.getRules=function(){return(this._rules.join("")||"")+(this._rulesToInsert.join("")||"")},e.prototype.reset=function(){this._rules=[],this._rulesToInsert=[],this._counter=0,this._classNameToArgs={},this._keyToClassName={}},e.prototype.resetKeys=function(){this._keyToClassName={}},e.prototype._getStyleElement=function(){var e=this;return this._styleElement||"undefined"==typeof document||(this._styleElement=this._createStyleElement(),window.requestAnimationFrame(function(){e._styleElement=void 0})),this._styleElement},e.prototype._createStyleElement=function(){var e=document.createElement("style");return e.setAttribute("data-merge-styles","true"),e.type="text/css",this._lastStyleElement&&this._lastStyleElement.nextElementSibling?document.head.insertBefore(e,this._lastStyleElement.nextElementSibling):document.head.appendChild(e),this._lastStyleElement=e,e},e}()},,function(e,t,n){"use strict";var o,r=n(10);var i={"user-select":1};function a(e,t){var n=function(){if(!o){var e="undefined"!=typeof document?document:void 0,t="undefined"!=typeof navigator?navigator:void 0,n=t?t.userAgent.toLowerCase():void 0;o=e?{isWebkit:!!(e&&"WebkitAppearance"in e.documentElement.style),isMoz:!!(n&&n.indexOf("firefox")>-1),isOpera:!!(n&&n.indexOf("opera")>-1),isMs:!(!t||!/rv:11.0/i.test(t.userAgent)&&!/Edge\/\d./i.test(navigator.userAgent))}:{isWebkit:!0,isMoz:!0,isOpera:!0,isMs:!0}}return o}(),r=e[t];if(i[r]){var a=e[t+1];i[r]&&(n.isWebkit&&e.push("-webkit-"+r,a),n.isMoz&&e.push("-moz-"+r,a),n.isMs&&e.push("-ms-"+r,a),n.isOpera&&e.push("-o-"+r,a))}}var s=["column-count","font-weight","flex-basis","flex","flex-grow","flex-shrink","fill-opacity","opacity","order","z-index","zoom"];function l(e,t){var n=e[t],o=e[t+1];if("number"==typeof o){var r=-1===s.indexOf(n)?"px":"";e[t+1]=""+o+r}}var u=n(51);n.d(t,"b",function(){return p}),n.d(t,"d",function(){return f}),n.d(t,"a",function(){return h}),n.d(t,"c",function(){return m});var c="displayName";function d(e,t,n){var o="string"==typeof n?n.split(" "):[n];e[t+"Top"]=o[0],e[t+"Right"]=o[1]||o[0],e[t+"Bottom"]=o[2]||o[0],e[t+"Left"]=o[3]||o[1]||o[0]}function p(e){if(!e)return"";var t,n,o=[];for(var r in e)e.hasOwnProperty(r)&&r!==c&&void 0!==e[r]&&o.push(r,e[r]);for(var i=0;i<o.length;i+=2)(t=o)[n=i]=t[n].replace(/([A-Z])/g,"-$1").toLowerCase(),l(o,i),Object(u.a)(o,i),a(o,i);for(i=1;i<o.length;i+=4)o.splice(i,1,":",o[i],";");return o.join("")}function f(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=function e(t,n,o){void 0===n&&(n={__order:[]}),void 0===o&&(o="&");var i=r.b.getInstance(),a=n[o];a||(a={},n[o]=a,n.__order.push(o));for(var s=0,l=t;s<l.length;s++){var u=l[s];if("string"==typeof u){var c=i.argsFromClassName(u);c&&e(c,n,o)}else if(Array.isArray(u))e(u,n,o);else for(var p in u)if("selectors"===p){var f=u.selectors;for(var h in f)if(f.hasOwnProperty(h)){var m=f[h];0===h.indexOf(":global(")?h=h.replace(/:global\(|\)$/g,""):0===h.indexOf("@media")?h=h+"{"+o:0===h.indexOf(":")?h=o+h:h.indexOf("&")<0&&(h=o+" "+h),e([m],n,h)}}else"margin"===p||"padding"===p?d(a,p,u[p]):a[p]=u[p]}return n}(e),o=function(e){for(var t=[],n=!1,o=0,r=e.__order;o<r.length;o++){var i=r[o];t.push(i);var a=e[i];for(var s in a)a.hasOwnProperty(s)&&void 0!==a[s]&&(n=!0,t.push(s,a[s]))}return n?t.join(""):void 0}(n);if(o){var i=r.b.getInstance(),a={className:i.classNameFromKey(o),key:o,args:e};if(!a.className){a.className=i.getClassName(function(e){var t=e&&e["&"];return t?t.displayName:void 0}(n));for(var s=[],l=0,u=n.__order;l<u.length;l++){var c=u[l];s.push(c,p(n[c]))}a.rulesToInsert=s}return a}}function h(e,t){var n=r.b.getInstance(),o=e.className,i=e.key,a=e.args,s=e.rulesToInsert;if(s){for(var l=0;l<s.length;l+=2){var u=s[l+1];if(u){var c=s[l],d=(c=c.replace(/(&)|\$([\w-]+)\b/g,function(n,o,r){return o?"."+e.className:r?"."+(t&&t[r]||r):""}))+"{"+u+"}"+(0===c.indexOf("@media")?"}":"");n.insertRule(d)}}n.cacheClassName(o,i,a,s)}}function m(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=f.apply(void 0,e);return n?(h(n),n.className):""}},function(e,t,n){"use strict";(function(e){var o,r,i,a;n.d(t,"a",function(){return r}),(o=n(3).enterModule)&&o(e),function(e){e.neutral16="--neutral-16",e.neutral15="--neutral-15",e.neutral14="--neutral-14",e.neutral13="--neutral-13",e.neutral12="--neutral-12",e.neutral11="--neutral-11",e.neutral10="--neutral-10",e.neutral9="--neutral-9",e.neutral8="--neutral-8",e.neutral7="--neutral-7",e.neutral6="--neutral-6",e.neutral5="--neutral-5",e.neutral4="--neutral-4",e.neutral3="--neutral-3",e.neutral2="--neutral-2",e.neutral1="--neutral-1",e.slectedListItem="--selected-list-item",e.focusedListItem="--focused-list-item",e.focusedOutline="--focused-outline",e.focusedSelectedHighlightedListItem="--focused-selected-highlighted-list-item",e.focusedSelectedListItemBg="--focused-selected-list-item-bg",e.infoBg="--info-bg",e.infoOutline="--info-outline",e.warningBg="--warning-bg",e.warningOutline="--warning-outline",e.errorText="--error-text",e.errorBg="--error-bg",e.errorOutline="--error-outline",e.webchatSelectedTextBg="--webchat-selected-text-bg",e.logPanelTimestamp="--log-panel-timestamp",e.logPanelLink="--log-panel-link"}(r||(r={})),i=n(3).default,a=n(3).leaveModule,i&&(i.register(r,"ThemeVariables","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\styles\\themeVariables.ts"),a(e))}).call(this,n(7)(e))},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var o=n(23),r=function(){function e(t){this._id=e._uniqueId++,this._parent=t,this._eventRecords=[]}return e.raise=function(t,n,r,i){var a;if(e._isElement(t)){if(document.createEvent){var s=document.createEvent("HTMLEvents");s.initEvent(n,i||!1,!0),Object(o.a)(s,r),a=t.dispatchEvent(s)}else if(document.createEventObject){var l=document.createEventObject(r);t.fireEvent("on"+n,l)}}else for(;t&&!1!==a;){var u=t.__events__,c=u?u[n]:null;if(c)for(var d in c)if(c.hasOwnProperty(d))for(var p=c[d],f=0;!1!==a&&f<p.length;f++){var h=p[f];h.objectCallback&&(a=h.objectCallback.call(h.parent,r))}t=i?t.parent:null}return a},e.isObserved=function(e,t){var n=e&&e.__events__;return!!n&&!!n[t]},e.isDeclared=function(e,t){var n=e&&e.__declaredEvents;return!!n&&!!n[t]},e.stopPropagation=function(e){e.stopPropagation?e.stopPropagation():e.cancelBubble=!0},e._isElement=function(e){return!!e&&(!!e.addEventListener||"undefined"!=typeof HTMLElement&&e instanceof HTMLElement)},e.prototype.dispose=function(){this._isDisposed||(this._isDisposed=!0,this.off(),this._parent=null)},e.prototype.onAll=function(e,t,n){for(var o in t)t.hasOwnProperty(o)&&this.on(e,o,t[o],n)},e.prototype.on=function(t,n,o,r){var i=this;if(n.indexOf(",")>-1)for(var a=n.split(/[ ,]+/),s=0;s<a.length;s++)this.on(t,a[s],o,r);else{var l=this._parent,u={target:t,eventName:n,parent:l,callback:o,useCapture:r||!1};if((a=t.__events__=t.__events__||{})[n]=a[n]||{count:0},a[n][this._id]=a[n][this._id]||[],a[n][this._id].push(u),a[n].count++,e._isElement(t)){var c=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!i._isDisposed){var n;try{if(!1===(n=o.apply(l,e))&&e[0]){var r=e[0];r.preventDefault&&r.preventDefault(),r.stopPropagation&&r.stopPropagation(),r.cancelBubble=!0}}catch(r){}return n}};u.elementCallback=c,t.addEventListener?t.addEventListener(n,c,r):t.attachEvent&&t.attachEvent("on"+n,c)}else{u.objectCallback=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!i._isDisposed)return o.apply(l,e)}}this._eventRecords.push(u)}},e.prototype.off=function(e,t,n,o){for(var r=0;r<this._eventRecords.length;r++){var i=this._eventRecords[r];if(!(e&&e!==i.target||t&&t!==i.eventName||n&&n!==i.callback||"boolean"==typeof o&&o!==i.useCapture)){var a=i.target.__events__,s=a[i.eventName],l=s?s[this._id]:null;l&&(1!==l.length&&n?(s.count--,l.splice(l.indexOf(i),1)):(s.count-=l.length,delete a[i.eventName][this._id]),s.count||delete a[i.eventName]),i.elementCallback&&(i.target.removeEventListener?i.target.removeEventListener(i.eventName,i.elementCallback,i.useCapture):i.target.detachEvent&&i.target.detachEvent("on"+i.eventName,i.elementCallback)),this._eventRecords.splice(r--,1)}}},e.prototype.raise=function(t,n,o){return e.raise(this._parent,t,n,o)},e.prototype.declare=function(e){var t=this._parent.__declaredEvents=this._parent.__declaredEvents||{};if("string"==typeof e)t[e]=!0;else for(var n=0;n<e.length;n++)t[e[n]]=!0},e._uniqueId=0,e}()},function(e,t,n){"use strict";var o=n(121);n.d(t,"a",function(){return o.a}),n.d(t,"b",function(){return o.b}),n.d(t,"c",function(){return o.c});var r=n(118);n.d(t,"d",function(){return r.a}),n.d(t,"e",function(){return r.b}),n.d(t,"f",function(){return r.c});var i=n(61);n.d(t,"g",function(){return i.a}),n.d(t,"h",function(){return i.b}),n.d(t,"i",function(){return i.c});var a=n(60);n.d(t,"j",function(){return a.a})},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return s});var o,r=n(0);!function(e){e[e.none=0]="none",e[e.insertNode=1]="insertNode",e[e.appendChild=2]="appendChild"}(o||(o={}));var i,a={},s=function(){function t(e){this._rules=[],this._preservedRules=[],this._rulesToInsert=[],this._counter=0,this._keyToClassName={},this._onResetCallbacks=[],this._classNameToArgs={},this._config=r.__assign({injectionMode:1,defaultPrefix:"css",namespace:void 0},e)}return t.getInstance=function(){var n="undefined"!=typeof window?window:void 0!==e?e:a;if(!(i=n.__stylesheet__)){var o=n&&n.FabricConfig||{};i=n.__stylesheet__=new t(o.mergeStyles)}return i},t.prototype.setConfig=function(e){this._config=r.__assign({},this._config,e)},t.prototype.onReset=function(e){this._onResetCallbacks.push(e)},t.prototype.getClassName=function(e){var t=this._config.namespace,n=e||this._config.defaultPrefix;return(t?t+"-":"")+n+"-"+this._counter++},t.prototype.cacheClassName=function(e,t,n,o){this._keyToClassName[t]=e,this._classNameToArgs[e]={args:n,rules:o}},t.prototype.classNameFromKey=function(e){return this._keyToClassName[e]},t.prototype.argsFromClassName=function(e){var t=this._classNameToArgs[e];return t&&t.args},t.prototype.insertedRulesFromClassName=function(e){var t=this._classNameToArgs[e];return t&&t.rules},t.prototype.insertRule=function(e,t){var n=0!==this._config.injectionMode?this._getStyleElement():void 0;if(t&&this._preservedRules.push(e),n)switch(this._config.injectionMode){case 1:var o=n.sheet;try{o.insertRule(e,o.cssRules.length)}catch(e){}break;case 2:n.appendChild(document.createTextNode(e))}else this._rules.push(e);this._config.onInsertRule&&this._config.onInsertRule(e)},t.prototype.getRules=function(e){return(e?this._preservedRules.join(""):"")+this._rules.join("")+this._rulesToInsert.join("")},t.prototype.reset=function(){this._rules=[],this._rulesToInsert=[],this._counter=0,this._classNameToArgs={},this._keyToClassName={},this._onResetCallbacks.forEach(function(e){return e()})},t.prototype.resetKeys=function(){this._keyToClassName={}},t.prototype._getStyleElement=function(){var e=this;return this._styleElement||"undefined"==typeof document||(this._styleElement=this._createStyleElement(),window.requestAnimationFrame(function(){e._styleElement=void 0})),this._styleElement},t.prototype._createStyleElement=function(){var e=document.createElement("style");return e.setAttribute("data-merge-styles","true"),e.type="text/css",this._lastStyleElement&&this._lastStyleElement.nextElementSibling?document.head.insertBefore(e,this._lastStyleElement.nextElementSibling):document.head.appendChild(e),this._lastStyleElement=e,e},t}()}).call(this,n(52))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(243);t.mergeStyles=o.mergeStyles;var r=n(237);t.mergeStyleSets=r.mergeStyleSets;var i=n(102);t.concatStyleSets=i.concatStyleSets;var a=n(236);t.fontFace=a.fontFace;var s=n(235);t.keyframes=s.keyframes;var l=n(21);t.InjectionMode=l.InjectionMode,t.Stylesheet=l.Stylesheet},function(e,t,n){"use strict";var o=n(117);n.d(t,"a",function(){return o.a}),n.d(t,"b",function(){return o.b})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(4),i={outline:0},a={fontSize:r.FontSizes.icon,margin:"0 4px",height:"16px",lineHeight:"16px",textAlign:"center",verticalAlign:"middle",flexShrink:0};t.getStyles=o.memoizeFunction(function(e){var t=e.semanticColors,n=t.buttonBorder,o=t.disabledBackground,s=t.disabledText;return{root:[r.getFocusStyle(e,-1,"relative",{left:-2,top:-2,bottom:-2,right:-2,border:"none",outlineColor:"ButtonText"}),e.fonts.medium,{boxSizing:"border-box",border:"1px solid "+n,userSelect:"none",display:"inline-block",textDecoration:"none",textAlign:"center",cursor:"pointer",verticalAlign:"top",padding:"0 16px",borderRadius:0}],rootDisabled:{backgroundColor:o,color:s,cursor:"default",pointerEvents:"none",selectors:{":hover":i,":focus":i}},iconDisabled:{color:s},menuIconDisabled:{color:s},flexContainer:{display:"flex",height:"100%",flexWrap:"nowrap",justifyContent:"center",alignItems:"center"},textContainer:{flexGrow:1},icon:a,menuIcon:[a,{fontSize:r.FontSizes.small}],label:{margin:"0 4px",lineHeight:"100%"},screenReaderText:r.hiddenContentStyle}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=n(35),s=n(198),l=n(156),u=n(155),c=n(27),d=function(e){function t(t,n){var l=e.call(this,t)||this;l._buttonElement=i.createRef(),l._splitButtonContainer=i.createRef(),l._onRenderIcon=function(e,t){var n=l.props.iconProps;return n?r.createElement(a.Icon,o.__assign({},n,{className:l._classNames.icon})):null},l._onRenderTextContents=function(){var e=l.props,t=e.text,n=e.children,o=e.secondaryText,i=void 0===o?l.props.description:o,a=e.onRenderText,s=void 0===a?l._onRenderText:a,u=e.onRenderDescription,c=void 0===u?l._onRenderDescription:u;return t||"string"==typeof n||i?r.createElement("div",{className:l._classNames.textContainer},s(l.props,l._onRenderText),c(l.props,l._onRenderDescription)):[s(l.props,l._onRenderText),c(l.props,l._onRenderDescription)]},l._onRenderText=function(){var e=l.props.text,t=l.props.children;return void 0===e&&"string"==typeof t&&(e=t),l._hasText()?r.createElement("div",{key:l._labelId,className:l._classNames.label,id:l._labelId},e):null},l._onRenderChildren=function(){var e=l.props.children;return"string"==typeof e?null:e},l._onRenderDescription=function(e){var t=e.secondaryText,n=void 0===t?l.props.description:t;return n?r.createElement("div",{key:l._descriptionId,className:l._classNames.description,id:l._descriptionId},n):null},l._onRenderAriaDescription=function(){var e=l.props.ariaDescription;return e?r.createElement("span",{className:l._classNames.screenReaderText,id:l._ariaDescriptionId},e):null},l._onRenderMenuIcon=function(e){var t=l.props.menuIconProps;return r.createElement(a.Icon,o.__assign({iconName:"ChevronDown"},t,{className:l._classNames.menuIcon}))},l._onRenderMenu=function(e){var t=e.onDismiss,n=void 0===t?l._dismissMenu:t;return e.ariaLabel||e.labelElementId||!l._hasText()||(e=o.__assign({},e,{labelElementId:l._labelId})),r.createElement(s.ContextualMenu,o.__assign({id:l._labelId+"-menu",directionalHint:4},e,{shouldFocusOnContainer:l.state.menuProps?l.state.menuProps.shouldFocusOnContainer:void 0,className:i.css("ms-BaseButton-menuhost",e.className),target:l._isSplitButton?l._splitButtonContainer.current:l._buttonElement.current,onDismiss:n}))},l._dismissMenu=function(){var e=null;l.props.persistMenu&&l.state.menuProps&&((e=l.state.menuProps).hidden=!0),l.setState({menuProps:e})},l._openMenu=function(e){if(l.props.menuProps){var t=o.__assign({},l.props.menuProps,{shouldFocusOnContainer:e});l.props.persistMenu&&(t.hidden=!1),l.setState({menuProps:t})}},l._onToggleMenu=function(e){l._splitButtonContainer.current&&l._splitButtonContainer.current.focus();var t=l.state.menuProps;l.props.persistMenu?t&&t.hidden?l._openMenu(e):l._dismissMenu():t?l._dismissMenu():l._openMenu(e)},l._onSplitButtonPrimaryClick=function(e){l._isExpanded&&l._dismissMenu(),!l._processingTouch&&l.props.onClick?l.props.onClick(e):l._processingTouch&&l._onMenuClick(e)},l._onMouseDown=function(e){l.props.onMouseDown&&l.props.onMouseDown(e),e.preventDefault()},l._onSplitButtonContainerKeyDown=function(e){13===e.which?l._buttonElement.current&&(l._buttonElement.current.click(),e.preventDefault(),e.stopPropagation()):l._onMenuKeyDown(e)},l._onMenuKeyDown=function(e){if(!l.props.disabled&&(l.props.onKeyDown&&l.props.onKeyDown(e),!e.defaultPrevented&&l._isValidMenuOpenKey(e))){var t=l.props.onMenuClick;t&&t(e,l),l._onToggleMenu(!1),e.preventDefault(),e.stopPropagation()}},l._onTouchStart=function(){!l._isSplitButton||!l._splitButtonContainer.value||"onpointerdown"in l._splitButtonContainer.value||l._handleTouchAndPointerEvent()},l._onMenuClick=function(e){var t=l.props.onMenuClick;if(t&&t(e,l),!e.defaultPrevented){var n=0!==e.nativeEvent.detail;l._onToggleMenu(n),e.preventDefault(),e.stopPropagation()}},l._warnConditionallyRequiredProps(["menuProps","onClick"],"split",l.props.split),l._warnDeprecations({rootProps:void 0,description:"secondaryText"}),l._labelId=i.getId(),l._descriptionId=i.getId(),l._ariaDescriptionId=i.getId();var u=null;return t.persistMenu&&t.menuProps&&((u=t.menuProps).hidden=!0),l.state={menuProps:u},l}return o.__extends(t,e),Object.defineProperty(t.prototype,"_isSplitButton",{get:function(){return!!this.props.menuProps&&!!this.props.onClick&&!0===this.props.split},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_isExpanded",{get:function(){return this.props.persistMenu?!this.state.menuProps.hidden:!!this.state.menuProps},enumerable:!0,configurable:!0}),t.prototype.render=function(){var e=this.props,t=e.ariaDescription,n=e.ariaLabel,o=e.ariaHidden,r=e.className,a=e.disabled,s=e.primaryDisabled,u=e.secondaryText,c=void 0===u?this.props.description:u,d=e.href,p=e.iconProps,f=e.menuIconProps,h=e.styles,m=e.text,g=e.checked,_=e.variantClassName,v=e.theme,y=e.getClassNames,b=this.state.menuProps,C=a||s;this._classNames=y?y(v,r,_,p&&p.className,f&&f.className,C,g,!!b,this.props.split):l.getBaseButtonClassNames(h,r,_,p&&p.className,f&&f.className,C,g,!!b,this.props.split);var S,x=this._ariaDescriptionId,E=this._labelId,k=this._descriptionId,w=!C&&!!d,I=w?"a":"button",T=i.getNativeProps(i.assign(w?{}:{type:"button"},this.props.rootProps,this.props),w?i.anchorProperties:i.buttonProperties,["disabled"]);S=t?x:c?k:T["aria-describedby"]?T["aria-describedby"]:null;var M=null;n||(T["aria-labelledby"]?M=T["aria-labelledby"]:S&&(M=m?E:null));var P=i.assign(T,{className:this._classNames.root,ref:this._buttonElement,disabled:C,"aria-label":n,"aria-labelledby":M,"aria-describedby":S,"data-is-focusable":!1!==this.props["data-is-focusable"]&&!a&&!this._isSplitButton,"aria-pressed":g});return o&&(P["aria-hidden"]=!0),this._isSplitButton?this._onRenderSplitButtonContent(I,P):(this.props.menuProps&&i.assign(P,{onKeyDown:this._onMenuKeyDown,onClick:this._onMenuClick,"aria-expanded":this._isExpanded,"aria-owns":this.state.menuProps?this._labelId+"-menu":null,"aria-haspopup":!0}),this._onRenderContent(I,P))},t.prototype.componentDidMount=function(){this._isSplitButton&&this._splitButtonContainer.value&&"onpointerdown"in this._splitButtonContainer.value&&this._events.on(this._splitButtonContainer.value,"pointerdown",this._onPointerDown,!0)},t.prototype.componentDidUpdate=function(e,t){this.props.onAfterMenuDismiss&&t.menuProps&&!this.state.menuProps&&this.props.onAfterMenuDismiss()},t.prototype.focus=function(){this._isSplitButton&&this._splitButtonContainer.current?this._splitButtonContainer.current.focus():this._buttonElement.current&&this._buttonElement.current.focus()},t.prototype.dismissMenu=function(){this._dismissMenu()},t.prototype.openMenu=function(){this._openMenu()},t.prototype._onRenderContent=function(e,t){var n=this,i=this.props,a=e,s=i.menuIconProps,l=i.menuProps,u=i.onRenderIcon,d=void 0===u?this._onRenderIcon:u,p=i.onRenderAriaDescription,f=void 0===p?this._onRenderAriaDescription:p,h=i.onRenderChildren,m=void 0===h?this._onRenderChildren:h,g=i.onRenderMenu,_=void 0===g?this._onRenderMenu:g,v=i.onRenderMenuIcon,y=void 0===v?this._onRenderMenuIcon:v,b=i.disabled,C=i.keytipProps;C&&l&&(C=o.__assign({},C,{hasMenu:!0}));var S=r.createElement(c.KeytipData,{keytipProps:this._isSplitButton?void 0:C,ariaDescribedBy:t["aria-describedby"],disabled:b},function(e){return r.createElement(a,o.__assign({},t,e),r.createElement("div",{className:n._classNames.flexContainer},d(i,n._onRenderIcon),n._onRenderTextContents(),f(i,n._onRenderAriaDescription),m(i,n._onRenderChildren),!n._isSplitButton&&(l||s||n.props.onRenderMenuIcon)&&y(n.props,n._onRenderMenuIcon),n.state.menuProps&&!n.state.menuProps.doNotLayer&&_(l,n._onRenderMenu)))});return l&&l.doNotLayer?r.createElement("div",{style:{display:"inline-block"}},S,this.state.menuProps&&_(l,this._onRenderMenu)):S},t.prototype._hasText=function(){return null!==this.props.text&&(void 0!==this.props.text||"string"==typeof this.props.children)},t.prototype._onRenderSplitButtonContent=function(e,t){var n=this,a=this.props,s=a.styles,l=void 0===s?{}:s,d=a.disabled,p=a.checked,f=a.getSplitButtonClassNames,h=a.primaryDisabled,m=a.menuProps,g=this.props.keytipProps,_=f?f(!!d,!!this.state.menuProps,!!p):l&&u.getClassNames(l,!!d,!!this.state.menuProps,!!p);i.assign(t,{onClick:void 0,tabIndex:-1,"data-is-focusable":!1});var v=t.ariaDescription||"";return g&&m&&(g=o.__assign({},g,{hasMenu:!0})),r.createElement(c.KeytipData,{keytipProps:g,disabled:d},function(o){return r.createElement("div",{"data-ktp-target":o["data-ktp-target"],role:"button","aria-labelledby":t.ariaLabel,"aria-disabled":d,"aria-haspopup":!0,"aria-expanded":n._isExpanded,"aria-pressed":n.props.checked,"aria-describedby":v+(o["aria-describedby"]||""),className:_&&_.splitButtonContainer,onKeyDown:n._onSplitButtonContainerKeyDown,onTouchStart:n._onTouchStart,ref:n._splitButtonContainer,"data-is-focusable":!0,onClick:d||h?void 0:n._onSplitButtonPrimaryClick,tabIndex:d?void 0:0},r.createElement("span",{style:{display:"flex"}},n._onRenderContent(e,t),n._onRenderSplitButtonMenuButton(_,o),n._onRenderSplitButtonDivider(_)))})},t.prototype._onRenderSplitButtonDivider=function(e){return e&&e.divider?r.createElement("span",{className:e.divider}):null},t.prototype._onRenderSplitButtonMenuButton=function(e,n){var i=this.props.menuIconProps,a=this.props.splitButtonAriaLabel;void 0===i&&(i={iconName:"ChevronDown"});var s={styles:e,checked:this.props.checked,disabled:this.props.disabled,onClick:this._onMenuClick,menuProps:void 0,iconProps:i,ariaLabel:a,"aria-haspopup":!0,"aria-expanded":this._isExpanded,"data-is-focusable":!1};return r.createElement(t,o.__assign({},s,{"data-ktp-execute-target":n["data-ktp-execute-target"],onMouseDown:this._onMouseDown,tabIndex:-1}))},t.prototype._onPointerDown=function(e){"touch"===e.pointerType&&(this._handleTouchAndPointerEvent(),e.preventDefault(),e.stopImmediatePropagation())},t.prototype._handleTouchAndPointerEvent=function(){var e=this;void 0!==this._lastTouchTimeoutId&&(this._async.clearTimeout(this._lastTouchTimeoutId),this._lastTouchTimeoutId=void 0),this._processingTouch=!0,this._lastTouchTimeoutId=this._async.setTimeout(function(){e._processingTouch=!1,e._lastTouchTimeoutId=void 0},500)},t.prototype._isValidMenuOpenKey=function(e){return this.props.menuTriggerKeyCode?e.which===this.props.menuTriggerKeyCode:!!this.props.menuProps&&(40===e.which&&(e.altKey||e.metaKey))},t.defaultProps={baseClassName:"ms-Button",styles:{},split:!1},t}(i.BaseComponent);t.BaseButton=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0);!function(e){e[e.none=0]="none",e[e.insertNode=1]="insertNode",e[e.appendChild=2]="appendChild"}(t.InjectionMode||(t.InjectionMode={}));var r,i=function(){function e(e){this._rules=[],this._rulesToInsert=[],this._counter=0,this._keyToClassName={},this._classNameToArgs={},this._config=o.__assign({injectionMode:1,defaultPrefix:"css"},e)}return e.getInstance=function(){var t="undefined"!=typeof window?window:{};if(!(r=t.__stylesheet__)){var n=t&&t.FabricConfig||{};r=t.__stylesheet__=new e(n.mergeStyles)}return r},e.prototype.setConfig=function(e){this._config=o.__assign({},this._config,e)},e.prototype.getClassName=function(e){return(e||this._config.defaultPrefix)+"-"+this._counter++},e.prototype.cacheClassName=function(e,t,n,o){this._keyToClassName[t]=e,this._classNameToArgs[e]={args:n,rules:o}},e.prototype.classNameFromKey=function(e){return this._keyToClassName[e]},e.prototype.argsFromClassName=function(e){var t=this._classNameToArgs[e];return t&&t.args},e.prototype.insertedRulesFromClassName=function(e){var t=this._classNameToArgs[e];return t&&t.rules},e.prototype.insertRule=function(e){var t=0!==this._config.injectionMode?this._getStyleElement():void 0;if(t)switch(this._config.injectionMode){case 1:var n=t.sheet;try{n.insertRule(e,n.cssRules.length)}catch(e){}break;case 2:t.appendChild(document.createTextNode(e))}else this._rules.push(e);this._config.onInsertRule&&this._config.onInsertRule(e)},e.prototype.getRules=function(){return(this._rules.join("")||"")+(this._rulesToInsert.join("")||"")},e.prototype.reset=function(){this._rules=[],this._rulesToInsert=[],this._counter=0,this._classNameToArgs={},this._keyToClassName={}},e.prototype.resetKeys=function(){this._keyToClassName={}},e.prototype._getStyleElement=function(){var e=this;return this._styleElement||"undefined"==typeof document||(this._styleElement=this._createStyleElement(),window.requestAnimationFrame(function(){e._styleElement=void 0})),this._styleElement},e.prototype._createStyleElement=function(){var e=document.createElement("style");return e.setAttribute("data-merge-styles","true"),e.type="text/css",this._lastStyleElement&&this._lastStyleElement.nextElementSibling?document.head.insertBefore(e,this._lastStyleElement.nextElementSibling):document.head.appendChild(e),this._lastStyleElement=e,e},e}();t.Stylesheet=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(69),t);var o=n(69);t.default=o.Dialog},function(e,t,n){"use strict";(function(e){n.d(t,"f",function(){return s}),n.d(t,"a",function(){return l}),n.d(t,"b",function(){return u}),n.d(t,"c",function(){return c}),n.d(t,"e",function(){return d}),n.d(t,"d",function(){return p}),n.d(t,"g",function(){return f});var o="__currentId__",r="id__",i="undefined"!=typeof window&&window||e;function a(e,t){for(var n in e)if(e.hasOwnProperty(n)&&(!t.hasOwnProperty(n)||t[n]!==e[n]))return!1;return!0}function s(e,t){return a(e,t)&&a(t,e)}function l(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return u.apply(this,[null,e].concat(t))}function u(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];t=t||{};for(var r=0,i=n;r<i.length;r++){var a=i[r];if(a)for(var s in a)!a.hasOwnProperty(s)||e&&!e(s)||(t[s]=a[s])}return t}function c(e){var t=i[o]++;return(e||r)+t}function d(e){void 0===e&&(e=0),i[o]=e}function p(e,t){return Object.keys(e).map(function(n){if(String(Number(n))!==n)return t(n,e[n])}).filter(function(e){return!!e})}function f(e){return Object.keys(e).reduce(function(t,n){return t.push(e[n]),t},[])}void 0===i[o]&&(i[o]=0)}).call(this,n(52))},function(e,t,n){"use strict";function o(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.filter(function(e){return void 0!==e&&null!==e}).join("");return""===n?void 0:n}n.r(t);var r,i=function(){function e(e,t){this._timeoutIds=null,this._immediateIds=null,this._intervalIds=null,this._animationFrameIds=null,this._isDisposed=!1,this._parent=e||null,this._onErrorHandler=t,this._noop=function(){}}return e.prototype.dispose=function(){var e;if(this._isDisposed=!0,this._parent=null,this._timeoutIds){for(e in this._timeoutIds)this._timeoutIds.hasOwnProperty(e)&&this.clearTimeout(parseInt(e,10));this._timeoutIds=null}if(this._immediateIds){for(e in this._immediateIds)this._immediateIds.hasOwnProperty(e)&&this.clearImmediate(parseInt(e,10));this._immediateIds=null}if(this._intervalIds){for(e in this._intervalIds)this._intervalIds.hasOwnProperty(e)&&this.clearInterval(parseInt(e,10));this._intervalIds=null}if(this._animationFrameIds){for(e in this._animationFrameIds)this._animationFrameIds.hasOwnProperty(e)&&this.cancelAnimationFrame(parseInt(e,10));this._animationFrameIds=null}},e.prototype.setTimeout=function(e,t){var n=this,o=0;return this._isDisposed||(this._timeoutIds||(this._timeoutIds={}),o=setTimeout(function(){try{n._timeoutIds&&delete n._timeoutIds[o],e.apply(n._parent)}catch(e){n._onErrorHandler&&n._onErrorHandler(e)}},t),this._timeoutIds[o]=!0),o},e.prototype.clearTimeout=function(e){this._timeoutIds&&this._timeoutIds[e]&&(clearTimeout(e),delete this._timeoutIds[e])},e.prototype.setImmediate=function(e){var t=this,n=0;if(!this._isDisposed){this._immediateIds||(this._immediateIds={});var o=function(){try{t._immediateIds&&delete t._immediateIds[n],e.apply(t._parent)}catch(e){t._logError(e)}};n=window.setImmediate?window.setImmediate(o):window.setTimeout(o,0),this._immediateIds[n]=!0}return n},e.prototype.clearImmediate=function(e){this._immediateIds&&this._immediateIds[e]&&(window.clearImmediate?window.clearImmediate(e):window.clearTimeout(e),delete this._immediateIds[e])},e.prototype.setInterval=function(e,t){var n=this,o=0;return this._isDisposed||(this._intervalIds||(this._intervalIds={}),o=setInterval(function(){try{e.apply(n._parent)}catch(e){n._logError(e)}},t),this._intervalIds[o]=!0),o},e.prototype.clearInterval=function(e){this._intervalIds&&this._intervalIds[e]&&(clearInterval(e),delete this._intervalIds[e])},e.prototype.throttle=function(e,t,n){var o=this;if(this._isDisposed)return this._noop;var r,i,a=t||0,s=!0,l=!0,u=0,c=null;n&&"boolean"==typeof n.leading&&(s=n.leading),n&&"boolean"==typeof n.trailing&&(l=n.trailing);var d=function(t){var n=(new Date).getTime(),p=n-u,f=s?a-p:a;return p>=a&&(!t||s)?(u=n,c&&(o.clearTimeout(c),c=null),r=e.apply(o._parent,i)):null===c&&l&&(c=o.setTimeout(d,f)),r};return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i=e,d(!0)}},e.prototype.debounce=function(e,t,n){var o=this;if(this._isDisposed){var r=function(){};return r.cancel=function(){},r.flush=function(){return null},r.pending=function(){return!1},r}var i,a,s=t||0,l=!1,u=!0,c=null,d=0,p=(new Date).getTime(),f=null;n&&"boolean"==typeof n.leading&&(l=n.leading),n&&"boolean"==typeof n.trailing&&(u=n.trailing),n&&"number"==typeof n.maxWait&&!isNaN(n.maxWait)&&(c=n.maxWait);var h=function(e){f&&(o.clearTimeout(f),f=null),p=e},m=function(t){h(t),i=e.apply(o._parent,a)},g=function(e){var t=(new Date).getTime(),n=!1;e&&(l&&t-d>=s&&(n=!0),d=t);var r=t-d,a=s-r,h=t-p,_=!1;return null!==c&&(h>=c&&f?_=!0:a=Math.min(a,c-h)),r>=s||_||n?m(t):null!==f&&e||!u||(f=o.setTimeout(g,a)),i},_=function(){return!!f},v=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return a=e,g(!0)};return v.cancel=function(){_()&&h((new Date).getTime())},v.flush=function(){return _()&&m((new Date).getTime()),i},v.pending=_,v},e.prototype.requestAnimationFrame=function(e){var t=this,n=0;if(!this._isDisposed){this._animationFrameIds||(this._animationFrameIds={});var o=function(){try{t._animationFrameIds&&delete t._animationFrameIds[n],e.apply(t._parent)}catch(e){t._logError(e)}};n=window.requestAnimationFrame?window.requestAnimationFrame(o):window.setTimeout(o,0),this._animationFrameIds[n]=!0}return n},e.prototype.cancelAnimationFrame=function(e){this._animationFrameIds&&this._animationFrameIds[e]&&(window.cancelAnimationFrame?window.cancelAnimationFrame(e):window.clearTimeout(e),delete this._animationFrameIds[e])},e.prototype._logError=function(e){this._onErrorHandler&&this._onErrorHandler(e)},e}(),a=n(14),s=n(5),l=n(114),u=0,c=Object(l.a)({overflow:"hidden !important"}),d="data-is-scrollable";function p(){var e=Object(s.e)();e&&e.body&&!u&&e.body.classList.add(c),u++}function f(){if(u>0){var e=Object(s.e)();e&&e.body&&1===u&&e.body.classList.remove(c),u--}}function h(){if(void 0===r){var e=document.createElement("div");e.style.setProperty("width","100px"),e.style.setProperty("height","100px"),e.style.setProperty("overflow","scroll"),e.style.setProperty("position","absolute"),e.style.setProperty("top","-9999px"),document.body.appendChild(e),r=e.offsetWidth-e.clientWidth,document.body.removeChild(e)}return r}function m(e){for(var t=e;t&&t!==document.body;){if("true"===t.getAttribute(d))return t;t=t.parentElement}for(t=e;t&&t!==document.body;){if("false"!==t.getAttribute(d)){var n=getComputedStyle(t),o=n?n.getPropertyValue("overflow-y"):"";if(o&&("scroll"===o||"auto"===o))return t}t=t.parentElement}return t&&t!==document.body||(t=window),t}var g=function(){function e(e){this._events=new a.a(this),this._scrollableParent=m(e),this._incrementScroll=this._incrementScroll.bind(this),this._scrollRect=Object(s.g)(this._scrollableParent),this._scrollableParent===window&&(this._scrollableParent=document.body),this._scrollableParent&&(this._events.on(window,"mousemove",this._onMouseMove,!0),this._events.on(window,"touchmove",this._onTouchMove,!0))}return e.prototype.dispose=function(){this._events.dispose(),this._stopScroll()},e.prototype._onMouseMove=function(e){this._computeScrollVelocity(e.clientY)},e.prototype._onTouchMove=function(e){e.touches.length>0&&this._computeScrollVelocity(e.touches[0].clientY)},e.prototype._computeScrollVelocity=function(e){if(this._scrollRect){var t=this._scrollRect.top,n=t+this._scrollRect.height-100;this._scrollVelocity=e<t+100?Math.max(-15,(100-(e-t))/100*-15):e>n?Math.min(15,(e-n)/100*15):0,this._scrollVelocity?this._startScroll():this._stopScroll()}},e.prototype._startScroll=function(){this._timeoutId||this._incrementScroll()},e.prototype._incrementScroll=function(){this._scrollableParent&&(this._scrollableParent.scrollTop+=Math.round(this._scrollVelocity)),this._timeoutId=setTimeout(this._incrementScroll,16)},e.prototype._stopScroll=function(){this._timeoutId&&(clearTimeout(this._timeoutId),delete this._timeoutId)},e}(),_=n(0),v=n(1),y=n(49),b=n(48);var C=function(e){function t(n,o){var r=e.call(this,n,o)||this;return Object(b.b)(),function(e){var t=e||Object(s.i)();if(t&&!t.__hasInitializedDir__){t.__hasInitializedDir__=!0;var n=t.document.documentElement;n.hasAttribute("dir")||n.setAttribute("dir","ltr")}}(),r._shouldUpdateComponentRef=!0,function(e,t,n){for(var o=0,r=n.length;o<r;o++)S(e,t,n[o])}(r,t.prototype,["componentWillMount","componentDidMount","shouldComponentUpdate","componentWillUpdate","componentWillReceiveProps","render","componentDidUpdate","componentWillUnmount"]),r}return _.__extends(t,e),t.prototype.componentWillReceiveProps=function(e,t){this._updateComponentRef(this.props,e)},t.prototype.componentDidMount=function(){this._updateComponentRef(void 0,this.props)},t.prototype.componentWillUnmount=function(){if(this.__disposables){for(var e=0,t=this._disposables.length;e<t;e++){var n=this.__disposables[e];n.dispose&&n.dispose()}this.__disposables=null}},Object.defineProperty(t.prototype,"className",{get:function(){if(!this.__className){var e=/function (.{1,})\(/.exec(this.constructor.toString());this.__className=e&&e.length>1?e[1]:""}return this.__className},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_disposables",{get:function(){return this.__disposables||(this.__disposables=[]),this.__disposables},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_async",{get:function(){return this.__async||(this.__async=new i(this),this._disposables.push(this.__async)),this.__async},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_events",{get:function(){return this.__events||(this.__events=new a.a(this),this._disposables.push(this.__events)),this.__events},enumerable:!0,configurable:!0}),t.prototype._resolveRef=function(e){var t=this;return this.__resolves||(this.__resolves={}),this.__resolves[e]||(this.__resolves[e]=function(n){return t[e]=n}),this.__resolves[e]},t.prototype._updateComponentRef=function(e,t){void 0===t&&(t={}),this._shouldUpdateComponentRef&&(!e&&t.componentRef||e&&e.componentRef!==t.componentRef)&&(e&&e.componentRef&&e.componentRef(null),t.componentRef&&t.componentRef(this))},t.prototype._warnDeprecations=function(e){Object(y.d)(this.className,this.props,e)},t.prototype._warnMutuallyExclusive=function(e){Object(y.e)(this.className,this.props,e)},t.prototype._warnConditionallyRequiredProps=function(e,t,n){Object(y.c)(this.className,this.props,e,t,n)},t}(v.Component);function S(e,t,n){var o=e[n],r=t[n];(o||r)&&(e[n]=function(){var e;return r&&(e=r.apply(this,arguments)),o!==r&&(e=o.apply(this,arguments)),e})}function x(){return null}function E(e,t){return function(n){function o(){return null!==n&&n.apply(this,arguments)||this}return _.__extends(o,n),o.prototype.getChildContext=function(){return t(this.props)},o.prototype.render=function(){return v.Children.only(this.props.children)},o.childContextTypes=e,o}(v.Component)}var k=n(47),w=n(56),I=function(e){function t(t,n){var o=e.call(this,t)||this;return o.state=o._getCustomizations(t,n),o}return _.__extends(t,e),t.prototype.getChildContext=function(){return this.state},t.prototype.componentWillReceiveProps=function(e,t){this.setState(this._getCustomizations(e,t))},t.prototype.render=function(){return v.Children.only(this.props.children)},t.prototype._getCustomizations=function(e,t){var n=t.customizations,o=void 0===n?{settings:{},scopedSettings:{}}:n;return{customizations:{settings:function(e,t){void 0===e&&(e={});return(T(t)?t:function(e){return function(t){return e?_.__assign({},e,t):t}}(t))(e)}(o.settings,e.settings),scopedSettings:function(e,t){void 0===e&&(e={});return(T(t)?t:function(e){void 0===e&&(e={});return function(t){var n=_.__assign({},t);for(var o in e)e.hasOwnProperty(o)&&(n[o]=_.__assign({},t[o],e[o]));return n}}(t))(e)}(o.scopedSettings,e.scopedSettings)}}},t.contextTypes={customizations:w.object},t.childContextTypes=t.contextTypes,t}(C);function T(e){return"function"==typeof e}var M,P=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isRendered:!1},n}return _.__extends(t,e),t.prototype.componentDidMount=function(){var e=this,t=this.props.delay;this._timeoutId=setTimeout(function(){e.setState({isRendered:!0})},t)},t.prototype.componentWillUnmount=function(){this._timeoutId&&clearTimeout(this._timeoutId)},t.prototype.render=function(){return this.state.isRendered?v.Children.only(this.props.children):null},t.defaultProps={delay:0},t}(v.Component),D=function(){return"undefined"!=typeof performance&&performance.now?performance.now():Date.now()},O=function(){function e(){}return e.measure=function(t,n){e._timeoutId&&e.setPeriodicReset();var o=D();n();var r=D(),i=e.summary[t]||{totalDuration:0,count:0,all:[]},a=r-o;i.totalDuration+=a,i.count++,i.all.push({duration:a,timeStamp:r}),e.summary[t]=i},e.reset=function(){e.summary={},clearTimeout(e._timeoutId),e._timeoutId=NaN},e.setPeriodicReset=function(){e._timeoutId=setTimeout(function(){return e.reset()},18e4)},e.summary={},e}(),F=n(46);!function(e){e[e.backspace=8]="backspace",e[e.tab=9]="tab",e[e.enter=13]="enter",e[e.shift=16]="shift",e[e.ctrl=17]="ctrl",e[e.alt=18]="alt",e[e.pauseBreak=19]="pauseBreak",e[e.capslock=20]="capslock",e[e.escape=27]="escape",e[e.space=32]="space",e[e.pageUp=33]="pageUp",e[e.pageDown=34]="pageDown",e[e.end=35]="end",e[e.home=36]="home",e[e.left=37]="left",e[e.up=38]="up",e[e.right=39]="right",e[e.down=40]="down",e[e.insert=45]="insert",e[e.del=46]="del",e[e.zero=48]="zero",e[e.one=49]="one",e[e.two=50]="two",e[e.three=51]="three",e[e.four=52]="four",e[e.five=53]="five",e[e.six=54]="six",e[e.seven=55]="seven",e[e.eight=56]="eight",e[e.nine=57]="nine",e[e.a=65]="a",e[e.b=66]="b",e[e.c=67]="c",e[e.d=68]="d",e[e.e=69]="e",e[e.f=70]="f",e[e.g=71]="g",e[e.h=72]="h",e[e.i=73]="i",e[e.j=74]="j",e[e.k=75]="k",e[e.l=76]="l",e[e.m=77]="m",e[e.n=78]="n",e[e.o=79]="o",e[e.p=80]="p",e[e.q=81]="q",e[e.r=82]="r",e[e.s=83]="s",e[e.t=84]="t",e[e.u=85]="u",e[e.v=86]="v",e[e.w=87]="w",e[e.x=88]="x",e[e.y=89]="y",e[e.z=90]="z",e[e.leftWindow=91]="leftWindow",e[e.rightWindow=92]="rightWindow",e[e.select=93]="select",e[e.zero_numpad=96]="zero_numpad",e[e.one_numpad=97]="one_numpad",e[e.two_numpad=98]="two_numpad",e[e.three_numpad=99]="three_numpad",e[e.four_numpad=100]="four_numpad",e[e.five_numpad=101]="five_numpad",e[e.six_numpad=102]="six_numpad",e[e.seven_numpad=103]="seven_numpad",e[e.eight_numpad=104]="eight_numpad",e[e.nine_numpad=105]="nine_numpad",e[e.multiply=106]="multiply",e[e.add=107]="add",e[e.subtract=109]="subtract",e[e.decimalPoint=110]="decimalPoint",e[e.divide=111]="divide",e[e.f1=112]="f1",e[e.f2=113]="f2",e[e.f3=114]="f3",e[e.f4=115]="f4",e[e.f5=116]="f5",e[e.f6=117]="f6",e[e.f7=118]="f7",e[e.f8=119]="f8",e[e.f9=120]="f9",e[e.f10=121]="f10",e[e.f11=122]="f11",e[e.f12=123]="f12",e[e.numlock=144]="numlock",e[e.scrollLock=145]="scrollLock",e[e.semicolon=186]="semicolon",e[e.equalSign=187]="equalSign",e[e.comma=188]="comma",e[e.dash=189]="dash",e[e.period=190]="period",e[e.forwardSlash=191]="forwardSlash",e[e.graveAccent=192]="graveAccent",e[e.openBracket=219]="openBracket",e[e.backSlash=220]="backSlash",e[e.closeBracket=221]="closeBracket",e[e.singleQuote=222]="singleQuote"}(M||(M={}));var R=function(){function e(e,t,n,o){void 0===e&&(e=0),void 0===t&&(t=0),void 0===n&&(n=0),void 0===o&&(o=0),this.top=n,this.bottom=o,this.left=e,this.right=t}return Object.defineProperty(e.prototype,"width",{get:function(){return this.right-this.left},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.bottom-this.top},enumerable:!0,configurable:!0}),e.prototype.equals=function(e){return parseFloat(this.top.toFixed(4))===parseFloat(e.top.toFixed(4))&&parseFloat(this.bottom.toFixed(4))===parseFloat(e.bottom.toFixed(4))&&parseFloat(this.left.toFixed(4))===parseFloat(e.left.toFixed(4))&&parseFloat(this.right.toFixed(4))===parseFloat(e.right.toFixed(4))},e}();function A(e,t){for(var n=-1,o=0;e&&o<e.length;o++)if(t(e[o],o)){n=o;break}return n}function L(e,t){var n=A(e,t);if(!(n<0))return e[n]}function N(e,t){for(var n=[],o=0;o<e;o++)n.push(t(o));return n}function B(e,t){return e.reduce(function(e,n,o){return o%t==0?e.push([n]):e[e.length-1].push(n),e},[])}function U(e,t){return e.filter(function(e,n){return t!==n})}function j(e,t,n){var o=e.slice();return o[n]=t,o}function W(e,t,n){var o=e.slice();return o.splice(t,0,n),o}function H(e){var t=[];return e.forEach(function(e){return t=t.concat(e)}),t}function z(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function K(e){throw new Error("Unexpected object: "+e)}function V(e,t,n){var o=n.value,r=!1;return{configurable:!0,get:function(){if(r||o&&this===o.prototype||this.hasOwnProperty(t))return o;var e=o&&o.bind(this);return r=!0,Object.defineProperty(this,t,{configurable:!0,writable:!0,enumerable:!0,value:e}),r=!1,e},set:function(e){Object.defineProperty(this,t,{configurable:!0,writable:!0,enumerable:!0,value:e})}}}var G=n(112);function q(){return function(e,t){return Object(G.a)(e&&("function"==typeof e?e(t):e))}}function Z(){var e=function(t){e.current=t};return Object.defineProperty(e,"value",{get:function(){return e.current}}),e.current=null,e}function $(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=[],o=0,r=e;o<r.length;o++){var i=r[o];if(i)if("string"==typeof i)n.push(i);else if(i.hasOwnProperty("toString")&&"function"==typeof i.toString)n.push(i.toString());else for(var a in i)i[a]&&n.push(a)}return n.join(" ")}function Y(e,t){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}function X(e,t){return function(n){var o,r=((o=function(o){function r(e,t){var n=o.call(this,e,t)||this;return n._onSettingChanged=n._onSettingChanged.bind(n),n}return _.__extends(r,o),r.prototype.componentDidMount=function(){k.a.observe(this._onSettingChanged)},r.prototype.componentWillUnmount=function(){k.a.unobserve(this._onSettingChanged)},r.prototype.render=function(){var o=k.a.getSettings(t,e,this.context.customizations);return v.createElement(n,_.__assign({},o,this.props))},r.prototype._onSettingChanged=function(){this.forceUpdate()},r}(v.Component)).displayName="Customized"+e,o.contextTypes={customizations:w.object},o);return Y(n,r)}}var Q="data-is-focusable",J="data-is-visible",ee="data-focuszone-id",te="data-is-sub-focuszone";function ne(e,t,n){return se(e,t,!0,!1,!1,n)}function oe(e,t,n){return ae(e,t,!0,!1,!0,n)}function re(e,t,n){return ae(e,t,!0,!1,!0,n,!1,!0)}function ie(e){var t=se(e,e,!0,!1,!1,!0);return!!t&&(me(t),!0)}function ae(e,t,n,o,r,i,a,s){if(!t||!a&&t===e)return null;var l=le(t);if(r&&l&&(i||!ce(t)&&!de(t))){var u=ae(e,t.lastElementChild,!0,!0,!0,i,a,s);if(u){if(s&&ue(u,!0)||!s)return u;var c=ae(e,u.previousElementSibling,!0,!0,!0,i,a,s);if(c)return c;for(var d=u.parentElement;d&&d!==t;){var p=ae(e,d.previousElementSibling,!0,!0,!0,i,a,s);if(p)return p;d=d.parentElement}}}if(n&&l&&ue(t))return t;var f=ae(e,t.previousElementSibling,!0,!0,!0,i,a,s);return f||(o?null:ae(e,t.parentElement,!0,!1,!1,i,a,s))}function se(e,t,n,o,r,i,a){if(!t||t===e&&r&&!a)return null;var s=le(t);if(n&&s&&ue(t))return t;if(!r&&s&&(i||!ce(t)&&!de(t))){var l=se(e,t.firstElementChild,!0,!0,!1,i,a);if(l)return l}if(t===e)return null;var u=se(e,t.nextElementSibling,!0,!0,!1,i,a);return u||(o?null:se(e,t.parentElement,!1,!1,!0,i,a))}function le(e){if(!e||!e.getAttribute)return!1;var t=e.getAttribute(J);return null!==t&&void 0!==t?"true"===t:0!==e.offsetHeight||null!==e.offsetParent||!0===e.isVisible}function ue(e,t){if(!e||e.disabled)return!1;var n=0,o=null;e&&e.getAttribute&&(o=e.getAttribute("tabIndex"))&&(n=parseInt(o,10));var r=e.getAttribute?e.getAttribute(Q):null,i=null!==o&&n>=0,a=!!e&&"false"!==r&&("A"===e.tagName||"BUTTON"===e.tagName||"INPUT"===e.tagName||"TEXTAREA"===e.tagName||"true"===r||i||e.getAttribute&&"button"===e.getAttribute("role"));return t?-1!==n&&a:a}function ce(e){return!!(e&&e.getAttribute&&e.getAttribute(ee))}function de(e){return!(!e||!e.getAttribute||"true"!==e.getAttribute(te))}function pe(e){var t=Object(s.e)(e),n=t&&t.activeElement;return!(!n||!Object(s.a)(e,n))}function fe(e,t){return"true"!==Object(s.b)(e,t)}var he=void 0;function me(e){if(e){if(he)return void(he=e);he=e;var t=Object(s.i)(e);t&&t.requestAnimationFrame(function(){he&&he.focus(),he=void 0})}}var ge=["setState","render","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","componentWillUnmount"];function _e(e,t,n){void 0===n&&(n=ge);var o=[],r=function(r){"function"!=typeof t[r]||void 0!==e[r]||n&&-1!==n.indexOf(r)||(o.push(r),e[r]=function(){t[r].apply(t,arguments)})};for(var i in t)r(i);return o}function ve(e,t){t.forEach(function(t){return delete e[t]})}var ye=/\([^)]*\)|[\0-\u001F\!-/:-@\[-`\{-\u00BF\u0250-\u036F\uD800-\uFFFF]/g,be=/^\d+[\d\s]*(:?ext|x|)\s*\d+$/i,Ce=/\s+/g,Se=/[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\u1100-\u11FF\u3130-\u318F\uA960-\uA97F\uAC00-\uD7AF\uD7B0-\uD7FF\u3040-\u309F\u30A0-\u30FF\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]|[\uD840-\uD869][\uDC00-\uDED6]/;function xe(e,t,n){return e?(e=function(e){return e=(e=(e=e.replace(ye,"")).replace(Ce," ")).trim()}(e),Se.test(e)||!n&&be.test(e)?"":function(e,t){var n="",o=e.split(" ");return 2===o.length?(n+=o[0].charAt(0).toUpperCase(),n+=o[1].charAt(0).toUpperCase()):3===o.length?(n+=o[0].charAt(0).toUpperCase(),n+=o[2].charAt(0).toUpperCase()):0!==o.length&&(n+=o[0].charAt(0).toUpperCase()),t&&n.length>1?n.charAt(1)+n.charAt(0):n}(e,t)):""}var Ee=n(40),ke=n(55);function we(e,t){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function Ie(e){var t,n=e.contentSize,o=e.boundsSize,r=e.mode,i=void 0===r?"contain":r,a=e.maxScale,s=void 0===a?1:a,l=n.width/n.height,u=o.width/o.height;t=("contain"===i?l>u:l<u)?o.width/n.width:o.height/n.height;var c=Math.min(s,t);return{width:n.width*c,height:n.height*c}}function Te(e){var t=/[1-9]([0]+$)|\.([0-9]*)/.exec(String(e));return t?t[1]?-t[1].length:t[2]?t[2].length:0:0}function Me(e,t,n){void 0===n&&(n=10);var o=Math.pow(n,t);return Math.round(e*o)/o}var Pe={empty:!0},De={},Oe="undefined"==typeof WeakMap?null:WeakMap;function Fe(e){Oe=e}function Re(e,t,n){var o=Ae(n.value&&n.value.bind(null));return{configurable:!0,get:function(){return o}}}function Ae(e,t){var n;void 0===t&&(t=100);var o=0;return Oe?function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];var a=n;(void 0===n||t>0&&o>t)&&(n=Ne(),o=0),a=n;for(var s=0;s<r.length;s++){var l=Le(r[s]);a.map.has(l)||a.map.set(l,Ne()),a=a.map.get(l)}return a.hasOwnProperty("value")||(a.value=e.apply(void 0,r),o++),a.value}:e}function Le(e){return e?"object"==typeof e?e:(De[e]||(De[e]={val:e}),De[e]):Pe}function Ne(){return{map:Oe?new Oe:null}}var Be=n(23);function Ue(e){return e.clientWidth<e.scrollWidth}function je(e){return e.clientHeight<e.scrollHeight}function We(e){return Ue(e)||je(e)}var He=["onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onFocus","onFocusCapture","onBlur","onBlurCapture","onChange","onInput","onSubmit","onLoad","onError","onKeyDown","onKeyDownCapture","onKeyPress","onKeyUp","onAbort","onCanPlay","onCanPlayThrough","onDurationChange","onEmptied","onEncrypted","onEnded","onLoadedData","onLoadedMetadata","onLoadStart","onPause","onPlay","onPlaying","onProgress","onRateChange","onSeeked","onSeeking","onStalled","onSuspend","onTimeUpdate","onVolumeChange","onWaiting","onClick","onClickCapture","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseDownCapture","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onMouseUpCapture","onSelect","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","onScroll","onWheel"],ze=["defaultChecked","defaultValue","accept","acceptCharset","accessKey","action","allowFullScreen","allowTransparency","alt","async","autoComplete","autoFocus","autoPlay","capture","cellPadding","cellSpacing","charSet","challenge","checked","children","classID","className","cols","colSpan","content","contentEditable","contextMenu","controls","coords","crossOrigin","data","dateTime","default","defer","dir","download","draggable","encType","form","formAction","formEncType","formMethod","formNoValidate","formTarget","frameBorder","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","icon","id","inputMode","integrity","is","keyParams","keyType","kind","lang","list","loop","low","manifest","marginHeight","marginWidth","max","maxLength","media","mediaGroup","method","min","minLength","multiple","muted","name","noValidate","open","optimum","pattern","placeholder","poster","preload","radioGroup","readOnly","rel","required","role","rows","rowSpan","sandbox","scope","scoped","scrolling","seamless","selected","shape","size","sizes","span","spellCheck","src","srcDoc","srcLang","srcSet","start","step","style","summary","tabIndex","title","type","useMap","value","width","wmode","wrap"],Ke=ze.concat(He),Ve=Ke.concat(["href","target"]),Ge=Ke.concat(["disabled"]),qe=Ke.concat(["align","noWrap"]),Ze=Ge,$e=Ge,Ye=qe;function Xe(e,t,n){return Object(Be.b)(function(e){return(!n||n.indexOf(e)<0)&&(0===e.indexOf("data-")||0===e.indexOf("aria-")||t.indexOf(e)>=0)},{},e)}var Qe="";function Je(e){return Qe+e}function et(e){Qe=e}var tt,nt=n(51),ot="isRTL";function rt(){if(void 0===tt){var e=function(e){var t=null;try{t=window.sessionStorage.getItem(e)}catch(e){}return t}(ot);null!==e&&it(tt="1"===e);var t=Object(s.e)();void 0===tt&&t&&(tt="rtl"===t.documentElement.getAttribute("dir"),Object(nt.b)(tt))}return!!tt}function it(e,t){void 0===t&&(t=!1);var n=Object(s.e)();n&&n.documentElement.setAttribute("dir",e?"rtl":"ltr"),t&&function(e,t){try{window.sessionStorage.setItem(e,t)}catch(e){}}(ot,e?"1":"0"),tt=e,Object(nt.b)(tt)}function at(e){return rt()&&(37===e?e=39:39===e&&(e=37)),e}var st=/[\{\}]/g,lt=/\{\d+\}/g;function ut(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var o=t;return e.replace(lt,function(e){var t=o[e.replace(st,"")];return null!==t&&void 0!==t||(t=""),t})}var ct=n(50);function dt(e,t,n){var o=function(o){var r=n?n(o):{};return v.createElement(e,_.__assign({},r,o,{styles:function(e){return Object(ct.a)(t&&t(e),o&&o.styles&&("function"==typeof o.styles?o.styles(e):o.styles))}}))};return o.displayName="Styled"+(e.displayName||e.name),o}n.d(t,"mergeAriaAttributeValues",function(){return o}),n.d(t,"Async",function(){return i}),n.d(t,"AutoScroll",function(){return g}),n.d(t,"BaseComponent",function(){return C}),n.d(t,"nullRender",function(){return x}),n.d(t,"provideContext",function(){return E}),n.d(t,"Customizations",function(){return k.a}),n.d(t,"Customizer",function(){return I}),n.d(t,"DelayedRender",function(){return P}),n.d(t,"EventGroup",function(){return a.a}),n.d(t,"FabricPerformance",function(){return O}),n.d(t,"GlobalSettings",function(){return F.a}),n.d(t,"KeyCodes",function(){return M}),n.d(t,"Rectangle",function(){return R}),n.d(t,"findIndex",function(){return A}),n.d(t,"find",function(){return L}),n.d(t,"createArray",function(){return N}),n.d(t,"toMatrix",function(){return B}),n.d(t,"removeIndex",function(){return U}),n.d(t,"replaceElement",function(){return j}),n.d(t,"addElementAtIndex",function(){return W}),n.d(t,"flatten",function(){return H}),n.d(t,"arraysEqual",function(){return z}),n.d(t,"assertNever",function(){return K}),n.d(t,"autobind",function(){return V}),n.d(t,"classNamesFunction",function(){return q}),n.d(t,"createRef",function(){return Z}),n.d(t,"css",function(){return $}),n.d(t,"customizable",function(){return X}),n.d(t,"setVirtualParent",function(){return s.k}),n.d(t,"getVirtualParent",function(){return s.h}),n.d(t,"getParent",function(){return s.f}),n.d(t,"getChildren",function(){return s.d}),n.d(t,"elementContains",function(){return s.a}),n.d(t,"setSSR",function(){return s.j}),n.d(t,"getWindow",function(){return s.i}),n.d(t,"getDocument",function(){return s.e}),n.d(t,"getRect",function(){return s.g}),n.d(t,"findElementRecursive",function(){return s.c}),n.d(t,"elementContainsAttribute",function(){return s.b}),n.d(t,"getFirstFocusable",function(){return ne}),n.d(t,"getLastFocusable",function(){return oe}),n.d(t,"getLastTabbable",function(){return re}),n.d(t,"focusFirstChild",function(){return ie}),n.d(t,"getPreviousElement",function(){return ae}),n.d(t,"getNextElement",function(){return se}),n.d(t,"isElementVisible",function(){return le}),n.d(t,"isElementTabbable",function(){return ue}),n.d(t,"isElementFocusZone",function(){return ce}),n.d(t,"isElementFocusSubZone",function(){return de}),n.d(t,"doesElementContainFocus",function(){return pe}),n.d(t,"shouldWrapFocus",function(){return fe}),n.d(t,"focusAsync",function(){return me}),n.d(t,"hoistMethods",function(){return _e}),n.d(t,"unhoistMethods",function(){return ve}),n.d(t,"hoistStatics",function(){return Y}),n.d(t,"IsFocusVisibleClassName",function(){return b.a}),n.d(t,"initializeFocusRects",function(){return b.b}),n.d(t,"getInitials",function(){return xe}),n.d(t,"isDirectionalKeyCode",function(){return Ee.b}),n.d(t,"addDirectionalKeyCode",function(){return Ee.a}),n.d(t,"getLanguage",function(){return ke.a}),n.d(t,"setLanguage",function(){return ke.b}),n.d(t,"getDistanceBetweenPoints",function(){return we}),n.d(t,"fitContentToBounds",function(){return Ie}),n.d(t,"calculatePrecision",function(){return Te}),n.d(t,"precisionRound",function(){return Me}),n.d(t,"setMemoizeWeakMap",function(){return Fe}),n.d(t,"memoize",function(){return Re}),n.d(t,"memoizeFunction",function(){return Ae}),n.d(t,"shallowCompare",function(){return Be.f}),n.d(t,"assign",function(){return Be.a}),n.d(t,"filteredAssign",function(){return Be.b}),n.d(t,"getId",function(){return Be.c}),n.d(t,"resetIds",function(){return Be.e}),n.d(t,"mapEnumByName",function(){return Be.d}),n.d(t,"values",function(){return Be.g}),n.d(t,"hasHorizontalOverflow",function(){return Ue}),n.d(t,"hasVerticalOverflow",function(){return je}),n.d(t,"hasOverflow",function(){return We}),n.d(t,"baseElementEvents",function(){return He}),n.d(t,"baseElementProperties",function(){return ze}),n.d(t,"htmlElementProperties",function(){return Ke}),n.d(t,"anchorProperties",function(){return Ve}),n.d(t,"buttonProperties",function(){return Ge}),n.d(t,"divProperties",function(){return qe}),n.d(t,"inputProperties",function(){return Ze}),n.d(t,"textAreaProperties",function(){return $e}),n.d(t,"imageProperties",function(){return Ye}),n.d(t,"getNativeProps",function(){return Xe}),n.d(t,"getResourceUrl",function(){return Je}),n.d(t,"setBaseUrl",function(){return et}),n.d(t,"getRTL",function(){return rt}),n.d(t,"setRTL",function(){return it}),n.d(t,"getRTLSafeKeyCode",function(){return at}),n.d(t,"DATA_IS_SCROLLABLE_ATTRIBUTE",function(){return d}),n.d(t,"disableBodyScroll",function(){return p}),n.d(t,"enableBodyScroll",function(){return f}),n.d(t,"getScrollbarWidth",function(){return h}),n.d(t,"findScrollableParent",function(){return m}),n.d(t,"format",function(){return ut}),n.d(t,"styled",function(){return dt}),n.d(t,"warnDeprecations",function(){return y.d}),n.d(t,"warnMutuallyExclusive",function(){return y.e}),n.d(t,"warnConditionallyRequiredProps",function(){return y.c}),n.d(t,"warn",function(){return y.b}),n.d(t,"setWarningCallback",function(){return y.a})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(26),a=n(2),s=n(35),l=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.openSubMenu=function(){var e=t.props,n=e.item,o=e.openSubMenu,r=e.getSubmenuTarget;if(r){var a=r();i.hasSubmenu(n)&&o&&a&&o(n,a)}},t.dismissSubMenu=function(){var e=t.props,n=e.item,o=e.dismissSubMenu;i.hasSubmenu(n)&&o&&o()},t.dismissMenu=function(e){var n=t.props.dismissMenu;n&&n(void 0,e)},t}return o.__extends(t,e),t.prototype.render=function(){var e=this.props,t=e.item,n=e.classNames;return r.createElement("div",{className:t.split?n.linkContentMenu:n.linkContent},function(e){var t=e.onCheckmarkClick,n=e.item,o=e.classNames,a=i.getIsChecked(n);if(t)return r.createElement(s.Icon,{iconName:a?"CheckMark":"",className:o.checkmarkIcon,onClick:function(e){return t(n,e)}});return null}(this.props),function(e){var t=e.item,n=e.hasIcons,i=e.classNames,a=t.iconProps;return n?t.onRenderIcon?t.onRenderIcon(e):r.createElement(s.Icon,o.__assign({},a,{className:i.icon})):null}(this.props),function(e){var t=e.item,n=e.classNames;return t.text||t.name?r.createElement("span",{className:n.label},t.text||t.name):null}(this.props),function(e){var t=e.item,n=e.classNames;return t.secondaryText?r.createElement("span",{className:n.secondaryText},t.secondaryText):null}(this.props),function(e){var t=e.item,n=e.classNames;return i.hasSubmenu(t)?r.createElement(s.Icon,o.__assign({iconName:a.getRTL()?"ChevronLeft":"ChevronRight"},t.submenuIconProps,{className:n.subMenuIcon})):null}(this.props))},t}(a.BaseComponent);t.ContextualMenuItem=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(191),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(251),t)},function(e,t,n){"use strict";(function(e){var n,o=this&&this.__assign||Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e};Object.defineProperty(t,"__esModule",{value:!0});var r="undefined"==typeof window?e:window,i=function(){var e=r.__themeState__||{theme:void 0,lastStyleElement:void 0,registeredStyles:[]};e.runState||(e=o({},e,{perf:{count:0,duration:0},runState:{flushTimer:0,mode:0,buffer:[]}}));e.registeredThemableStyles||(e=o({},e,{registeredThemableStyles:[]}));return r.__themeState__=e,e}(),a=/[\'\"]\[theme:\s*(\w+)\s*(?:\,\s*default:\s*([\\"\']?[\.\,\(\)\#\-\s\w]*[\.\,\(\)\#\-\w][\"\']?))?\s*\][\'\"]/g,s=1e4,l=function(){return"undefined"!=typeof performance&&performance.now?performance.now():Date.now()};function u(e){var t=l();e();var n=l();i.perf.duration+=n-t}function c(){u(function(){var e=i.runState.buffer.slice();i.runState.buffer=[];var t=[].concat.apply([],e);t.length>0&&d(t)})}function d(e,t){i.loadStyles?i.loadStyles(m(e).styleString,e):n?function(e,t){var n=document.getElementsByTagName("head")[0],o=i.registeredStyles,r=i.lastStyleElement,a=r?r.styleSheet:void 0,l=a?a.cssText:"",u=o[o.length-1],c=m(e).styleString;(!r||l.length+c.length>s)&&((r=document.createElement("style")).type="text/css",t?(n.replaceChild(r,t.styleElement),t.styleElement=r):n.appendChild(r),t||(u={styleElement:r,themableStyle:e},o.push(u)));r.styleSheet.cssText+=h(c),Array.prototype.push.apply(u.themableStyle,e),i.lastStyleElement=r}(e,t):function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("style"),o=m(e),r=o.styleString,a=o.themable;n.type="text/css",n.appendChild(document.createTextNode(r)),i.perf.count++,t.appendChild(n);var s={styleElement:n,themableStyle:e};a?i.registeredThemableStyles.push(s):i.registeredStyles.push(s)}(e)}function p(e){void 0===e&&(e=3),3!==e&&2!==e||(f(i.registeredStyles),i.registeredStyles=[]),3!==e&&1!==e||(f(i.registeredThemableStyles),i.registeredThemableStyles=[])}function f(e){e.forEach(function(e){var t=e&&e.styleElement;t&&t.parentElement&&t.parentElement.removeChild(t)})}function h(e){return e&&(e=m(g(e)).styleString),e}function m(e){var t=i.theme,n=!1;return{styleString:(e||[]).map(function(e){var o=e.theme;if(o){n=!0;var r=t?t[o]:void 0,i=e.defaultValue||"inherit";return!t||r||!console||o in t||"undefined"==typeof DEBUG||!DEBUG||console.warn('Theming value not provided for "'+o+'". Falling back to "'+i+'".'),r||i}return e.rawString}).join(""),themable:n}}function g(e){var t=[];if(e){for(var n=0,o=void 0;o=a.exec(e);){var r=o.index;r>n&&t.push({rawString:e.substring(n,r)}),t.push({theme:o[1],defaultValue:o[2]}),n=a.lastIndex}t.push({rawString:e.substring(n)})}return t}t.loadStyles=function(e,t){void 0===t&&(t=!1),u(function(){var o=Array.isArray(e)?e:g(e);void 0===n&&(n=function(){var e=!1;if("undefined"!=typeof document){var t=document.createElement("style");t.type="text/css",e=!!t.styleSheet}return e}());var r=i.runState,a=r.mode,s=r.buffer,l=r.flushTimer;t||1===a?(s.push(o),l||(i.runState.flushTimer=setTimeout(function(){i.runState.flushTimer=0,c()},0))):d(o)})},t.configureLoadStyles=function(e){i.loadStyles=e},t.configureRunMode=function(e){i.runState.mode=e},t.flush=c,t.loadTheme=function(e){i.theme=e,function(){if(i.theme){for(var e=[],t=0,n=i.registeredThemableStyles;t<n.length;t++){var o=n[t];e.push(o.themableStyle)}e.length>0&&(p(1),d([].concat.apply([],e)))}}()},t.clearStyles=p,t.detokenize=h,t.splitStyles=g}).call(this,n(253))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),r=n(2);t.getStyles=r.memoizeFunction(function(e,t){var n={splitButtonContainer:[o.getFocusStyle(e,0,"relative",{left:-2,top:-2,bottom:-2,right:-2,border:"none"}),{display:"inline-flex"}],splitButtonContainerFocused:{outline:"none!important"},splitButtonMenuButton:{padding:6,height:"auto",boxSizing:"border-box",border:0,borderRadius:0,outline:"transparent",userSelect:"none",display:"inline-block",textDecoration:"none",textAlign:"center",cursor:"pointer",verticalAlign:"top",width:32,marginLeft:-1},splitButtonDivider:{position:"absolute",width:1,right:31,top:8,bottom:8},splitButtonMenuButtonDisabled:{pointerEvents:"none",selectors:{":hover":{cursor:"default"}}},splitButtonFlexContainer:{display:"flex",height:"100%",flexWrap:"nowrap",justifyContent:"center",alignItems:"center"},splitButtonContainerDisabled:{outline:"none",border:"none"}};return o.concatStyleSets(n,t)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(20),a=n(2),s=n(153),l=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._shouldUpdateComponentRef=!1,t}return o.__extends(t,e),t.prototype.render=function(){var e=this.props,t=e.primary,n=void 0!==t&&t,l=e.styles,u=e.theme;return r.createElement(i.BaseButton,o.__assign({},this.props,{variantClassName:n?"ms-Button--primary":"ms-Button--default",styles:s.getStyles(u,l,n),onRenderDescription:a.nullRender}))},t=o.__decorate([a.customizable("DefaultButton",["theme"])],t)}(a.BaseComponent);t.DefaultButton=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._onItemMouseEnter=function(e){var n=t.props,o=n.item,r=n.onItemMouseEnter;r&&r(o,e,e.currentTarget)},t._onItemClick=function(e){var n=t.props,o=n.item,r=n.onItemClickBase;r&&r(o,e,e.currentTarget)},t._onItemMouseLeave=function(e){var n=t.props,o=n.item,r=n.onItemMouseLeave;r&&r(o,e)},t._onItemKeyDown=function(e){var n=t.props,o=n.item,r=n.onItemKeyDown;r&&r(o,e)},t._onItemMouseMove=function(e){var n=t.props,o=n.item,r=n.onItemMouseMove;r&&r(o,e,e.currentTarget)},t._getSubMenuId=function(e){var n=t.props.getSubMenuId;if(n)return n(e)},t._getSubmenuTarget=function(){},t}return o.__extends(t,e),t}(n(2).BaseComponent);t.ContextualMenuItemWrapper=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(0),i=n(1),a=n(190),s=n(2);!function(e){e[e.small=0]="small",e[e.medium=1]="medium",e[e.large=2]="large",e[e.xLarge=3]="xLarge",e[e.xxLarge=4]="xxLarge",e[e.xxxLarge=5]="xxxLarge"}(o=t.ResponsiveMode||(t.ResponsiveMode={}));var l,u=[479,639,1023,1365,1919,99999999];t.setResponsiveMode=function(e){l=e},t.withResponsiveMode=function(e){var t=function(t){function n(e){var n=t.call(this,e)||this;return n._updateComposedComponentRef=n._updateComposedComponentRef.bind(n),n.state={responsiveMode:n._getResponsiveMode()},n}return r.__extends(n,t),n.prototype.componentDidMount=function(){var e=this;this._events.on(window,"resize",function(){var t=e._getResponsiveMode();t!==e.state.responsiveMode&&e.setState({responsiveMode:t})})},n.prototype.componentWillUnmount=function(){this._events.dispose()},n.prototype.render=function(){var t=this.state.responsiveMode;return i.createElement(e,r.__assign({ref:this._updateComposedComponentRef,responsiveMode:t},this.props))},n.prototype._getResponsiveMode=function(){var e=o.small,t=s.getWindow();if(void 0!==t)try{for(;t.innerWidth>u[e];)e++}catch(t){e=o.large}else{if(void 0===l)throw new Error("Content was rendered in a server environment without providing a default responsive mode. Call setResponsiveMode to define what the responsive mode is.");e=l}return e},n}(a.BaseDecorator);return s.hoistStatics(e,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(232);t.AnimationStyles=r.AnimationStyles,t.AnimationVariables=r.AnimationVariables;var i=n(44);t.DefaultPalette=i.DefaultPalette;var a=n(99);t.DefaultFontStyles=a.DefaultFontStyles,t.registerDefaultFontFaces=a.registerDefaultFontFaces;var s=n(98);t.FontSizes=s.FontSizes,t.FontWeights=s.FontWeights,t.IconFontSizes=s.IconFontSizes,t.createFontStyles=s.createFontStyles;var l=n(229);t.getFocusStyle=l.getFocusStyle,t.focusClear=l.focusClear;var u=n(226);t.hiddenContentStyle=u.hiddenContentStyle;var c=n(225);t.PulsingBeaconAnimationStyles=c.PulsingBeaconAnimationStyles;var d=n(224);t.getGlobalClassNames=d.getGlobalClassNames;var p=n(223);t.ThemeSettingName=p.ThemeSettingName,t.getTheme=p.getTheme,t.loadTheme=p.loadTheme,t.createTheme=p.createTheme,t.registerOnThemeChangeCallback=p.registerOnThemeChangeCallback,t.removeOnThemeChangeCallback=p.removeOnThemeChangeCallback,o.__exportStar(n(96),t),o.__exportStar(n(219),t),o.__exportStar(n(95),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(21),r=n(242),i=n(241),a=n(239),s=n(238),l="displayName";function u(e,t,n){var o="string"==typeof n?n.split(" "):[n];e[t+"Top"]=o[0],e[t+"Right"]=o[1]||o[0],e[t+"Bottom"]=o[2]||o[0],e[t+"Left"]=o[3]||o[1]||o[0]}function c(e){if(!e)return"";var t=[];for(var n in e)e.hasOwnProperty(n)&&n!==l&&void 0!==e[n]&&t.push(n,e[n]);for(var o=0;o<t.length;o+=2)r.kebabRules(t,o),a.provideUnits(t,o),s.rtlifyRules(t,o),i.prefixRules(t,o);for(o=1;o<t.length;o+=4)t.splice(o,1,":",t[o],";");return t.join("")}function d(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=function e(t,n,r){void 0===n&&(n={__order:[]}),void 0===r&&(r="&");var i=o.Stylesheet.getInstance(),a=n[r];a||(a={},n[r]=a,n.__order.push(r));for(var s=0,l=t;s<l.length;s++){var c=l[s];if("string"==typeof c){var d=i.argsFromClassName(c);d&&e(d,n,r)}else if(Array.isArray(c))e(c,n,r);else for(var p in c)if("selectors"===p){var f=c.selectors;for(var h in f)if(f.hasOwnProperty(h)){var m=f[h];0===h.indexOf(":global(")?h=h.replace(/:global\(|\)$/g,""):0===h.indexOf("@media")?h=h+"{"+r:0===h.indexOf(":")?h=r+h:h.indexOf("&")<0&&(h=r+" "+h),e([m],n,h)}}else"margin"===p||"padding"===p?u(a,p,c[p]):a[p]=c[p]}return n}(e),r=function(e){for(var t=[],n=!1,o=0,r=e.__order;o<r.length;o++){var i=r[o];t.push(i);var a=e[i];for(var s in a)a.hasOwnProperty(s)&&void 0!==a[s]&&(n=!0,t.push(s,a[s]))}return n?t.join(""):void 0}(n);if(r){var i=o.Stylesheet.getInstance(),a={className:i.classNameFromKey(r),key:r,args:e};if(!a.className){a.className=i.getClassName(function(e){var t=e&&e["&"];return t?t.displayName:void 0}(n));for(var s=[],l=0,d=n.__order;l<d.length;l++){var p=d[l];s.push(p,c(n[p]))}a.rulesToInsert=s}return a}}function p(e,t){var n=o.Stylesheet.getInstance(),r=e.className,i=e.key,a=e.args,s=e.rulesToInsert;if(s){for(var l=0;l<s.length;l+=2){var u=s[l+1];if(u){var c=s[l],d=(c=c.replace(/(&)|\$([\w-]+)\b/g,function(n,o,r){return o?"."+e.className:r?"."+(t&&t[r]||r):""}))+"{"+u+"}"+(0===c.indexOf("@media")?"}":"");n.insertRule(d)}}n.cacheClassName(r,i,a,s)}}t.serializeRuleEntries=c,t.styleToRegistration=d,t.applyRegistration=p,t.styleToClassName=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=d.apply(void 0,e);return n?(p(n),n.className):""}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(258),t)},function(e,t,n){"use strict";var o=n(116),r=n(105),i=n(90),a=n(89),s=n(75),l=n(74),u=n(71),c=n(70);n.d(t,"a",function(){return o.Checkbox}),n.d(t,"c",function(){return r.a}),n.d(t,"d",function(){return i.a}),n.d(t,"h",function(){return a.a}),n.d(t,"i",function(){return s.a}),n.d(t,"j",function(){return l.TextField}),n.d(t,"b",function(){return u.a}),n.d(t,"g",function(){return c.c}),n.d(t,"f",function(){return c.b}),n.d(t,"e",function(){return c.a})},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",function(){return SplitterPane});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),enterModule,reactHotLoader,leaveModule;enterModule=__webpack_require__(3).enterModule,enterModule&&enterModule(module);class SplitterPane extends react__WEBPACK_IMPORTED_MODULE_0__.Component{render(){const e={overflow:"hidden",flexShrink:1,flexGrow:1,flexBasis:this.props.size,boxSizing:"border-box",zIndex:0};return"horizontal"===this.props.orientation?(e.maxWidth="100%",e.left=0,e.right=0):(e.maxHeight="100%",e.top=0,e.bottom=0),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"splitter-pane",style:e},this.props.children)}__reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}reactHotLoader=__webpack_require__(3).default,leaveModule=__webpack_require__(3).leaveModule,reactHotLoader&&(reactHotLoader.register(SplitterPane,"SplitterPane","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\splitter\\pane.tsx"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return r});var o,r,i,a,s=n(93);n.d(t,"b",function(){return s.initializeIcons}),(o=n(3).enterModule)&&o(e),function(e){e.FONT_FAMILY_DEFAULT="-apple-system,BlinkMacSystemFont,Segoe WPC,Segoe UI,HelveticaNeue-Light,Ubuntu,Droid Sans,sans-serif",e.FONT_FAMILY_MONOSPACE="Menlo,Monaco,Consolas,Droid Sans Mono,Courier New,monospace,Droid Sans Fallback"}(r||(r={})),i=n(3).default,a=n(3).leaveModule,i&&(i.register(r,"Fonts","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\styles\\fonts.ts"),a(e))}).call(this,n(7)(e))},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return r}),n.d(t,"b",function(){return l}),n.d(t,"c",function(){return u});var o,r,i,a,s=n(6);function l(e){"dark"===e&&Object(s.loadTheme)({semanticColors:{bodyText:r.APP_FOREGROUND_DARK,inputBackground:r.EXPLORER_BACKGROUND_DARK},isInverted:!0})}function u(){return Object(s.createTheme)({semanticColors:{bodyText:r.C0,inputBackground:r.INPUT_BACKGROUND_DARK}})}(o=n(3).enterModule)&&o(e),function(e){e.C0="#2B2B2B",e.C2="#CCCCCC",e.C3="#767676",e.C4="#FFFFFF",e.C5="#FFF100",e.C6="#252525",e.C7="#969696",e.C8="#1E1E1E",e.C9="#4E257F",e.C10="#0063B1",e.C11="#004E8C",e.C12="#003966",e.C13="#47B07F",e.C14="#9CDCFE",e.C15="#ED4556",e.C16="#F5A623",e.C17="#9CDCFE",e.C18="#CE9178",e.C19="#B5CEA8",e.C20="#569CD6",e.C21="#F4E321",e.C22="#9E9E9E",e.C23="#4080D0",e.C24="#F2F2F2",e.C25="#A80000",e.C26="#888888",e.C27="#C5C5C5",e.C28="#D5D5D5",e.C29="#333333",e.C30="#F4F4F4",e.C31="#4A4A4A",e.C32="#777777",e.C33="#EAEAEA",e.C34="#A6A6A6",e.C35="#BFBFBF",e.C36="#C8C8C8",e.C37="#444444",e.C38="#0078D7",e.C39="#808080",e.C40="#0E70C4",e.C41="#D02E00",e.C42="#666666",e.APP_BACKGROUND_DARK=e.C8,e.APP_FOREGROUND_DARK=e.C2,e.APP_HYPERLINK_FOREGROUND_DARK=e.C23,e.APP_HYPERLINK_HOVER_DARK=e.C23,e.APP_HYPERLINK_DETAIL_DARK="rgba(204, 204, 204, 0.7)",e.BUTTON_PRIMARY_BACKGROUND_DARK=e.C10,e.BUTTON_PRIMARY_FOREGROUND_DARK=e.C4,e.BUTTON_PRIMARY_HOVER_DARK=e.C11,e.BUTTON_PRIMARY_FOCUS_DARK=e.C11,e.BUTTON_PRIMARY_ACTIVE_DARK=e.C11,e.BUTTON_PRIMARY_DISABLED_BACKGROUND_DARK=e.C2,e.BUTTON_PRIMARY_DISABLED_FOREGROUND_DARK=e.C22,e.BUTTON_SECONDARY_BACKGROUND_DARK=e.C28,e.BUTTON_SECONDARY_FOREGROUND_DARK=e.C29,e.BUTTON_SECONDARY_HOVER_DARK=e.C35,e.BUTTON_SECONDARY_FOCUS_DARK=e.C35,e.BUTTON_SECONDARY_ACTIVE_DARK=e.C35,e.BUTTON_SECONDARY_DISABLED_BACKGROUND_DARK=e.C33,e.BUTTON_SECONDARY_DISABLED_FOREGROUND_DARK=e.C34,e.SPLITTER_BACKGROUND_DARK="transparent",e.SCROLLBAR_THUMB_BACKGROUND_DARK="#5E5E5E",e.SCROLLBAR_TRACK_BACKGROUND_DARK="transparent",e.PANEL_BACKGROUND_DARK=e.C8,e.PANEL_FOREGROUND_DARK=e.C2,e.NAVBAR_BACKGROUND_DARK=e.C37,e.NAVBAR_FOREGROUND_DARK=e.C4,e.NAVBAR_FOCUS_DARK=e.C40,e.EXPLORER_BACKGROUND_DARK=e.C6,e.EXPLORER_FOREGROUND_DARK=e.C2,e.EXPLORER_ITEM_ACTIVE_BACKGROUND_DARK="#3F3F46",e.EXPLORER_ITEM_HOVER_BACKGROUND_DARK="#2A2D2E",e.EXPLORER_ITEM_FOCUSED_BACKGROUND_DARK="#094771",e.SECTION_HEADER_BACKGROUND_DARK="#383838",e.SECTION_HEADER_FOREGROUND_DARK=e.C2,e.EDITOR_TAB_INACTIVE_BACKGROUND_DARK="#2D2D2D",e.EDITOR_TAB_INACTIVE_FOREGROUND_DARK=e.C7,e.EDITOR_TAB_ACTIVE_BACKGROUND_DARK=e.C8,e.EDITOR_TAB_ACTIVE_FOREGROUND_DARK=e.C4,e.EDITOR_TAB_HOVER_FOREGROUND_DARK=e.C4,e.EDITOR_TAB_BORDER_DARK=e.C6,e.EDITOR_TAB_BACKGROUND_DARK=e.C6,e.EDITOR_TAB_WIDGET_ENABLED_DARK=e.C2,e.EDITOR_TAB_DRAGGED_OVER_BACKGROUND_DARK="#383838",e.LOG_PANEL_SOURCE_DARK="#AAAAAA",e.LOG_PANEL_INFO_DARK=e.C4,e.LOG_PANEL_WARN_DARK=e.C16,e.LOG_PANEL_ERROR_DARK=e.C15,e.LOG_PANEL_DEBUG_DARK=e.C39,e.LOG_PANEL_TIMESTAMP_DARK=e.C13,e.LOG_PANEL_LINK_DARK=e.C14,e.LOG_PANEL_SRC_DST_DARK=e.C3,e.WEBCHAT_SELECTED_BACKGROUND_DARK=e.C21,e.EDITOR_DRAG_OVERLAY_TRANSPARENT_DARK="rgba(85, 85, 85, 0)",e.EDITOR_DRAG_OVERLAY_VISIBLE_DARK="rgba(85, 85, 85, 0.6)",e.TOOLBAR_BACKGROUND_DARK=e.C8,e.TOOLBAR_FOREGROUND_DARK=e.C27,e.TOOLBAR_BUTTON_BACKGROUND_DARK="transparent",e.TOOLBAR_BUTTON_FOREGROUND_DARK=e.C27,e.TOOLBAR_BUTTON_HOVER_BACKGROUND_DARK="transparent",e.TOOLBAR_BUTTON_HOVER_FOREGROUND_DARK=e.C27,e.TOOLBAR_BUTTON_DISABLED_FOREGROUND_DARK=e.C26,e.TOOLBAR_BUTTON_ACTIVE_FOREGROUND_DARK=e.C4,e.JSON_FORMATTING_KEY_DARK=e.C17,e.JSON_FORMATTING_STRING_DARK=e.C18,e.JSON_FORMATTING_NUMBER_DARK=e.C19,e.JSON_FORMATTING_BOOLEAN_DARK=e.C20,e.JSON_FORMATTING_NULL_DARK=e.C20,e.SHADOW_COLOR_DARK="rgba(0,0,0,0.6)",e.LOGO_FOREGROUND_DARK=e.C10,e.INPUT_BACKGROUND_DARK="transparent",e.INPUT_TEXT_DARK=e.C31,e.INPUT_TEXT_PLACEHOLDER_DARK=e.C26,e.INPUT_TEXT_DISABLED_DARK=e.C26,e.INPUT_BORDER_DARK=e.C36,e.INPUT_BORDER_FOCUS_DARK=e.C40,e.INPUT_ERR_DARK=e.C41,e.DIALOG_BACKGROUND_DARK=e.C30,e.DIALOG_FOREGROUND_DARK=e.C31,e.DIALOG_INPUT_BORDER_DARK=e.C36,e.STATUS_BAR_BACKGROUND_DARK=e.C38,e.STATUS_BAR_FOREGROUND_DARK=e.C4,e.CHECKBOX_BORDER_FOCUS_DARK=e.C40,e.CHECKBOX_TEXT_DARK=e.C29,e.CHECKBOX_TEXT_DISABLED_DARK=e.C26,e.CHECKBOX_UNCHECKED_BG_DARK="transparent",e.CHECKBOX_UNCHECKED_BORDER_DARK=e.C42,e.CHECKBOX_UNCHECKED_DISABLED_BORDER_DARK=e.C34,e.CHECKBOX_CHECKED_BG_DARK=e.C38,e.CHECKBOX_CHECKED_FG_DARK=e.C4,e.CHECKBOX_CHECKED_DISABLED_BG_DARK=e.C36,e.CHECKBOX_CHECKED_DISABLED_FG_DARK=e.C26,e.SERVICES_PANE_FG_DARK="rgba(255, 255, 255, 0.5)",e.SERVICES_PANE_BUTTON_DARK=e.C27,e.SERVICES_PANE_BUTTON_HOVER_DARK=e.C14}(r||(r={})),i=n(3).default,a=n(3).leaveModule,i&&(i.register(r,"Colors","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\styles\\colors.ts"),i.register(l,"initializeTheme","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\styles\\colors.ts"),i.register(u,"modalTheme","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\styles\\colors.ts"),a(e))}).call(this,n(7)(e))},function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"a",function(){return a});var o,r=((o={})[38]=1,o[40]=1,o[37]=1,o[39]=1,o[36]=1,o[35]=1,o[9]=1,o[33]=1,o[34]=1,o);function i(e){return!!r[e]}function a(e){r[e]=1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.normal=0]="normal",e[e.largeHeader=1]="largeHeader",e[e.close=2]="close"}(t.DialogType||(t.DialogType={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(20),a=n(2),s=n(152),l=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._shouldUpdateComponentRef=!1,t}return o.__extends(t,e),t.prototype.render=function(){var e=this.props,t=e.styles,n=e.theme;return r.createElement(i.BaseButton,o.__assign({},this.props,{variantClassName:"ms-Button--action ms-Button--command",styles:s.getStyles(n,t),onRenderDescription:a.nullRender}))},t=o.__decorate([a.customizable("ActionButton",["theme"])],t)}(a.BaseComponent);t.ActionButton=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(0),i=n(1),a=n(57),s=n(169),l=n(2),u={},c=l.classNamesFunction(),d=function(e){function t(t){var n=e.call(this,t)||this;return n._rootElement=l.createRef(),n._warnDeprecations({onLayerMounted:"onLayerDidMount"}),n.props.hostId&&(u[n.props.hostId]||(u[n.props.hostId]=[]),u[n.props.hostId].push(n)),n}return r.__extends(t,e),t.notifyHostChanged=function(e){u[e]&&u[e].forEach(function(e){return e.forceUpdate()})},t.setDefaultTarget=function(e){o=e},t.prototype.componentDidMount=function(){this.componentDidUpdate()},t.prototype.componentWillUnmount=function(){var e=this;this._removeLayerElement(),this.props.hostId&&(u[this.props.hostId]=u[this.props.hostId].filter(function(t){return t!==e}),u[this.props.hostId].length||delete u[this.props.hostId])},t.prototype.componentDidUpdate=function(){var e=this,t=this._getHost(),n=this.props,o=n.className,r=n.styles,u=n.theme,d=c(r,{theme:u,className:o,isNotHost:!this.props.hostId});if(t!==this._host&&this._removeLayerElement(),t){if(this._host=t,!this._layerElement){var p=this._rootElement.current,f=l.getDocument(p);if(!f||!p)return;this._layerElement=f.createElement("div"),this._layerElement.className=d.root,t.appendChild(this._layerElement),l.setVirtualParent(this._layerElement,p)}a.unstable_renderSubtreeIntoContainer(this,i.createElement(s.Fabric,{className:d.content},this.props.children),this._layerElement,function(){e._hasMounted||(e._hasMounted=!0,e.props.onLayerMounted&&e.props.onLayerMounted(),e.props.onLayerDidMount())})}},t.prototype.render=function(){return i.createElement("span",{className:"ms-Layer",ref:this._rootElement})},t.prototype._removeLayerElement=function(){if(this._layerElement){this.props.onLayerWillUnmount(),a.unmountComponentAtNode(this._layerElement);var e=this._layerElement.parentNode;e&&e.removeChild(this._layerElement),this._layerElement=void 0,this._hasMounted=!1}},t.prototype._getHost=function(){var e=this.props.hostId,t=l.getDocument(this._rootElement.current);if(t)return e?t.getElementById(e):o?t.querySelector(o):t.body},t.defaultProps={onLayerDidMount:function(){},onLayerWillUnmount:function(){}},t=r.__decorate([l.customizable("Layer",["theme","hostId"])],t)}(l.BaseComponent);t.LayerBase=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DefaultPalette={themeDarker:"#004578",themeDark:"#005a9e",themeDarkAlt:"#106ebe",themePrimary:"#0078d4",themeSecondary:"#2b88d8",themeTertiary:"#71afe5",themeLight:"#c7e0f4",themeLighter:"#deecf9",themeLighterAlt:"#eff6fc",black:"#000000",blackTranslucent40:"rgba(0,0,0,.4)",neutralDark:"#212121",neutralPrimary:"#333333",neutralPrimaryAlt:"#3c3c3c",neutralSecondary:"#666666",neutralTertiary:"#a6a6a6",neutralTertiaryAlt:"#c8c8c8",neutralQuaternary:"#d0d0d0",neutralQuaternaryAlt:"#dadada",neutralLight:"#eaeaea",neutralLighter:"#f4f4f4",neutralLighterAlt:"#f8f8f8",accent:"#0078d4",white:"#ffffff",whiteTranslucent40:"rgba(255,255,255,.4)",yellow:"#ffb900",yellowLight:"#fff100",orange:"#d83b01",orangeLight:"#ea4300",orangeLighter:"#ff8c00",redDark:"#a80000",red:"#e81123",magentaDark:"#5c005c",magenta:"#b4009e",magentaLight:"#e3008c",purpleDark:"#32145a",purple:"#5c2d91",purpleLight:"#b4a0ff",blueDark:"#002050",blueMid:"#00188f",blue:"#0078d4",blueLight:"#00bcf2",tealDark:"#004b50",teal:"#008272",tealLight:"#00b294",greenDark:"#004b1c",green:"#107c10",greenLight:"#bad80a"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(244);t.buildClassMap=o.buildClassMap;var r=n(101);t.getIcon=r.getIcon,t.registerIcons=r.registerIcons,t.registerIconAlias=r.registerIconAlias,t.setIconOptions=r.setIconOptions;var i=n(233);t.getIconClassName=i.getIconClassName},function(e,t,n){"use strict";n.d(t,"a",function(){return l});var o={},r=0;if("undefined"!=typeof window){var i=window;o=i.__globalSettings__=i.__globalSettings__||((a={}).__callbacks__={},a)}var a,s=o.__callbacks__,l=function(){function e(){}return e.getValue=function(e,t){return void 0===o[e]&&(o[e]="function"==typeof t?t():t),o[e]},e.setValue=function(e,t){var n=o[e];if(t!==n){o[e]=t;var r={oldValue:n,value:t,key:e};for(var i in s)s.hasOwnProperty(i)&&s[i](r)}return t},e.addChangeListener=function(e){var t=e.__id__;t||(t=e.__id__=String(r++)),s[t]=e},e.removeChangeListener=function(e){delete s[e.__id__]},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var o=n(0),r=n(46),i=n(14),a={settings:{},scopedSettings:{}},s=r.a.getValue("customizations",{settings:{},scopedSettings:{}}),l=new i.a(s),u=function(){function e(){}return e.reset=function(){s.settings={},s.scopedSettings={}},e.applySettings=function(t){s.settings=o.__assign({},s.settings,t),e._raiseChange()},e.applyScopedSettings=function(t,n){s.scopedSettings[t]=o.__assign({},s.scopedSettings[t],n),e._raiseChange()},e.getSettings=function(e,t,n){void 0===n&&(n=a);for(var o={},r=t&&n.scopedSettings[t]||{},i=t&&s.scopedSettings[t]||{},l=0,u=e;l<u.length;l++){var c=u[l];o[c]=r[c]||n.settings[c]||i[c]||s.settings[c]}return o},e.observe=function(e){l.on(s,"change",e)},e.unobserve=function(e){l.off(s,"change",e)},e._raiseChange=function(){l.raise("change")},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return i}),n.d(t,"b",function(){return a});var o=n(5),r=n(40),i="ms-Fabric--isFocusVisible";function a(e){var t=e||Object(o.i)();t&&!t.__hasInitializeFocusRects__&&(t.__hasInitializeFocusRects__=!0,t.addEventListener("mousedown",s,!0),t.addEventListener("keydown",l,!0))}function s(e){var t=Object(o.i)(e.target);if(t){var n=t.document.body.classList;n.contains(i)&&n.remove(i)}}function l(e){var t=Object(o.i)(e.target);if(t){var n=t.document.body.classList;Object(r.b)(e.which)&&!n.contains(i)&&n.add(i)}}},function(e,t,n){"use strict";n.d(t,"d",function(){return r}),n.d(t,"e",function(){return i}),n.d(t,"c",function(){return a}),n.d(t,"b",function(){return s}),n.d(t,"a",function(){return l});var o=void 0;function r(e,t,n){for(var o in n)if(t&&o in t){var r=e+" property '"+o+"' was used but has been deprecated.",i=n[o];i&&(r+=" Use '"+i+"' instead."),s(r)}}function i(e,t,n){for(var o in n)if(t&&o in t){var r=n[o];r&&r in t&&s(e+" property '"+o+"' is mutually exclusive with '"+n[o]+"'. Use one or the other.")}}function a(e,t,n,o,r){if(!0===r)for(var i=0,a=n;i<a.length;i++){var l=a[i];l in t||s(e+" property '"+l+"' is required when '"+o+"' is used.'")}}function s(e){o?o(e):console&&console.warn&&console.warn(e)}function l(e){o=e}},function(e,t,n){"use strict";function o(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n={},o=0,r=e;o<r.length;o++){var i=r[o];if(i)for(var a in i)if(i.hasOwnProperty(a)){var s=n[a],l=i[a];n[a]=void 0===s?l:(Array.isArray(s)?s:[s]).concat(Array.isArray(l)?l:[l])}}return n}n.d(t,"a",function(){return o})},function(e,t,n){"use strict";n.d(t,"b",function(){return d}),n.d(t,"a",function(){return f});var o,r=n(10),i="left",a="right",s="@noflip",l=((o={})[i]=a,o[a]=i,o),u={"w-resize":"e-resize","sw-resize":"se-resize","nw-resize":"ne-resize"},c=p();function d(e){c!==e&&(r.b.getInstance().resetKeys(),c=e)}function p(){return void 0===c&&(c="undefined"!=typeof document&&!!document.documentElement&&"rtl"===document.documentElement.getAttribute("dir")),c}function f(e,t){if(p()){var n=e[t];if(!n)return;var o=e[t+1];if("string"==typeof o&&o.indexOf(s)>=0)e[t+1]=o.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g,"");else if(n.indexOf(i)>=0)e[t]=n.replace(i,a);else if(n.indexOf(a)>=0)e[t]=n.replace(a,i);else if(String(o).indexOf(i)>=0)e[t+1]=o.replace(i,a);else if(String(o).indexOf(a)>=0)e[t+1]=o.replace(a,i);else if(l[n])e[t]=l[n];else if(u[o])e[t+1]=u[o];else switch(n){case"margin":case"padding":e[t+1]=function(e){if("string"==typeof e){var t=e.split(" ");if(4===t.length)return t[0]+" "+t[3]+" "+t[2]+" "+t[1]}return e}(o);break;case"box-shadow":e[t+1]=function(e,t){var n=e.split(" "),o=parseInt(n[t],10);return n[0]=n[0].replace(String(o),String(-1*o)),n.join(" ")}(o,0)}}}},function(e,t){var n,o,r=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{o="function"==typeof clearTimeout?clearTimeout:a}catch(e){o=a}}();var l,u=[],c=!1,d=-1;function p(){c&&l&&(c=!1,l.length?u=l.concat(u):d=-1,u.length&&f())}function f(){if(!c){var e=s(p);c=!0;for(var t=u.length;t;){for(l=u,u=[];++d<t;)l&&l[d].run();d=-1,t=u.length}l=null,c=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===a||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new h(e,t)),1!==u.length||c||s(f)},h.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=m,r.addListener=m,r.once=m,r.off=m,r.removeListener=m,r.removeAllListeners=m,r.emit=m,r.prependListener=m,r.prependOnceListener=m,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){"use strict";function o(e){return function(){return e}}var r=function(){};r.thatReturns=o,r.thatReturnsFalse=o(!1),r.thatReturnsTrue=o(!0),r.thatReturnsNull=o(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},e.exports=r},function(e,t,n){"use strict";var o=function(e){};e.exports=function(e,t,n,r,i,a,s,l){if(o(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,i,a,s,l],d=0;(u=new Error(t.replace(/%s/g,function(){return c[d++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";var o,r=n(5);function i(){if(void 0===o){var e=Object(r.e)(),t=function(e){var t=null;try{t=window.localStorage.getItem(e)}catch(e){}return t}("language");null!==t&&(o=t),void 0===o&&e&&(o=e.documentElement.getAttribute("lang")),void 0===o&&(o="en")}return o}function a(e,t){void 0===t&&(t=!1);var n=Object(r.e)();n&&n.documentElement.setAttribute("lang",e),t||function(e,t){try{window.localStorage.setItem(e,t)}catch(e){}}("language",e),o=e}n.d(t,"a",function(){return i}),n.d(t,"b",function(){return a})},function(e,t,n){e.exports=n(261)()},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(176)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(199),t)},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",function(){return Splitter});var _uifabric_merge_styles__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(115),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),react_dom__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(57),react_dom__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_2__),_pane__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(37),enterModule;enterModule=__webpack_require__(3).enterModule,enterModule&&enterModule(module);const DEFAULT_PANE_SIZE=200,MIN_PANE_SIZE=0,SPLITTER_SIZE=0,SPLITTER_HIT_TARGET=8,event=new Event("splitterResize"),horizontalCss=Object(_uifabric_merge_styles__WEBPACK_IMPORTED_MODULE_0__.a)({position:"relative",height:SPLITTER_SIZE,width:"100%",backgroundColor:"transparent",flexShrink:0,zIndex:1,selectors:{"& > div":{position:"absolute",height:SPLITTER_HIT_TARGET,width:"100%",top:SPLITTER_HIT_TARGET/2*-1,left:0,backgroundColor:"transparent",cursor:"ns-resize"}}}),verticalCss=Object(_uifabric_merge_styles__WEBPACK_IMPORTED_MODULE_0__.a)({position:"relative",height:"100%",width:SPLITTER_SIZE,backgroundColor:"transparent",flexShrink:0,zIndex:1,selectors:{"& > div":{position:"absolute",height:"100%",width:SPLITTER_HIT_TARGET,top:0,left:SPLITTER_HIT_TARGET/2*-1,backgroundColor:"transparent",cursor:"ew-resize"}}});class Splitter extends react__WEBPACK_IMPORTED_MODULE_1__.Component{constructor(e,t){super(e,t),this.saveContainerRef=this.saveContainerRef.bind(this),this.saveSplitterRef=this.saveSplitterRef.bind(this),this.savePaneRef=this.savePaneRef.bind(this),this.onGrabSplitter=this.onGrabSplitter.bind(this),this.onMouseMove=this.onMouseMove.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.checkForContainerResize=this.checkForContainerResize.bind(this),this.activeSplitter=null,this.splitters=[],this.splitNum=0,this.panes=[],this.paneNum=0,this.state={resizing:!1,paneSizes:[]}}componentWillMount(){document.addEventListener("mousemove",this.onMouseMove),document.addEventListener("mouseup",this.onMouseUp),document.addEventListener("splitterResize",this.checkForContainerResize),window.addEventListener("resize",this.checkForContainerResize),this.SPLITTER_CSS="horizontal"===this.props.orientation?horizontalCss:verticalCss,this.CONTAINER_CSS=Object(_uifabric_merge_styles__WEBPACK_IMPORTED_MODULE_0__.a)({height:"100%",width:"100%",position:"relative"});const e="horizontal"===this.props.orientation?"column":"row";this.FLOATING_CANVAS_CSS=Object(_uifabric_merge_styles__WEBPACK_IMPORTED_MODULE_0__.a)({position:"absolute",top:0,bottom:0,right:0,left:0,display:"flex",flexFlow:`${e} nowrap`})}componentDidMount(){this.calculateInitialPaneSizes()}componentWillUnmount(){document.removeEventListener("mousemove",this.onMouseMove),document.removeEventListener("mouseup",this.onMouseUp),document.removeEventListener("splitterResize",this.checkForContainerResize),window.removeEventListener("resize",this.checkForContainerResize)}componentWillReceiveProps(e){e.children.length!==this.props.children.length&&(this.props.children.length=e.children.length,this.calculateInitialPaneSizes())}calculateInitialPaneSizes(){const e=this.state.paneSizes;this.containerSize=this.getContainerSize();const t=this.props.children.length,n=t-1;let o,r=this.props.initialSizes;if(r&&"function"==typeof r&&(r=r()),r){let e=this.containerSize,i=t;Object.keys(r).forEach(t=>{if(r[t]="string"==typeof r[t]?parseInt(r[t],10)/100*this.containerSize:r[t],isNaN(r[t]))throw new Error(`Invalid value passed as element of initialSizes in Splitter: ${r[t]}`);e-=r[t],i--}),o=(e-n*SPLITTER_SIZE)/i}else o=(this.containerSize-n*SPLITTER_SIZE)/t;for(let n=0;n<t;n++)r&&r[n]?e[n]=r[n]:e[n]=o;this.setState({paneSizes:e})}getContainerSize(){if(this.containerRef){const e=this.containerRef.getBoundingClientRect();return"horizontal"===this.props.orientation?e.height:e.width}return null}checkForContainerResize(){if(this.props.primaryPaneIndex||0===this.props.primaryPaneIndex){const e=this.containerSize,t=this.getContainerSize();t!==e&&(this.containerSize=t,this.calculateSecondaryPaneSizes(e,t))}}calculateSecondaryPaneSizes(e,t){const n=(t-e)/(this.panes.length-1);let o=this.state.paneSizes;for(let e=0;e<o.length;e++)e!==this.props.primaryPaneIndex&&(o[e]=o[e]+n);this.setState({paneSizes:o})}saveContainerRef(e){this.containerRef=e}saveSplitterRef(e,t){this.splitters[t]||(this.splitters[t]={}),this.splitters[t].ref=e}savePaneRef(e,t){this.panes[t]||(this.panes[t]={}),this.panes[t].ref=react_dom__WEBPACK_IMPORTED_MODULE_2__.findDOMNode(e)}onGrabSplitter(e,t){clearSelection(),this.splitters[t].dimensions=this.splitters[t].ref.getBoundingClientRect(),this.activeSplitter=t,this.containerSize=this.getContainerSize(),this.setState({resizing:!0})}onMouseMove(e){this.state.resizing&&(document.dispatchEvent(event),this.calculatePaneSizes(this.activeSplitter,e),clearSelection())}calculatePaneSizes(e,t){const n=e,o=e+1,r=this.panes[n].ref.getBoundingClientRect(),i=this.panes[o].ref.getBoundingClientRect(),a=this.splitters[e].dimensions,{minSizes:s}=this.props;let l="horizontal"===this.props.orientation?(()=>this.panes[n].size=Math.max(t.clientY-r.top,s[n]||MIN_PANE_SIZE))():(()=>this.panes[n].size=Math.max(t.clientX-r.left,s[n]||MIN_PANE_SIZE))();const u="horizontal"===this.props.orientation?r.height+i.height+a.height:r.width+i.width+a.width,c="horizontal"===this.props.orientation?a.height:a.width;l+c>u&&(l=u-c);const d="horizontal"===this.props.orientation?(()=>this.panes[o].size=Math.max(u-l-a.height,this.props.minSizes[o]||MIN_PANE_SIZE))():(()=>this.panes[o].size=Math.max(u-l-a.width,this.props.minSizes[o]||MIN_PANE_SIZE))();let p=this.state.paneSizes;if(p[n]=l,p[o]=d,this.props.onSizeChange){const e=this.getContainerSize(),t=p.map(t=>({absolute:t,percentage:t/e*100}));this.props.onSizeChange(t)}this.setState({paneSizes:p})}onMouseUp(){this.setState({resizing:!1})}render(){const e=[];return this.paneNum=this.splitNum=0,this.props.children.forEach((t,n)=>{const o=this.paneNum,r=this.splitNum;this.panes[o]||(this.panes[o]={}),this.panes[o].size=this.state.paneSizes[o]||DEFAULT_PANE_SIZE;const i=react__WEBPACK_IMPORTED_MODULE_1__.createElement(_pane__WEBPACK_IMPORTED_MODULE_3__.a,{key:`pane${o}`,orientation:this.props.orientation,size:this.state.paneSizes[o],ref:e=>this.savePaneRef(e,o)},t);if(e.push(i),this.props.children[n+1]){this.splitters[r]||(this.splitters[r]={});const t=react__WEBPACK_IMPORTED_MODULE_1__.createElement("div",{className:this.SPLITTER_CSS,key:`splitter${r}`,ref:e=>this.saveSplitterRef(e,r)},react__WEBPACK_IMPORTED_MODULE_1__.createElement("div",{onMouseDown:e=>this.onGrabSplitter(e,r)}));e.push(t),this.splitNum++}this.paneNum++}),react__WEBPACK_IMPORTED_MODULE_1__.createElement("div",{ref:this.saveContainerRef,className:this.CONTAINER_CSS+" split-container"},react__WEBPACK_IMPORTED_MODULE_1__.createElement("div",{className:this.FLOATING_CANVAS_CSS},e))}__reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}function clearSelection(){const e=document;window.getSelection?window.getSelection().empty?window.getSelection().empty():window.getSelection().removeAllRanges&&window.getSelection().removeAllRanges():e.selection&&e.selection.empty()}var reactHotLoader,leaveModule;Splitter.defaultProps={minSizes:{}},reactHotLoader=__webpack_require__(3).default,leaveModule=__webpack_require__(3).leaveModule,reactHotLoader&&(reactHotLoader.register(DEFAULT_PANE_SIZE,"DEFAULT_PANE_SIZE","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\splitter\\splitter.tsx"),reactHotLoader.register(MIN_PANE_SIZE,"MIN_PANE_SIZE","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\splitter\\splitter.tsx"),reactHotLoader.register(SPLITTER_SIZE,"SPLITTER_SIZE","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\splitter\\splitter.tsx"),reactHotLoader.register(SPLITTER_HIT_TARGET,"SPLITTER_HIT_TARGET","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\splitter\\splitter.tsx"),reactHotLoader.register(event,"event","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\splitter\\splitter.tsx"),reactHotLoader.register(horizontalCss,"horizontalCss","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\splitter\\splitter.tsx"),reactHotLoader.register(verticalCss,"verticalCss","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\splitter\\splitter.tsx"),reactHotLoader.register(Splitter,"Splitter","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\splitter\\splitter.tsx"),reactHotLoader.register(clearSelection,"clearSelection","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\splitter\\splitter.tsx"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return s});var o,r=n(1),i=n(115);(o=n(3).enterModule)&&o(e);const a=Object(i.a)({display:"inline-block",maxWidth:"100%",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}),s=e=>r.createElement("span",{className:`${a} truncate-text ${e.className||""}`,title:e.title},e.children);var l,u;l=n(3).default,u=n(3).leaveModule,l&&(l.register(a,"css","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\truncateText.tsx"),l.register(s,"TruncateText","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\truncateText.tsx"),u(e))}).call(this,n(7)(e))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"c",function(){return RowJustification}),__webpack_require__.d(__webpack_exports__,"b",function(){return RowAlignment}),__webpack_require__.d(__webpack_exports__,"a",function(){return Row});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_uifabric_merge_styles__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(115),enterModule,RowJustification,RowAlignment;enterModule=__webpack_require__(3).enterModule,enterModule&&enterModule(module),function(e){e[e.Left=0]="Left",e[e.Center=1]="Center",e[e.Right=2]="Right"}(RowJustification||(RowJustification={})),function(e){e[e.Top=0]="Top",e[e.Center=1]="Center",e[e.Bottom=2]="Bottom"}(RowAlignment||(RowAlignment={}));const baseCss={boxSizing:"border-box",display:"flex",flexFlow:"row nowrap",flexShrink:0,overflow:"hidden",width:"100%"};class Row extends react__WEBPACK_IMPORTED_MODULE_0__.Component{render(){const e={alignItems:getRowAlignment(this.props.align),justifyContent:getRowJustification(this.props.justify)},t=Object(_uifabric_merge_styles__WEBPACK_IMPORTED_MODULE_1__.a)(baseCss,e);return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:`${t} row-comp ${this.props.className||""}`},this.props.children)}__reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}function getRowAlignment(e){switch(e){case RowAlignment.Center:return"center";case RowAlignment.Bottom:return"flex-end";case RowAlignment.Top:default:return"flex-start"}}function getRowJustification(e){switch(e){case RowJustification.Center:return"center";case RowJustification.Right:return"flex-end";case RowJustification.Left:default:return"flex-start"}}var reactHotLoader,leaveModule;reactHotLoader=__webpack_require__(3).default,leaveModule=__webpack_require__(3).leaveModule,reactHotLoader&&(reactHotLoader.register(RowJustification,"RowJustification","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\row.tsx"),reactHotLoader.register(RowAlignment,"RowAlignment","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\row.tsx"),reactHotLoader.register(baseCss,"baseCss","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\row.tsx"),reactHotLoader.register(Row,"Row","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\row.tsx"),reactHotLoader.register(getRowAlignment,"getRowAlignment","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\row.tsx"),reactHotLoader.register(getRowJustification,"getRowJustification","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\row.tsx"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=i.classNamesFunction(),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o.__extends(t,e),t.prototype.render=function(){var e=this.props,t=e.className,n=e.styles,o=e.theme;return this._classNames=a(n,{theme:o,className:t}),r.createElement("div",{className:this._classNames.actions},r.createElement("div",{className:this._classNames.actionsRight},this._renderChildrenAsActions()))},t.prototype._renderChildrenAsActions=function(){var e=this;return r.Children.map(this.props.children,function(t){return t?r.createElement("span",{className:e._classNames.action},t):null})},t=o.__decorate([i.customizable("DialogFooter",["theme"])],t)}(i.BaseComponent);t.DialogFooterBase=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(62),i=n(126);t.DialogFooter=o.styled(r.DialogFooterBase,i.getStyles)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=n(41),s=n(58),l=n(63),u=n(32),c=i.classNamesFunction(),d=function(e){function t(t){return e.call(this,t)||this}return o.__extends(t,e),t.prototype.render=function(){var e,t=this.props,n=t.showCloseButton,i=t.className,l=t.closeButtonAriaLabel,u=t.onDismiss,d=t.subTextId,p=t.subText,f=t.titleId,h=t.title,m=t.type,g=t.styles,_=t.theme,v=c(g,{theme:_,className:i,isLargeHeader:m===a.DialogType.largeHeader,isClose:m===a.DialogType.close}),y=this._groupChildren();return p&&(e=r.createElement("p",{className:v.subText,id:d},p)),r.createElement("div",{className:v.content},r.createElement("div",{className:v.header},r.createElement("p",{className:v.title,id:f,role:"heading"},h),r.createElement("div",{className:v.topButton},this.props.topButtonsProps.map(function(e){return r.createElement(s.IconButton,o.__assign({},e))}),(m===a.DialogType.close||n&&m!==a.DialogType.largeHeader)&&r.createElement(s.IconButton,{className:v.button,iconProps:{iconName:"Cancel"},ariaLabel:l,onClick:u}))),r.createElement("div",{className:v.inner},r.createElement("div",{className:v.innerContent},e,y.contents),y.footers))},t.prototype._groupChildren=function(){var e={footers:[],contents:[]};return r.Children.map(this.props.children,function(t){"object"==typeof t&&null!==t&&t.type===l.DialogFooter?e.footers.push(t):e.contents.push(t)}),e},t.defaultProps={showCloseButton:!1,className:"",topButtonsProps:[],closeButtonAriaLabel:"Close"},t=o.__decorate([i.customizable("DialogContent",["theme"]),u.withResponsiveMode],t)}(i.BaseComponent);t.DialogContentBase=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(64),i=n(125);t.DialogContent=o.styled(r.DialogContentBase,i.getStyles)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=i.classNamesFunction(),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o.__extends(t,e),t.prototype.componentDidMount=function(){i.disableBodyScroll()},t.prototype.componentWillUnmount=function(){i.enableBodyScroll()},t.prototype.render=function(){var e=this.props,t=e.isDarkThemed,n=e.className,s=e.theme,l=e.styles,u=i.getNativeProps(this.props,i.divProperties),c=a(l,{theme:s,className:n,isDark:t});return r.createElement("div",o.__assign({},u,{className:c.root}))},t=o.__decorate([i.customizable("Overlay",["theme"])],t)}(i.BaseComponent);t.OverlayBase=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(134),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=n(41),s=n(135),l=n(32),u=i.classNamesFunction(),c=n(65),d={isDarkOverlay:!1,isBlocking:!1,className:"",containerClassName:""},p={type:a.DialogType.normal,className:"",topButtonsProps:[]},f=function(e){function t(t){var n=e.call(this,t)||this;return n._getSubTextId=function(){var e=n.props,t=e.ariaDescribedById,o=e.modalProps,r=e.dialogContentProps,i=e.subText,a=t||o&&o.subtitleAriaId;return a||(a=(i||r&&r.subText)&&n._defaultSubTextId),a},n._getTitleTextId=function(){var e=n.props,t=e.ariaLabelledById,o=e.modalProps,r=e.dialogContentProps,i=e.title,a=t||o&&o.titleAriaId;return a||(a=(i||r&&r.title)&&n._defaultTitleTextId),a},n._id=i.getId("Dialog"),n._defaultTitleTextId=n._id+"-title",n._defaultSubTextId=n._id+"-subText",n._warnDeprecations({isOpen:"hidden",type:"dialogContentProps.type",subText:"dialogContentProps.subText",contentClassName:"dialogContentProps.className",topButtonsProps:"dialogContentProps.topButtonsProps",className:"modalProps.className",isDarkOverlay:"modalProps.isDarkOverlay",isBlocking:"modalProps.isBlocking",containerClassName:"modalProps.containerClassName",onDismissed:"modalProps.onDismissed",onLayerDidMount:"modalProps.onLayerDidMount",ariaDescribedById:"modalProps.subtitleAriaId",ariaLabelledById:"modalProps.titleAriaId"}),n}return o.__extends(t,e),t.prototype.render=function(){var e=this.props,t=e.className,n=e.containerClassName,i=e.contentClassName,a=e.elementToFocusOnDismiss,l=e.firstFocusableSelector,f=e.forceFocusInsideTrap,h=e.styles,m=e.hidden,g=e.ignoreExternalFocusing,_=e.isBlocking,v=e.isClickableOutsideFocusTrap,y=e.isDarkOverlay,b=e.isOpen,C=e.onDismiss,S=e.onDismissed,x=e.onLayerDidMount,E=e.responsiveMode,k=e.subText,w=e.theme,I=e.title,T=e.topButtonsProps,M=e.type,P=o.__assign({},d,this.props.modalProps),D=o.__assign({},p,this.props.dialogContentProps),O=u(h,{theme:w,className:t||P.className,containerClassName:n||P.containerClassName,hidden:m});return r.createElement(s.Modal,o.__assign({elementToFocusOnDismiss:a,firstFocusableSelector:l,forceFocusInsideTrap:f,ignoreExternalFocusing:g,isClickableOutsideFocusTrap:v,onDismissed:S,onLayerDidMount:x,responsiveMode:E},P,{isDarkOverlay:void 0!==y?y:P.isDarkOverlay,isBlocking:void 0!==_?_:P.isBlocking,isOpen:void 0!==b?b:!m,className:O.root,containerClassName:O.main,onDismiss:C||P.onDismiss,subtitleAriaId:this._getSubTextId(),titleAriaId:this._getTitleTextId()}),r.createElement(c.DialogContent,o.__assign({titleId:this._defaultTitleTextId,subTextId:this._defaultSubTextId,title:I,subText:k,showCloseButton:void 0!==_?!_:!P.isBlocking,topButtonsProps:T||D.topButtonsProps,type:void 0!==M?M:D.type,onDismiss:C||D.onDismiss,className:i||D.className},D),this.props.children))},t.defaultProps={hidden:!0},t=o.__decorate([i.customizable("Dialog",["theme"]),l.withResponsiveMode],t)}(i.BaseComponent);t.DialogBase=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0);o.__exportStar(n(136),t),o.__exportStar(n(68),t),o.__exportStar(n(65),t),o.__exportStar(n(64),t),o.__exportStar(n(63),t),o.__exportStar(n(62),t),o.__exportStar(n(41),t)},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return c});var o=n(6),r=n(22),i=n(1);n.d(t,"c",function(){return r.DialogContent}),n.d(t,"b",function(){return r.DialogFooter});var a,s,l,u=n(39);function c(e){const t={type:r.DialogType.normal,title:e.title,subText:e.detailedDescription,showCloseButton:!0},n=Object(u.c)(),a={root:{},main:{selectors:{"@media(min-width: 640px)":{maxWidth:e.maxWidth||420},"p.ms-Dialog-title:empty":{display:"none"}}}};return Object(o.loadTheme)(n),i.createElement(r.Dialog,{hidden:!1,dialogContentProps:t,modalProps:{isBlocking:!0,className:e.className},onDismiss:e.cancel,styles:a,theme:n},e.children)}(a=n(3).enterModule)&&a(e),s=n(3).default,l=n(3).leaveModule,s&&(s.register(c,"Modal","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\widget\\modal.tsx"),l(e))}).call(this,n(7)(e))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",function(){return InsetShadow});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_uifabric_merge_styles__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(115),_styles__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(9),enterModule;enterModule=__webpack_require__(3).enterModule,enterModule&&enterModule(module);const baseCss={position:"absolute",top:0,left:0,right:0,bottom:0,pointerEvents:"none"};class InsetShadow extends react__WEBPACK_IMPORTED_MODULE_0__.Component{render(){const e=[];this.props.top&&e.push(_styles__WEBPACK_IMPORTED_MODULE_2__.e.INSET_TOP),this.props.left&&e.push(_styles__WEBPACK_IMPORTED_MODULE_2__.e.INSET_LEFT),this.props.bottom&&e.push(_styles__WEBPACK_IMPORTED_MODULE_2__.e.INSET_BOTTOM),this.props.right&&e.push(_styles__WEBPACK_IMPORTED_MODULE_2__.e.INSET_RIGHT);const t=e.reduce((e,t)=>e?`${e}, ${t}`:t,""),n=Object(_uifabric_merge_styles__WEBPACK_IMPORTED_MODULE_1__.a)(baseCss,{boxShadow:t||""});return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:`${n} inset-shadow-component`,"aria-hidden":"true"})}__reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}var reactHotLoader,leaveModule;reactHotLoader=__webpack_require__(3).default,leaveModule=__webpack_require__(3).leaveModule,reactHotLoader&&(reactHotLoader.register(baseCss,"baseCss","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\widget\\insetShadow.tsx"),reactHotLoader.register(InsetShadow,"InsetShadow","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\widget\\insetShadow.tsx"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=n(2).classNamesFunction(),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o.__extends(t,e),t.prototype.render=function(){var e=this.props,t=e.as,n=void 0===t?"label":t,s=e.children,l=e.className,u=e.disabled,c=e.styles,d=e.required,p=e.theme,f=a(c,{className:l,disabled:u,required:d,theme:p});return r.createElement(n,o.__assign({},i.getNativeProps(this.props,i.divProperties),{className:f.root}),s)},t=o.__decorate([i.customizable("Label",["theme"])],t)}(i.BaseComponent);t.LabelBase=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(143),a=n(35),s=n(2),l=n(139),u=n(4),c=function(e){function t(t){var n=e.call(this,t)||this;return n._textElement=s.createRef(),n._onRenderLabel=function(e){return e.label?r.createElement(i.Label,{htmlFor:n._id},e.label):null},n._onRenderDescription=function(e){return e.description?r.createElement("span",{className:s.css("ms-TextField-description",l.description)},e.description):null},n._warnDeprecations({iconClass:"iconProps",addonString:"prefix",onRenderAddon:"onRenderPrefix"}),n._warnMutuallyExclusive({value:"defaultValue"}),n._id=s.getId("TextField"),n._descriptionId=s.getId("TextFieldDescription"),void 0!==t.value?n._latestValue=t.value:void 0!==t.defaultValue?n._latestValue=t.defaultValue:n._latestValue="",n.state={value:n._latestValue,isFocused:!1,errorMessage:""},n._onInputChange=n._onInputChange.bind(n),n._onFocus=n._onFocus.bind(n),n._onBlur=n._onBlur.bind(n),n._delayedValidate=n._async.debounce(n._validate,n.props.deferredValidationTime),n._lastValidation=0,n._isDescriptionAvailable=!1,n}return o.__extends(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.state.value},enumerable:!0,configurable:!0}),t.prototype.componentDidMount=function(){this._isMounted=!0,this._adjustInputHeight(),this.props.validateOnLoad&&this._validate(this.state.value)},t.prototype.componentWillReceiveProps=function(e){var t=this,n=this.props.onBeforeChange;void 0!==e.value&&e.value!==this.state.value&&(n&&n(e.value),this._latestValue=e.value,this.setState({value:e.value,errorMessage:""},function(){t._adjustInputHeight()}),this._delayedValidate(e.value))},t.prototype.componentWillUnmount=function(){this._isMounted=!1},t.prototype.render=function(){var e=this.props,t=e.className,n=e.description,i=e.disabled,c=e.iconClass,d=e.iconProps,p=e.multiline,f=e.required,h=e.underlined,m=e.borderless,g=e.addonString,_=e.prefix,v=e.suffix,y=e.onRenderAddon,b=void 0===y?this._onRenderAddon:y,C=e.onRenderPrefix,S=void 0===C?this._onRenderPrefix:C,x=e.onRenderSuffix,E=void 0===x?this._onRenderSuffix:x,k=e.onRenderLabel,w=void 0===k?this._onRenderLabel:k,I=e.onRenderDescription,T=void 0===I?this._onRenderDescription:I,M=this.state.isFocused,P=this._errorMessage;this._isDescriptionAvailable=Boolean(this.props.onRenderDescription||n||P);var D,O=s.css("ms-TextField",l.root,t,((D={})["is-required "+l.rootIsRequiredLabel]=this.props.label&&f,D["is-required "+l.rootIsRequiredPlaceholderOnly]=!this.props.label&&f,D["is-disabled "+l.rootIsDisabled]=i,D["is-active "+l.rootIsActive]=M,D["ms-TextField--multiline "+l.rootIsMultiline]=p,D["ms-TextField--underlined "+l.rootIsUnderlined]=h,D["ms-TextField--borderless "+l.rootIsBorderless]=m,D));return r.createElement("div",{className:O},r.createElement("div",{className:s.css("ms-TextField-wrapper",l.wrapper,h?P&&l.invalid:"")},w(this.props,this._onRenderLabel),r.createElement("div",{className:s.css("ms-TextField-fieldGroup",l.fieldGroup,M&&l.fieldGroupIsFocused,P&&l.invalid)},(void 0!==g||this.props.onRenderAddon)&&r.createElement("div",{className:s.css("ms-TextField-prefix",l.fieldPrefixSuffix)},b(this.props,this._onRenderAddon)),(void 0!==_||this.props.onRenderPrefix)&&r.createElement("div",{className:s.css("ms-TextField-prefix",l.fieldPrefixSuffix)},S(this.props,this._onRenderPrefix)),p?this._renderTextArea():this._renderInput(),(c||d)&&r.createElement(a.Icon,o.__assign({className:s.css(c,l.icon)},d)),(void 0!==v||this.props.onRenderSuffix)&&r.createElement("div",{className:s.css("ms-TextField-suffix",l.fieldPrefixSuffix)},E(this.props,this._onRenderSuffix)))),this._isDescriptionAvailable&&r.createElement("span",{id:this._descriptionId},T(this.props,this._onRenderDescription),P&&r.createElement("div",{"aria-live":"assertive"},r.createElement(s.DelayedRender,null,r.createElement("p",{className:s.css("ms-TextField-errorMessage",u.AnimationClassNames.slideDownIn20,l.errorMessage)},r.createElement("span",{className:l.errorText,"data-automation-id":"error-message"},P))))))},t.prototype.focus=function(){this._textElement.current&&this._textElement.current.focus()},t.prototype.select=function(){this._textElement.current&&this._textElement.current.select()},t.prototype.setSelectionStart=function(e){this._textElement.current&&(this._textElement.current.selectionStart=e)},t.prototype.setSelectionEnd=function(e){this._textElement.current&&(this._textElement.current.selectionEnd=e)},Object.defineProperty(t.prototype,"selectionStart",{get:function(){return this._textElement.current?this._textElement.current.selectionStart:-1},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"selectionEnd",{get:function(){return this._textElement.current?this._textElement.current.selectionEnd:-1},enumerable:!0,configurable:!0}),t.prototype.setSelectionRange=function(e,t){this._textElement.current&&this._textElement.current.setSelectionRange(e,t)},t.prototype._onFocus=function(e){this.props.onFocus&&this.props.onFocus(e),this.setState({isFocused:!0}),this.props.validateOnFocusIn&&this._validate(this.state.value)},t.prototype._onBlur=function(e){this.props.onBlur&&this.props.onBlur(e),this.setState({isFocused:!1}),this.props.validateOnFocusOut&&this._validate(this.state.value)},t.prototype._onRenderAddon=function(e){var t=e.addonString;return r.createElement("span",{style:{paddingBottom:"1px"}},t)},t.prototype._onRenderPrefix=function(e){var t=e.prefix;return r.createElement("span",{style:{paddingBottom:"1px"}},t)},t.prototype._onRenderSuffix=function(e){var t=e.suffix;return r.createElement("span",{style:{paddingBottom:"1px"}},t)},t.prototype._getTextElementClassName=function(){var e,t;return e=this.props.multiline&&!this.props.resizable?s.css("ms-TextField-field ms-TextField-field--unresizable",l.field,l.fieldIsUnresizable):s.css("ms-TextField-field",l.field),s.css(e,this.props.inputClassName,((t={})[l.hasIcon]=!!this.props.iconClass,t))},Object.defineProperty(t.prototype,"_errorMessage",{get:function(){var e=this.state.errorMessage;return e||(e=this.props.errorMessage),e},enumerable:!0,configurable:!0}),t.prototype._renderTextArea=function(){var e=s.getNativeProps(this.props,s.textAreaProperties,["defaultValue"]);return r.createElement("textarea",o.__assign({id:this._id},e,{ref:this._textElement,value:this.state.value,onInput:this._onInputChange,onChange:this._onInputChange,className:this._getTextElementClassName(),"aria-describedby":this._isDescriptionAvailable?this._descriptionId:this.props["aria-describedby"],"aria-invalid":!!this.state.errorMessage,"aria-label":this.props.ariaLabel,onFocus:this._onFocus,onBlur:this._onBlur}))},t.prototype._renderInput=function(){var e=s.getNativeProps(this.props,s.inputProperties,["defaultValue"]);return r.createElement("input",o.__assign({type:"text",id:this._id},e,{ref:this._textElement,value:this.state.value,onInput:this._onInputChange,onChange:this._onInputChange,className:this._getTextElementClassName(),"aria-label":this.props.ariaLabel,"aria-describedby":this._isDescriptionAvailable?this._descriptionId:this.props["aria-describedby"],"aria-invalid":!!this.state.errorMessage,onFocus:this._onFocus,onBlur:this._onBlur}))},t.prototype._onInputChange=function(e){var t=this,n=e.target.value;if(n!==this._latestValue){this._latestValue=n,this.setState({value:n},function(){t._adjustInputHeight(),t.props.onChanged&&t.props.onChanged(n)});var o=this.props,r=o.validateOnFocusIn,i=o.validateOnFocusOut;r||i||this._delayedValidate(n),(0,this.props.onBeforeChange)(n)}},t.prototype._validate=function(e){var t=this,n=this.props,o=n.validateOnFocusIn,r=n.validateOnFocusOut;if(this._latestValidateValue!==e||o||r){this._latestValidateValue=e;var i=(0,this.props.onGetErrorMessage)(e||"");if(void 0!==i)if("string"==typeof i)this.setState({errorMessage:i}),this._notifyAfterValidate(e,i);else{var a=++this._lastValidation;i.then(function(n){t._isMounted&&a===t._lastValidation&&t.setState({errorMessage:n}),t._notifyAfterValidate(e,n)})}else this._notifyAfterValidate(e,"")}},t.prototype._notifyAfterValidate=function(e,t){this._isMounted&&e===this.state.value&&this.props.onNotifyValidationResult&&this.props.onNotifyValidationResult(t,e)},t.prototype._adjustInputHeight=function(){if(this._textElement.current&&this.props.autoAdjustHeight&&this.props.multiline){var e=this._textElement.current;e.style.height="";var t=e.scrollHeight+2;e.style.height=t+"px"}},t.defaultProps={multiline:!1,resizable:!0,autoAdjustHeight:!1,underlined:!1,borderless:!1,onChanged:function(){},onBeforeChange:function(){},onNotifyValidationResult:function(){},onGetErrorMessage:function(){},deferredValidationTime:200,errorMessage:"",validateOnFocusIn:!1,validateOnFocusOut:!1,validateOnLoad:!0},t}(s.BaseComponent);t.TextField=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(144),t)},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return u});var o,r=n(1),i=n(115),a=n(15),s=n(9);(o=n(3).enterModule)&&o(e);const l=Object(i.a)({fontFamily:s.c.FONT_FAMILY_DEFAULT,fontSize:"19px",fontWeight:200,margin:0,marginBottom:"4px",marginTop:"16px",padding:0}),u=e=>r.createElement("h3",{className:`css small-header-comp ${e.className||""}`},r.createElement(a.j,null,e.children));var c,d;c=n(3).default,d=n(3).leaveModule,c&&(c.register(l,"css","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\widget\\smallHeader.tsx"),c.register(u,"SmallHeader","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\widget\\smallHeader.tsx"),d(e))}).call(this,n(7)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=n(30),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._shouldUpdateComponentRef=!1,t}return o.__extends(t,e),t.prototype.render=function(){return r.createElement(a.DefaultButton,o.__assign({},this.props,{primary:!0,onRenderDescription:i.nullRender}))},t=o.__decorate([i.customizable("PrimaryButton",["theme"])],t)}(i.BaseComponent);t.PrimaryButton=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(20),a=n(2),s=n(150),l=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._shouldUpdateComponentRef=!1,t}return o.__extends(t,e),t.prototype.render=function(){var e=this.props,t=e.styles,n=e.theme;return r.createElement(i.BaseButton,o.__assign({},this.props,{variantClassName:"ms-Button--icon",styles:s.getStyles(n,t),onRenderText:a.nullRender,onRenderDescription:a.nullRender}))},t=o.__decorate([a.customizable("IconButton",["theme"])],t)}(a.BaseComponent);t.IconButton=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(20),a=n(2),s=n(151),l=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._shouldUpdateComponentRef=!1,t}return o.__extends(t,e),t.prototype.render=function(){var e=this.props,t=e.primary,n=void 0!==t&&t,a=e.styles,l=e.theme;return r.createElement(i.BaseButton,o.__assign({},this.props,{variantClassName:n?"ms-Button--compoundPrimary":"ms-Button--compound",styles:s.getStyles(l,a,n)}))},t=o.__decorate([a.customizable("CompoundButton",["theme"])],t)}(a.BaseComponent);t.CompoundButton=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4);t.standardStyles=function(e){var t,n,r,i=e.semanticColors,a=i.buttonBackground,s=i.buttonBackgroundChecked,l=i.buttonBackgroundHovered,u=i.buttonText,c=i.buttonTextHovered,d=i.buttonTextChecked,p=i.buttonTextCheckedHovered;return{root:{backgroundColor:a,color:u},rootHovered:{backgroundColor:l,color:c,selectors:(t={},t[o.HighContrastSelector]={borderColor:"Highlight",color:"Highlight"},t)},rootPressed:{backgroundColor:s,color:d},rootExpanded:{backgroundColor:s,color:d},rootChecked:{backgroundColor:s,color:d},rootCheckedHovered:{backgroundColor:e.palette.neutralLight,color:p},splitButtonContainer:{selectors:(n={},n[o.HighContrastSelector]={border:"none"},n)},splitButtonMenuButton:{color:e.palette.white,backgroundColor:e.palette.neutralLighter,selectors:{":hover":{backgroundColor:e.palette.neutralLight,selectors:(r={},r[o.HighContrastSelector]={color:"Highlight"},r)}}},splitButtonMenuButtonDisabled:{backgroundColor:e.palette.neutralLighter,selectors:{":hover":{backgroundColor:e.palette.neutralLighter}}},splitButtonDivider:{backgroundColor:e.palette.neutralTertiaryAlt},splitButtonMenuButtonChecked:{backgroundColor:e.palette.themePrimary},splitButtonMenuButtonExpanded:{backgroundColor:e.palette.neutralLight},splitButtonMenuIcon:{color:e.palette.neutralPrimary},splitButtonMenuIconDisabled:{color:e.palette.neutralTertiary}}},t.primaryStyles=function(e){return{root:{backgroundColor:e.palette.themePrimary,color:e.palette.white,selectors:(t={},t[o.HighContrastSelector]={color:"Window",backgroundColor:"WindowText",MsHighContrastAdjust:"none"},t)},rootHovered:{backgroundColor:e.palette.themeDarkAlt,color:e.palette.white,selectors:(n={},n[o.HighContrastSelector]={color:"Window",backgroundColor:"Highlight"},n)},rootPressed:{backgroundColor:e.palette.themeDark,color:e.palette.white,selectors:(r={},r[o.HighContrastSelector]={color:"Window",backgroundColor:"WindowText",MsHighContrastAdjust:"none"},r)},rootExpanded:{backgroundColor:e.palette.themeDark,color:e.palette.white},rootChecked:{backgroundColor:e.palette.themeDark,color:e.palette.white},rootCheckedHovered:{backgroundColor:e.palette.themePrimary,color:e.palette.white},rootDisabled:{selectors:(i={},i[o.HighContrastSelector]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},i)},splitButtonContainer:{selectors:(a={},a[o.HighContrastSelector]={border:"none"},a)},splitButtonDivider:{backgroundColor:e.palette.themeLighter},splitButtonMenuButton:{backgroundColor:e.palette.themePrimary,color:e.palette.white,selectors:{":hover":{backgroundColor:e.palette.themeDark,selectors:(s={},s[o.HighContrastSelector]={color:"Highlight"},s)}}},splitButtonMenuButtonDisabled:{backgroundColor:e.palette.neutralLighter,selectors:{":hover":{backgroundColor:e.palette.neutralLighter}}},splitButtonMenuButtonChecked:{backgroundColor:e.palette.themeDark},splitButtonMenuButtonExpanded:{backgroundColor:e.palette.themeDark},splitButtonMenuIcon:{color:e.palette.white},splitButtonMenuIconDisabled:{color:e.palette.neutralTertiary}};var t,n,r,i,a,s}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.button=0]="button",e[e.anchor=1]="anchor"}(t.ElementType||(t.ElementType={})),function(e){e[e.normal=0]="normal",e[e.primary=1]="primary",e[e.hero=2]="hero",e[e.compound=3]="compound",e[e.command=4]="command",e[e.icon=5]="icon",e[e.default=6]="default"}(t.ButtonType||(t.ButtonType={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(178),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(180),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.top=1]="top",e[e.bottom=-1]="bottom",e[e.left=2]="left",e[e.right=-2]="right"}(t.RectangleEdge||(t.RectangleEdge={})),function(e){e[e.top=0]="top",e[e.bottom=1]="bottom",e[e.start=2]="start",e[e.end=3]="end"}(t.Position||(t.Position={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(4);t.getDividerClassNames=o.memoizeFunction(function(e){return r.mergeStyleSets({wrapper:{display:"inline-flex",height:"100%",alignItems:"center"},divider:{width:1,height:"100%",backgroundColor:e.palette.neutralTertiaryAlt}})})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(84),r=n(192),i=n(4),a=n(2);t.getSplitButtonVerticalDividerClassNames=a.memoizeFunction(function(e){return i.mergeStyleSets(o.getDividerClassNames(e),{divider:{height:16,width:1}})}),t.getContextualMenuClassNames=a.memoizeFunction(function(e,t){var n=r.getStyles(e);return i.mergeStyleSets({container:["ms-ContextualMenu-container",n.container,t,[{selectors:{":focus":{outline:0}}}]],root:["ms-ContextualMenu is-open",n.root],list:["ms-ContextualMenu-list is-open",n.list],header:["ms-ContextualMenu-header",n.header],title:n.title})}),t.getItemClassNames=a.memoizeFunction(function(e,t,n,o,a,s,l,u,c,d,p){var f=r.getMenuItemStyles(e);return i.mergeStyleSets({item:["ms-ContextualMenu-item",f.item,l],divider:["ms-ContextualMenu-divider",f.divider,u],root:["ms-ContextualMenu-link",f.root,o&&["is-checked",f.rootChecked],a&&f.anchorLink,n&&["is-expanded",f.rootExpanded],t&&["is-disabled",f.rootDisabled],!t&&!n&&[{selectors:{":hover":f.rootHovered,":active":f.rootPressed,".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover":f.rootFocused,".ms-Fabric--isFocusVisible &:hover":{background:"inherit;"}}}]],splitPrimary:[f.root,o&&["is-checked",f.rootChecked],(t||p)&&["is-disabled",f.rootDisabled],!(t||p)&&!o&&[{selectors:{":hover":f.rootHovered,":active":f.rootPressed,".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover":f.rootFocused,".ms-Fabric--isFocusVisible &:hover":{background:"inherit;"}}}]],splitMenu:[f.root,{width:32},n&&["is-expanded",f.rootExpanded],t&&["is-disabled",f.rootDisabled],!t&&!n&&[{selectors:{":hover":f.rootHovered,":active":f.rootPressed,".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover":f.rootFocused,".ms-Fabric--isFocusVisible &:hover":{background:"inherit;"}}}]],linkContent:["ms-ContextualMenu-linkContent",f.linkContent],linkContentMenu:["ms-ContextualMenu-linkContent",f.linkContent,{justifyContent:"center"}],icon:["ms-ContextualMenu-icon",s&&f.iconColor,f.icon,c,t&&["is-disabled",f.iconDisabled]],checkmarkIcon:["ms-ContextualMenu-checkmarkIcon",s&&f.checkmarkIcon,f.icon,c],subMenuIcon:["ms-ContextualMenu-submenuIcon",f.subMenuIcon,d],label:["ms-ContextualMenu-itemText",f.label],secondaryText:["ms-ContextualMenu-secondaryText",f.secondaryText],splitContainer:[f.splitButtonFlexContainer,!t&&!o&&[{selectors:{".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover":f.rootFocused}}]]})})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.none=0]="none",e[e.all=1]="all",e[e.inputOnly=2]="inputOnly"}(t.FocusZoneTabbableElements||(t.FocusZoneTabbableElements={})),function(e){e[e.vertical=0]="vertical",e[e.horizontal=1]="horizontal",e[e.bidirectional=2]="bidirectional"}(t.FocusZoneDirection||(t.FocusZoneDirection={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.topLeftEdge=0]="topLeftEdge",e[e.topCenter=1]="topCenter",e[e.topRightEdge=2]="topRightEdge",e[e.topAutoEdge=3]="topAutoEdge",e[e.bottomLeftEdge=4]="bottomLeftEdge",e[e.bottomCenter=5]="bottomCenter",e[e.bottomRightEdge=6]="bottomRightEdge",e[e.bottomAutoEdge=7]="bottomAutoEdge",e[e.leftTopEdge=8]="leftTopEdge",e[e.leftCenter=9]="leftCenter",e[e.leftBottomEdge=10]="leftBottomEdge",e[e.rightTopEdge=11]="rightTopEdge",e[e.rightCenter=12]="rightCenter",e[e.rightBottomEdge=13]="rightBottomEdge"}(t.DirectionalHint||(t.DirectionalHint={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(87);t.DirectionalHint=o.DirectionalHint,function(e){e[e.Normal=0]="Normal",e[e.Divider=1]="Divider",e[e.Header=2]="Header",e[e.Section=3]="Section"}(t.ContextualMenuItemType||(t.ContextualMenuItemType={}))},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return l});var o,r,i,a=n(1),s=n(58);function l(e){const t=Object.assign({},e,{primary:!e.secondary});return a.createElement(s.DefaultButton,Object.assign({},t))}(o=n(3).enterModule)&&o(e),r=n(3).default,i=n(3).leaveModule,r&&(r.register(l,"PrimaryButton","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\widget\\primaryButton.tsx"),i(e))}).call(this,n(7)(e))},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return u});var o,r=n(1),i=n(115),a=n(15),s=n(9);(o=n(3).enterModule)&&o(e);const l=Object(i.a)({fontFamily:s.c.FONT_FAMILY_DEFAULT,fontSize:"26px",fontWeight:"normal",margin:0,padding:0}),u=e=>r.createElement("h2",{className:`${l} medium-header-comp ${e.className||""}`},r.createElement(a.j,null,e.children));var c,d;c=n(3).default,d=n(3).leaveModule,c&&(c.register(l,"css","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\widget\\mediumHeader.tsx"),c.register(u,"MediumHeader","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\widget\\mediumHeader.tsx"),d(e))}).call(this,n(7)(e))},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return u});var o,r,i,a=n(115),s=n(13),l=n(38);(o=n(3).enterModule)&&o(e);class u{static setCss(e){const t={backgroundColor:`var(${s.a.neutral15})`,cursor:"default",fontSize:"13px",fontFamily:l.a.FONT_FAMILY_DEFAULT,height:"100%",margin:0,minHeight:"100%",overflow:"hidden",userSelect:"none"};Object.assign(t,e),Object(a.a)({selectors:{":global(html)":t,":global(body)":t,":global(#root)":t}}),Object(a.a)({selectors:{":global(div)":{boxSizing:"border-box"},":global(::-webkit-scrollbar)":{width:"10px",height:"10px"},":global(::-webkit-scrollbar-track)":{background:"transparent"},":global(::-webkit-scrollbar-thumb)":{background:"transparent"}}})}}r=n(3).default,i=n(3).leaveModule,r&&(r.register(u,"GlobalCss","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\styles\\globalCss.ts"),i(e))}).call(this,n(7)(e))},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return i});var o,r=n(13);(o=n(3).enterModule)&&o(e);var i,a,s;!function(e){e.INSET_TOP=`inset 0px 3px 6px -3px var(${r.a.neutral6})`,e.INSET_BOTTOM=`inset 0px -3px 6px -3px var(${r.a.neutral6})`,e.INSET_LEFT=`inset 3px 0px 6px -3px var(${r.a.neutral6})`,e.INSET_RIGHT=`inset -3px 0px 6px -3px var(${r.a.neutral6})`}(i||(i={})),a=n(3).default,s=n(3).leaveModule,a&&(a.register("6px","BLUR_RADIUS","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\styles\\shadows.ts"),a.register("-3px","SPREAD_RADIUS","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\styles\\shadows.ts"),a.register(i,"Shadows","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\styles\\shadows.ts"),s(e))}).call(this,n(7)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(216),r=n(215),i=n(214),a=n(213),s=n(212),l=n(211),u=n(210),c=n(209),d=n(208),p=n(207),f=n(206),h=n(205),m=n(204),g=n(203),_=n(202),v=n(201);n(200);var y="https://spoprod-a.akamaihd.net/files/fabric/assets/icons/";t.initializeIcons=function(e,t){void 0===e&&(e=y),[o.initializeIcons,r.initializeIcons,i.initializeIcons,a.initializeIcons,s.initializeIcons,l.initializeIcons,u.initializeIcons,c.initializeIcons,d.initializeIcons,p.initializeIcons,f.initializeIcons,h.initializeIcons,m.initializeIcons,g.initializeIcons,_.initializeIcons,v.initializeIcons].forEach(function(n){return n(e,t)})}},function(e,t,n){"use strict";(function(e){var o,r,i,a;n.d(t,"a",function(){return r}),(o=n(3).enterModule)&&o(e),function(e){e.TOOLBAR_BUTTON_HOVER_TEXTDECORATION="underline"}(r||(r={})),i=n(3).default,a=n(3).leaveModule,i&&(i.register(r,"Decorators","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\styles\\decorators.ts"),a(e))}).call(this,n(7)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Nav=1,e.ScrollablePane=1,e.FocusStyle=1,e.Coachmark=1e3,e.Layer=1e6,e.KeytipLayer=1000001}(t.ZIndexes||(t.ZIndexes={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HighContrastSelector="@media screen and (-ms-high-contrast: active)",t.ScreenWidthMinSmall=320,t.ScreenWidthMinMedium=480,t.ScreenWidthMinLarge=640,t.ScreenWidthMinXLarge=1024,t.ScreenWidthMinXXLarge=1366,t.ScreenWidthMinXXXLarge=1920,t.ScreenWidthMaxSmall=t.ScreenWidthMinMedium-1,t.ScreenWidthMaxMedium=t.ScreenWidthMinLarge-1,t.ScreenWidthMaxLarge=t.ScreenWidthMinXLarge-1,t.ScreenWidthMaxXLarge=t.ScreenWidthMinXXLarge-1,t.ScreenWidthMaxXXLarge=t.ScreenWidthMinXXXLarge-1,t.getScreenSelector=function(e,t){return"@media only screen and (min-width: "+e+"px) and (max-width: "+t+"px)"}},function(e,t,n){"use strict";function o(e){var t;return e&&s(e)&&(t=e._virtual.parent),t}function r(e,t){return void 0===t&&(t=!0),e&&(t&&o(e)||e.parentNode&&e.parentNode)}Object.defineProperty(t,"__esModule",{value:!0}),t.setVirtualParent=function(e,t){var n=e,o=t;n._virtual||(n._virtual={children:[]});var r=n._virtual.parent;if(r&&r!==t){var i=r._virtual.children.indexOf(n);i>-1&&r._virtual.children.splice(i,1)}n._virtual.parent=o||void 0,o&&(o._virtual||(o._virtual={children:[]}),o._virtual.children.push(n))},t.getVirtualParent=o,t.getParent=r,t.getChildren=function(e,t){void 0===t&&(t=!0);var n=[];if(e){for(var o=0;o<e.children.length;o++)n.push(e.children.item(o));t&&s(e)&&n.push.apply(n,e._virtual.children)}return n},t.elementContains=function(e,t,n){void 0===n&&(n=!0);var o=!1;if(e&&t)if(n)for(o=!1;t;){var i=r(t);if(i===e){o=!0;break}t=i}else e.contains&&(o=e.contains(t));return o};var i=!1;function a(e,t){return e&&e!==document.body?t(e)?e:a(r(e),t):null}function s(e){return e&&!!e._virtual}t.setSSR=function(e){i=e},t.getWindow=function(e){return i||"undefined"==typeof window?void 0:e&&e.ownerDocument&&e.ownerDocument.defaultView?e.ownerDocument.defaultView:window},t.getDocument=function(e){return i||"undefined"==typeof document?void 0:e&&e.ownerDocument?e.ownerDocument:document},t.getRect=function(e){var t;return e&&(e===window?t={left:0,top:0,width:window.innerWidth,height:window.innerHeight,right:window.innerWidth,bottom:window.innerHeight}:e.getBoundingClientRect&&(t=e.getBoundingClientRect())),t},t.findElementRecursive=a,t.elementContainsAttribute=function(e,t){var n=a(e,function(e){return e.hasAttribute(t)});return n&&n.getAttribute(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r,i="'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif";!function(e){e.Arabic="Segoe UI Web (Arabic)",e.Cyrillic="Segoe UI Web (Cyrillic)",e.EastEuropean="Segoe UI Web (East European)",e.Greek="Segoe UI Web (Greek)",e.Hebrew="Segoe UI Web (Hebrew)",e.Thai="Leelawadee UI Web",e.Vietnamese="Segoe UI Web (Vietnamese)",e.WestEuropean="Segoe UI Web (West European)",e.Selawik="Selawik Web"}(o=t.LocalizedFontNames||(t.LocalizedFontNames={})),function(e){e.Arabic="'"+o.Arabic+"'",e.ChineseSimplified="'Microsoft Yahei UI', Verdana, Simsun",e.ChineseTraditional="'Microsoft Jhenghei UI', Pmingliu",e.Cyrillic="'"+o.Cyrillic+"'",e.EastEuropean="'"+o.EastEuropean+"'",e.Greek="'"+o.Greek+"'",e.Hebrew="'"+o.Hebrew+"'",e.Hindi="'Nirmala UI'",e.Japanese="'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka",e.Korean="'Malgun Gothic', Gulim",e.Selawik="'"+o.Selawik+"'",e.Thai="'Leelawadee UI Web', 'Kmer UI'",e.Vietnamese="'"+o.Vietnamese+"'",e.WestEuropean="'"+o.WestEuropean+"'"}(r=t.LocalizedFontFamilies||(t.LocalizedFontFamilies={}));var a,s,l="'Segoe UI', '"+o.WestEuropean+"'",u={ar:r.Arabic,bg:r.Cyrillic,cs:r.EastEuropean,el:r.Greek,et:r.EastEuropean,he:r.Hebrew,hi:r.Hindi,hr:r.EastEuropean,hu:r.EastEuropean,ja:r.Japanese,kk:r.EastEuropean,ko:r.Korean,lt:r.EastEuropean,lv:r.EastEuropean,pl:r.EastEuropean,ru:r.Cyrillic,sk:r.EastEuropean,"sr-latn":r.EastEuropean,th:r.Thai,tr:r.EastEuropean,uk:r.Cyrillic,vi:r.Vietnamese,"zh-hans":r.ChineseSimplified,"zh-hant":r.ChineseTraditional};function c(e){return e+", "+i}function d(e,t,n){return{fontFamily:n,MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontSize:e,fontWeight:t}}!function(e){e.mini="10px",e.xSmall="11px",e.small="12px",e.smallPlus="13px",e.medium="14px",e.mediumPlus="15px",e.icon="16px",e.large="17px",e.xLarge="21px",e.xxLarge="28px",e.superLarge="42px",e.mega="72px"}(a=t.FontSizes||(t.FontSizes={})),function(e){e.light=100,e.semilight=300,e.regular=400,e.semibold=600,e.bold=700}(s=t.FontWeights||(t.FontWeights={})),function(e){e.xSmall="10px",e.small="12px",e.medium="16px",e.large="20px"}(t.IconFontSizes||(t.IconFontSizes={})),t.createFontStyles=function(e){var t=function(e){for(var t in u)if(u.hasOwnProperty(t)&&e&&0===t.indexOf(e))return u[t];return l}(e),n=c(t),o=n;return t===l&&(o=c(r.WestEuropean)),{tiny:d(a.mini,s.semibold,n),xSmall:d(a.xSmall,s.regular,n),small:d(a.small,s.regular,n),smallPlus:d(a.smallPlus,s.regular,n),medium:d(a.medium,s.regular,n),mediumPlus:d(a.mediumPlus,s.regular,n),large:d(a.large,s.semilight,o),xLarge:d(a.xLarge,s.light,n),xxLarge:d(a.xxLarge,s.light,n),superLarge:d(a.superLarge,s.light,n),mega:d(a.mega,s.light,n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r,i=n(17),a=n(98),s=n(231),l="https://static2.sharepointonline.com/files/fabric/assets";function u(e,t,n,o){e="'"+e+"'";var r=void 0!==o?"local('"+o+"'),":"";i.fontFace({fontFamily:e,src:r+"url('"+t+".woff2') format('woff2'),url('"+t+".woff') format('woff')",fontWeight:n,fontStyle:"normal"})}function c(e,t,n,o,r){void 0===o&&(o="segoeui");var i=e+"/"+n+"/"+o;u(t,i+"-light",a.FontWeights.light,r&&r+" Light"),u(t,i+"-semilight",a.FontWeights.semilight,r&&r+" SemiLight"),u(t,i+"-regular",a.FontWeights.regular,r),u(t,i+"-semibold",a.FontWeights.semibold,r&&r+" SemiBold")}function d(e){if(e){var t=e+"/fonts";c(t,a.LocalizedFontNames.Thai,"leelawadeeui-thai","leelawadeeui"),c(t,a.LocalizedFontNames.Arabic,"segoeui-arabic"),c(t,a.LocalizedFontNames.Cyrillic,"segoeui-cyrillic"),c(t,a.LocalizedFontNames.EastEuropean,"segoeui-easteuropean"),c(t,a.LocalizedFontNames.Greek,"segoeui-greek"),c(t,a.LocalizedFontNames.Hebrew,"segoeui-hebrew"),c(t,a.LocalizedFontNames.Vietnamese,"segoeui-vietnamese"),c(t,a.LocalizedFontNames.WestEuropean,"segoeui-westeuropean","segoeui","Segoe UI"),c(t,a.LocalizedFontFamilies.Selawik,"selawik","selawik"),u("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-semilight",a.FontWeights.light),u("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-bold",a.FontWeights.semibold)}}t.DefaultFontStyles=a.createFontStyles(s.getLanguage()),t.registerDefaultFontFaces=d,d((o="undefined"!=typeof window?window:void 0,(r=o?o.FabricConfig:void 0)&&void 0!==r.fontBaseUrl?r.fontBaseUrl:l))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o={},r=0;if("undefined"!=typeof window){var i=window;o=i.__globalSettings__=i.__globalSettings__||((a={}).__callbacks__={},a)}var a,s=o.__callbacks__,l=function(){function e(){}return e.getValue=function(e,t){return void 0===o[e]&&(o[e]="function"==typeof t?t():t),o[e]},e.setValue=function(e,t){var n=o[e];if(t!==n){o[e]=t;var r={oldValue:n,value:t,key:e};for(var i in s)s.hasOwnProperty(i)&&s[i](r)}return t},e.addChangeListener=function(e){var t=e.__id__;t||(t=e.__id__=String(r++)),s[t]=e},e.removeChangeListener=function(e){delete s[e.__id__]},e}();t.GlobalSettings=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(234),i=n(100),a=n(17),s=i.GlobalSettings.getValue("icons",{__options:{disableWarnings:!1,warnOnMissingIcons:!0},__remapped:{}});t.registerIcons=function(e,t){var n=o.__assign({},e,{isRegistered:!1,className:void 0}),i=e.icons;for(var a in t=t?o.__assign({},s.__options,t):s.__options,i)if(i.hasOwnProperty(a)){var l=i[a],u=a.toLowerCase();s[u]?t.disableWarnings||r.warn("Icon '"+a+" being re-registered. Ignoring duplicate registration."):s[u]={code:l,subset:n}}},t.registerIconAlias=function(e,t){s.__remapped[e.toLowerCase()]=t.toLowerCase()},t.getIcon=function(e){var t=void 0,n=s.__options;if(e=e?e.toLowerCase():"",e=s.__remapped[e]||e)if(t=s[e]){var o=t.subset;o.fontFace&&!o.isRegistered&&(a.fontFace(o.fontFace),o.className=a.mergeStyles(o.style,{fontFamily:o.fontFace.fontFamily,fontWeight:o.fontFace.fontWeight||"normal",fontStyle:o.fontFace.fontStyle||"normal"}).toString(),o.isRegistered=!0)}else!n.disableWarnings&&n.warnOnMissingIcons&&r.warn('The icon "'+e+'" was used but not registered. See http://aka.ms/fabric-icon-usage for more information.');return t},t.setIconOptions=function(e){s.__options=o.__assign({},s.__options,e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.concatStyleSets=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n={},o=0,r=e;o<r.length;o++){var i=r[o];if(i)for(var a in i)if(i.hasOwnProperty(a)){var s=n[a],l=i[a];n[a]=void 0===s?l:(Array.isArray(s)?s:[s]).concat(Array.isArray(l)?l:[l])}}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(21);t.extractStyleParts=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=[],r=[],i=o.Stylesheet.getInstance();return function e(t){for(var o=0,a=t;o<a.length;o++){var s=a[o];if(s)if("string"==typeof s)if(s.indexOf(" ")>=0)e(s.split(" "));else{var l=i.argsFromClassName(s);l?e(l):-1===n.indexOf(s)&&n.push(s)}else Array.isArray(s)?e(s):"object"==typeof s&&r.push(s)}}(e),{classes:n,objects:r}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(17);t.InjectionMode=o.InjectionMode,t.Stylesheet=o.Stylesheet,t.concatStyleSets=o.concatStyleSets,t.fontFace=o.fontFace,t.keyframes=o.keyframes,t.mergeStyleSets=o.mergeStyleSets,t.mergeStyles=o.mergeStyles},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return u});var o,r=n(1),i=n(115),a=n(15),s=n(9);(o=n(3).enterModule)&&o(e);const l=Object(i.a)({fontFamily:s.c.FONT_FAMILY_DEFAULT,fontSize:"36px",fontWeight:400,margin:0,padding:0}),u=e=>r.createElement("h1",{className:`${l} large-header-comp ${e.className||""}`},r.createElement(a.j,null,e.children));var c,d;c=n(3).default,d=n(3).leaveModule,c&&(c.register(l,"css","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\widget\\largeHeader.tsx"),c.register(u,"LargeHeader","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\widget\\largeHeader.tsx"),d(e))}).call(this,n(7)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KTP_PREFIX="ktp",t.KTP_SEPARATOR="-",t.KTP_FULL_PREFIX=t.KTP_PREFIX+t.KTP_SEPARATOR,t.DATAKTP_TARGET="data-ktp-target",t.DATAKTP_EXECUTE_TARGET="data-ktp-execute-target",t.KTP_LAYER_ID="ktp-layer-id",t.KTP_ARIA_SEPARATOR=", ",function(e){e.KEYTIP_ADDED="keytipAdded",e.KEYTIP_REMOVED="keytipRemoved",e.KEYTIP_UPDATED="keytipUpdated",e.PERSISTED_KEYTIP_ADDED="persistedKeytipAdded",e.PERSISTED_KEYTIP_REMOVED="persistedKeytipRemoved",e.PERSISTED_KEYTIP_EXECUTE="persistedKeytipExecute",e.ENTER_KEYTIP_MODE="enterKeytipMode",e.EXIT_KEYTIP_MODE="exitKeytipMode"}(t.KeytipEvents||(t.KeytipEvents={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.center=0]="center",e[e.contain=1]="contain",e[e.cover=2]="cover",e[e.none=3]="none"}(t.ImageFit||(t.ImageFit={})),function(e){e[e.landscape=0]="landscape",e[e.portrait=1]="portrait"}(t.ImageCoverStyle||(t.ImageCoverStyle={})),function(e){e[e.notLoaded=0]="notLoaded",e[e.loaded=1]="loaded",e[e.error=2]="error",e[e.errorLoaded=3]="errorLoaded"}(t.ImageLoadState||(t.ImageLoadState={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.default=0]="default",e[e.image=1]="image",e[e.Default=1e5]="Default",e[e.Image=100001]="Image"}(t.IconType||(t.IconType={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(108),a=n(256),s=n(107),l=n(2),u=n(4),c=l.classNamesFunction(),d=function(e){function t(t){var n=e.call(this,t)||this;return n.onImageLoadingStateChange=function(e){n.props.imageProps&&n.props.imageProps.onLoadingStateChange&&n.props.imageProps.onLoadingStateChange(e),e===s.ImageLoadState.error&&n.setState({imageLoadError:!0})},n.state={imageLoadError:!1},n}return o.__extends(t,e),t.prototype.render=function(){var e=this.props,t=e.ariaLabel,n=e.className,s=e.styles,u=e.iconName,d=e.imageErrorAs,p="string"==typeof u&&0===u.length,f=this.props.iconType===i.IconType.image||this.props.iconType===i.IconType.Image,h=this._getIconContent(u),m=h.iconClassName,g=h.children,_=c(s,{className:n,iconClassName:m,isImage:f,isPlaceholder:p}),v=t?{"aria-label":t}:{role:"presentation","aria-hidden":!0},y=f?"div":"i",b=l.getNativeProps(this.props,l.htmlElementProperties),C=this.state.imageLoadError,S=o.__assign({},this.props.imageProps,{onLoadingStateChange:this.onImageLoadingStateChange}),x=C&&d||a.Image;return r.createElement(y,o.__assign({"data-icon-name":u},b,v,{className:_.root}),f?r.createElement(x,o.__assign({},S)):g)},t.prototype._getIconContent=function(e){var t=u.getIcon(e)||{subset:{className:void 0},code:void 0};return{children:t.code,iconClassName:t.subset.className}},t}(l.BaseComponent);t.IconBase=d},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var o=n(10),r=n(12);function i(e){var t=o.b.getInstance(),n=t.getClassName(),i=[];for(var a in e)e.hasOwnProperty(a)&&i.push(a,"{",Object(r.b)(e[a]),"}");var s=i.join("");return t.insertRule("@keyframes "+n+"{"+s+"}"),t.cacheClassName(n,s,[],["keyframes",s]),n}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var o=n(10),r=n(12);function i(e){o.b.getInstance().insertRule("@font-face{"+Object(r.b)(e)+"}")}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var o=n(113),r=n(50),i=n(12);function a(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n={},a={},s=e[0];if(s){e.length>1&&(s=r.a.apply(void 0,e));var l=[];for(var u in s)if(s.hasOwnProperty(u)){var c=s[u],d=Object(o.a)(c),p=d.classes,f=d.objects,h=Object(i.d)({displayName:u},f);l.push(h),h&&(a[u]=h.className,n[u]=p.concat([h.className]).join(" "))}for(var m=0,g=l;m<g.length;m++){(h=g[m])&&Object(i.a)(h,a)}}return n}},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var o=n(10);function r(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=[],r=[],i=o.b.getInstance();return function e(t){for(var o=0,a=t;o<a.length;o++){var s=a[o];if(s)if("string"==typeof s)if(s.indexOf(" ")>=0)e(s.split(" "));else{var l=i.argsFromClassName(s);l?e(l):-1===n.indexOf(s)&&n.push(s)}else Array.isArray(s)?e(s):"object"==typeof s&&r.push(s)}}(e),{classes:n,objects:r}}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var o=n(12),r=n(113);function i(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Object(r.a)(e),i=n.classes,a=n.objects;return a.length&&i.push(Object(o.c)(a)),i.join(" ")}},function(e,t,n){"use strict";var o,r=n(16);var i={"user-select":1};function a(e,t){var n=function(){if(!o){var e="undefined"!=typeof document?document:void 0,t="undefined"!=typeof navigator?navigator:void 0,n=t?t.userAgent.toLowerCase():void 0;o=e?{isWebkit:!!(e&&"WebkitAppearance"in e.documentElement.style),isMoz:!!(n&&n.indexOf("firefox")>-1),isOpera:!!(n&&n.indexOf("opera")>-1),isMs:!(!t||!/rv:11.0/i.test(t.userAgent)&&!/Edge\/\d./i.test(navigator.userAgent))}:{isWebkit:!0,isMoz:!0,isOpera:!0,isMs:!0}}return o}(),r=e[t];if(i[r]){var a=e[t+1];i[r]&&(n.isWebkit&&e.push("-webkit-"+r,a),n.isMoz&&e.push("-moz-"+r,a),n.isMs&&e.push("-ms-"+r,a),n.isOpera&&e.push("-o-"+r,a))}}var s=["column-count","font-weight","flex-basis","flex","flex-grow","flex-shrink","fill-opacity","opacity","order","z-index","zoom"];function l(e,t){var n=e[t],o=e[t+1];if("number"==typeof o){var r=-1===s.indexOf(n)?"px":"";e[t+1]=""+o+r}}var u,c="left",d="right",p="@noflip",f=((u={})[c]=d,u[d]=c,u),h={"w-resize":"e-resize","sw-resize":"se-resize","nw-resize":"ne-resize"},m=g();function g(){return void 0===m&&(m="undefined"!=typeof document&&!!document.documentElement&&"rtl"===document.documentElement.getAttribute("dir")),m}function _(e,t){if(g()){var n=e[t];if(!n)return;var o=e[t+1];if("string"==typeof o&&o.indexOf(p)>=0)e[t+1]=o.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g,"");else if(n.indexOf(c)>=0)e[t]=n.replace(c,d);else if(n.indexOf(d)>=0)e[t]=n.replace(d,c);else if(String(o).indexOf(c)>=0)e[t+1]=o.replace(c,d);else if(String(o).indexOf(d)>=0)e[t+1]=o.replace(d,c);else if(f[n])e[t]=f[n];else if(h[o])e[t+1]=h[o];else switch(n){case"margin":case"padding":e[t+1]=function(e){if("string"==typeof e){var t=e.split(" ");if(4===t.length)return t[0]+" "+t[3]+" "+t[2]+" "+t[1]}return e}(o);break;case"box-shadow":e[t+1]=function(e,t){var n=e.split(" "),o=parseInt(n[t],10);return n[0]=n[0].replace(String(o),String(-1*o)),n.join(" ")}(o,0)}}}var v="displayName";function y(e,t,n){var o="string"==typeof n?n.split(" "):[n];e[t+"Top"]=o[0],e[t+"Right"]=o[1]||o[0],e[t+"Bottom"]=o[2]||o[0],e[t+"Left"]=o[3]||o[1]||o[0]}function b(e){if(!e)return"";var t,n,o=[];for(var r in e)e.hasOwnProperty(r)&&r!==v&&void 0!==e[r]&&o.push(r,e[r]);for(var i=0;i<o.length;i+=2)(t=o)[n=i]=t[n].replace(/([A-Z])/g,"-$1").toLowerCase(),l(o,i),_(o,i),a(o,i);for(i=1;i<o.length;i+=4)o.splice(i,1,":",o[i],";");return o.join("")}function C(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=function e(t,n,o){void 0===n&&(n={__order:[]}),void 0===o&&(o="&");var i=r.a.getInstance(),a=n[o];a||(a={},n[o]=a,n.__order.push(o));for(var s=0,l=t;s<l.length;s++){var u=l[s];if("string"==typeof u){var c=i.argsFromClassName(u);c&&e(c,n,o)}else if(Array.isArray(u))e(u,n,o);else for(var d in u)if("selectors"===d){var p=u.selectors;for(var f in p)if(p.hasOwnProperty(f)){var h=p[f];0===f.indexOf(":global(")?f=f.replace(/:global\(|\)$/g,""):0===f.indexOf("@media")?f=f+"{"+o:0===f.indexOf(":")?f=o+f:f.indexOf("&")<0&&(f=o+" "+f),e([h],n,f)}}else"margin"===d||"padding"===d?y(a,d,u[d]):a[d]=u[d]}return n}(e),o=function(e){for(var t=[],n=!1,o=0,r=e.__order;o<r.length;o++){var i=r[o];t.push(i);var a=e[i];for(var s in a)a.hasOwnProperty(s)&&void 0!==a[s]&&(n=!0,t.push(s,a[s]))}return n?t.join(""):void 0}(n);if(o){var i=r.a.getInstance(),a={className:i.classNameFromKey(o),key:o,args:e};if(!a.className){a.className=i.getClassName(function(e){var t=e&&e["&"];return t?t.displayName:void 0}(n));for(var s=[],l=0,u=n.__order;l<u.length;l++){var c=u[l];s.push(c,b(n[c]))}a.rulesToInsert=s}return a}}function S(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=C.apply(void 0,e);return n?(function(e,t){var n=r.a.getInstance(),o=e.className,i=e.key,a=e.args,s=e.rulesToInsert;if(s){for(var l=0;l<s.length;l+=2){var u=s[l+1];if(u){var c=s[l],d=(c=c.replace(/(&)|\$([\w-]+)\b/g,function(n,o,r){return o?"."+e.className:r?"."+(t&&t[r]||r):""}))+"{"+u+"}"+(0===c.indexOf("@media")?"}":"");n.insertRule(d)}}n.cacheClassName(o,i,a,s)}}(n),n.className):""}function x(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=[],o=[],i=r.a.getInstance();return function e(t){for(var r=0,a=t;r<a.length;r++){var s=a[r];if(s)if("string"==typeof s)if(s.indexOf(" ")>=0)e(s.split(" "));else{var l=i.argsFromClassName(s);l?e(l):-1===n.indexOf(s)&&n.push(s)}else Array.isArray(s)?e(s):"object"==typeof s&&o.push(s)}}(e),{classes:n,objects:o}}(e),o=n.classes,i=n.objects;return i.length&&o.push(S(i)),o.join(" ")}n.d(t,"a",function(){return x})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(263),t)},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return i}),n.d(t,"b",function(){return s});var o,r=n(1);function i(e,t){return r.Children.map(e,e=>!(!e||!t(e))&&e)}(o=n(3).enterModule)&&o(e);let a=Date.now();function s(e,t){const{name:n=a++,displayName:o=a++}=e,{name:r=a++,displayName:i=a++}=t;return n===r||n===i||o===i||o===r}var l,u;l=n(3).default,u=n(3).leaveModule,l&&(l.register(i,"filterChildren","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\utils\\filterChildren.ts"),l.register(a,"uid","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\utils\\filterChildren.ts"),l.register(s,"hmrSafeNameComparison","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\utils\\filterChildren.ts"),u(e))}).call(this,n(7)(e))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",function(){return ExpandCollapse}),__webpack_require__.d(__webpack_exports__,"c",function(){return ExpandCollapseControls}),__webpack_require__.d(__webpack_exports__,"b",function(){return ExpandCollapseContent});var _uifabric_merge_styles__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(115),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),_utils__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(18),_widget__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(36),_styles__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(9),enterModule;enterModule=__webpack_require__(3).enterModule,enterModule&&enterModule(module);const baseCss={display:"flex",flexFlow:"column nowrap",height:"100%",minHeight:"22px",overflow:"hidden",selectors:{"& > header":{backgroundColor:`var(${_styles__WEBPACK_IMPORTED_MODULE_4__.f.neutral3})`,cursor:"pointer",display:"flex",fontSize:"11px",fontWeight:700,height:"22px",lineHeight:"22px",textTransform:"uppercase",whiteSpace:"nowrap",flexShrink:0,selectors:{"& > .content":{display:"flex",alignItems:"center",flex:1,paddingLeft:"8px",selectors:{"& > .toggle":{height:"12px",width:"12px",marginRight:"8px",backgroundImage:"url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16'%3E%3Cpath fill='%23e8e8e8' d='M6 4v8l4-4-4-4zm1 2.414L8.586 8 7 9.586V6.414z'/%3E%3C/svg%3E\")",backgroundSize:"18px",backgroundPosition:"50% 50%",backgroundRepeat:"no-repeat"}},"& > .toggle.toggle-expanded":{background:"url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16'%3E%3Cpath fill='%23e8e8e8' d='M11 10.07H5.344L11 4.414v5.656z'/%3E%3C/svg%3E\")"}},"& > .accessories":{margin:"0 0 0 auto",height:"100%",width:"auto","& > button":{backgroundColor:"transparent",color:`var(${_styles__WEBPACK_IMPORTED_MODULE_4__.f.neutral5})`,border:0,cursor:"pointer"}}}},"& > .body":{height:"100%",overflow:"auto",position:"relative","& > section":{height:"100%",display:"flex",flexFlow:"column nowrap"}}}};class ExpandCollapse extends react__WEBPACK_IMPORTED_MODULE_1__.Component{constructor(e){super(e),this.handleTitleClick=(()=>{this.setState(e=>({expanded:!e.expanded}))}),this.state={expanded:!!e.expanded}}render(){const{expanded:e}=this.state,{className:t,title:n,children:o,style:r={}}=this.props;let i=e?" container-expanded":"";i+=t?` ${t}`:"";const a=e?" toggle-expanded":"",s=Object(_uifabric_merge_styles__WEBPACK_IMPORTED_MODULE_0__.a)(baseCss,r);return react__WEBPACK_IMPORTED_MODULE_1__.createElement("div",{"aria-expanded":e,className:`${s} expand-collapse-container ${i}`},react__WEBPACK_IMPORTED_MODULE_1__.createElement("header",null,react__WEBPACK_IMPORTED_MODULE_1__.createElement("div",{className:"content",onClick:this.handleTitleClick},react__WEBPACK_IMPORTED_MODULE_1__.createElement("span",{className:"toggle"+a}),n),react__WEBPACK_IMPORTED_MODULE_1__.createElement("div",{className:"accessories"},Object(_utils__WEBPACK_IMPORTED_MODULE_2__.a)(o,e=>Object(_utils__WEBPACK_IMPORTED_MODULE_2__.b)(e.type,ExpandCollapseControls)))),react__WEBPACK_IMPORTED_MODULE_1__.createElement("div",{className:"body"},e&&react__WEBPACK_IMPORTED_MODULE_1__.createElement("section",null,Object(_utils__WEBPACK_IMPORTED_MODULE_2__.a)(o,e=>Object(_utils__WEBPACK_IMPORTED_MODULE_2__.b)(e.type,ExpandCollapseContent)),react__WEBPACK_IMPORTED_MODULE_1__.createElement(_widget__WEBPACK_IMPORTED_MODULE_3__.b,{top:!0}))))}componentWillReceiveProps(e){if(void 0!==e.expanded){const{expanded:t}=e;this.setState({expanded:t})}}__reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}const ExpandCollapseControls=e=>e.children,ExpandCollapseContent=e=>e.children;var reactHotLoader,leaveModule;reactHotLoader=__webpack_require__(3).default,leaveModule=__webpack_require__(3).leaveModule,reactHotLoader&&(reactHotLoader.register(baseCss,"baseCss","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\expandCollapse.tsx"),reactHotLoader.register(ExpandCollapse,"ExpandCollapse","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\expandCollapse.tsx"),reactHotLoader.register(ExpandCollapseControls,"ExpandCollapseControls","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\expandCollapse.tsx"),reactHotLoader.register(ExpandCollapseContent,"ExpandCollapseContent","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\expandCollapse.tsx"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var o=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach(function(e){o[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var u in n=Object(arguments[l]))r.call(n,u)&&(s[u]=n[u]);if(o){a=o(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(s[a[c]]=n[a[c]])}}return s}},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"b",function(){return ColumnAlignment}),__webpack_require__.d(__webpack_exports__,"c",function(){return ColumnJustification}),__webpack_require__.d(__webpack_exports__,"a",function(){return Column});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_uifabric_merge_styles__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(115),enterModule,ColumnAlignment,ColumnJustification;enterModule=__webpack_require__(3).enterModule,enterModule&&enterModule(module),function(e){e[e.Left=0]="Left",e[e.Center=1]="Center",e[e.Right=2]="Right"}(ColumnAlignment||(ColumnAlignment={})),function(e){e[e.Top=0]="Top",e[e.Center=1]="Center",e[e.Bottom=2]="Bottom"}(ColumnJustification||(ColumnJustification={}));const baseCss={boxSizing:"border-box",display:"flex",flexFlow:"column nowrap",maxWidth:"100%",width:"100%",overflow:"hidden"};class Column extends react__WEBPACK_IMPORTED_MODULE_0__.Component{render(){const e=Object(_uifabric_merge_styles__WEBPACK_IMPORTED_MODULE_1__.a)(baseCss,{alignItems:getColumnAlignment(this.props.align),justifyContent:getColumnJustification(this.props.justify)});return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:`${e} column-comp column-comp ${this.props.className||""}`},this.props.children)}__reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}function getColumnAlignment(e){switch(e){case ColumnAlignment.Center:return"center";case ColumnAlignment.Right:return"flex-end";case ColumnAlignment.Left:default:return"flex-start"}}function getColumnJustification(e){switch(e){case ColumnJustification.Center:return"center";case ColumnJustification.Bottom:return"flex-end";case ColumnJustification.Top:default:return"flex-start"}}var reactHotLoader,leaveModule;reactHotLoader=__webpack_require__(3).default,leaveModule=__webpack_require__(3).leaveModule,reactHotLoader&&(reactHotLoader.register(ColumnAlignment,"ColumnAlignment","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\column.tsx"),reactHotLoader.register(ColumnJustification,"ColumnJustification","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\column.tsx"),reactHotLoader.register(baseCss,"baseCss","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\column.tsx"),reactHotLoader.register(Column,"Column","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\column.tsx"),reactHotLoader.register(getColumnAlignment,"getColumnAlignment","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\column.tsx"),reactHotLoader.register(getColumnJustification,"getColumnJustification","C:\\Users\\juwilaby\\Documents\\dev\\BotFramework-Emulator\\packages\\sdk\\ui-react\\src\\layout\\column.tsx"),leaveModule(module))}).call(this,__webpack_require__(7)(module))},function(e,t,n){"use strict";n.r(t);var o=n(15),r=n(59),i=n(37),a=n(9),s=n(18),l=n(36);n.d(t,"ColumnAlignment",function(){return o.b}),n.d(t,"ColumnJustification",function(){return o.c}),n.d(t,"Column",function(){return o.a}),n.d(t,"ExpandCollapse",function(){return o.d}),n.d(t,"ExpandCollapseControls",function(){return o.f}),n.d(t,"ExpandCollapseContent",function(){return o.e}),n.d(t,"RowJustification",function(){return o.i}),n.d(t,"RowAlignment",function(){return o.h}),n.d(t,"Row",function(){return o.g}),n.d(t,"TruncateText",function(){return o.j}),n.d(t,"Splitter",function(){return r.a}),n.d(t,"SplitterPane",function(){return i.a}),n.d(t,"Colors",function(){return a.a}),n.d(t,"initializeTheme",function(){return a.h}),n.d(t,"modalTheme",function(){return a.i}),n.d(t,"Decorators",function(){return a.b}),n.d(t,"initializeIcons",function(){return a.g}),n.d(t,"Fonts",function(){return a.c}),n.d(t,"Shadows",function(){return a.e}),n.d(t,"GlobalCss",function(){return a.d}),n.d(t,"ThemeVariables",function(){return a.f}),n.d(t,"filterChildren",function(){return s.a}),n.d(t,"hmrSafeNameComparison",function(){return s.b}),n.d(t,"Checkbox",function(){return l.a}),n.d(t,"LargeHeader",function(){return l.c}),n.d(t,"MediumHeader",function(){return l.d}),n.d(t,"PrimaryButton",function(){return l.h}),n.d(t,"SmallHeader",function(){return l.i}),n.d(t,"TextInputField",function(){return l.j}),n.d(t,"InsetShadow",function(){return l.b}),n.d(t,"ModalContent",function(){return l.g}),n.d(t,"ModalActions",function(){return l.f}),n.d(t,"Modal",function(){return l.e})},function(e,t,n){"use strict";n.r(t);var o=n(8);function r(e){var t={},n=function(n){var r;e.hasOwnProperty(n)&&Object.defineProperty(t,n,{get:function(){return void 0===r&&(r=Object(o.g)(e[n]).toString()),r},enumerable:!0,configurable:!0})};for(var r in e)n(r);return t}var i=n(0),a=n(46),s=(n(24),n(49)),l=n(111),u=n(114),c=a.a.getValue("icons",{__options:{disableWarnings:!1,warnOnMissingIcons:!0},__remapped:{}});function d(e,t){var n=i.__assign({},e,{isRegistered:!1,className:void 0}),o=e.icons;for(var r in t=t?i.__assign({},c.__options,t):c.__options,o)if(o.hasOwnProperty(r)){var a=o[r],l=r.toLowerCase();c[l]?t.disableWarnings||Object(s.b)("Icon '"+r+" being re-registered. Ignoring duplicate registration."):c[l]={code:a,subset:n}}}function p(e,t){c.__remapped[e.toLowerCase()]=t.toLowerCase()}function f(e){var t=void 0,n=c.__options;if(e=e?e.toLowerCase():"",e=c.__remapped[e]||e)if(t=c[e]){var o=t.subset;o.fontFace&&!o.isRegistered&&(Object(l.a)(o.fontFace),o.className=Object(u.a)(o.style,{fontFamily:o.fontFace.fontFamily,fontWeight:o.fontFace.fontWeight||"normal",fontStyle:o.fontFace.fontStyle||"normal"}).toString(),o.isRegistered=!0)}else!n.disableWarnings&&n.warnOnMissingIcons&&Object(s.b)('The icon "'+e+'" was used but not registered. See http://aka.ms/fabric-icon-usage for more information.');return t}function h(e){c.__options=i.__assign({},c.__options,e)}var m={display:"inline-block"};function g(e){var t="",n=f(e);return n&&(t=Object(u.a)(n.subset.className,m,{selectors:{"::before":{content:'"'+n.code+'"'}}})),t}var _=n(110),v="cubic-bezier(.1,.9,.2,1)",y="cubic-bezier(.1,.25,.75,.9)",b=Object(_.a)({from:{opacity:0},to:{opacity:1}}),C=Object(_.a)({from:{opacity:1},to:{opacity:0}}),S=te(-10),x=te(-20),E=te(-40),k=te(-400),w=te(10),I=te(20),T=te(40),M=te(400),P=ne(10),D=ne(20),O=ne(-10),F=ne(-20),R=oe(10),A=oe(20),L=oe(40),N=oe(400),B=oe(-10),U=oe(-20),j=oe(-40),W=oe(-400),H=re(-10),z=re(-20),K=re(10),V=re(20),G=Object(_.a)({from:{transform:"scale3d(.98,.98,1)"},to:{transform:"scale3d(1,1,1)"}}),q=Object(_.a)({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(.98,.98,1)"}}),Z=Object(_.a)({from:{transform:"scale3d(1.03,1.03,1)"},to:{transform:"scale3d(1,1,1)"}}),$=Object(_.a)({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(1.03,1.03,1)"}}),Y=Object(_.a)({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(90deg)"}}),X=Object(_.a)({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(-90deg)"}}),Q={easeFunction1:v,easeFunction2:y,durationValue1:"0.167s",durationValue2:"0.267s",durationValue3:"0.367s",durationValue4:"0.467s"},J={slideRightIn10:ee(b+","+S,"0.367s",v),slideRightIn20:ee(b+","+x,"0.367s",v),slideRightIn40:ee(b+","+E,"0.367s",v),slideRightIn400:ee(b+","+k,"0.367s",v),slideLeftIn10:ee(b+","+w,"0.367s",v),slideLeftIn20:ee(b+","+I,"0.367s",v),slideLeftIn40:ee(b+","+T,"0.367s",v),slideLeftIn400:ee(b+","+M,"0.367s",v),slideUpIn10:ee(b+","+P,"0.367s",v),slideUpIn20:ee(b+","+D,"0.367s",v),slideDownIn10:ee(b+","+O,"0.367s",v),slideDownIn20:ee(b+","+F,"0.367s",v),slideRightOut10:ee(C+","+R,"0.367s",v),slideRightOut20:ee(C+","+A,"0.367s",v),slideRightOut40:ee(C+","+L,"0.367s",v),slideRightOut400:ee(C+","+N,"0.367s",v),slideLeftOut10:ee(C+","+B,"0.367s",v),slideLeftOut20:ee(C+","+U,"0.367s",v),slideLeftOut40:ee(C+","+j,"0.367s",v),slideLeftOut400:ee(C+","+W,"0.367s",v),slideUpOut10:ee(C+","+H,"0.367s",v),slideUpOut20:ee(C+","+z,"0.367s",v),slideDownOut10:ee(C+","+K,"0.367s",v),slideDownOut20:ee(C+","+V,"0.367s",v),scaleUpIn100:ee(b+","+G,"0.367s",v),scaleDownIn100:ee(b+","+Z,"0.367s",v),scaleUpOut103:ee(C+","+$,"0.167s",y),scaleDownOut98:ee(C+","+q,"0.167s",y),fadeIn100:ee(b,"0.167s",y),fadeIn200:ee(b,"0.267s",y),fadeIn400:ee(b,"0.367s",y),fadeIn500:ee(b,"0.467s",y),fadeOut100:ee(C,"0.167s",y),fadeOut200:ee(C,"0.267s",y),fadeOut400:ee(C,"0.367s",y),fadeOut500:ee(C,"0.467s",y),rotate90deg:ee(Y,"0.1s",y),rotateN90deg:ee(X,"0.1s",y)};function ee(e,t,n){return{animationName:e,animationDuration:t,animationTimingFunction:n,animationFillMode:"both"}}function te(e){return Object(_.a)({from:{transform:"translate3d("+e+"px,0,0)"},to:{transform:"translate3d(0,0,0)"}})}function ne(e){return Object(_.a)({from:{transform:"translate3d(0,"+e+"px,0)"},to:{transform:"translate3d(0,0,0)"}})}function oe(e){return Object(_.a)({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d("+e+"px,0,0)"}})}function re(e){return Object(_.a)({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d(0,"+e+"px,0)"}})}var ie,ae,se={themeDarker:"#004578",themeDark:"#005a9e",themeDarkAlt:"#106ebe",themePrimary:"#0078d4",themeSecondary:"#2b88d8",themeTertiary:"#71afe5",themeLight:"#c7e0f4",themeLighter:"#deecf9",themeLighterAlt:"#eff6fc",black:"#000000",blackTranslucent40:"rgba(0,0,0,.4)",neutralDark:"#212121",neutralPrimary:"#333333",neutralPrimaryAlt:"#3c3c3c",neutralSecondary:"#666666",neutralTertiary:"#a6a6a6",neutralTertiaryAlt:"#c8c8c8",neutralQuaternary:"#d0d0d0",neutralQuaternaryAlt:"#dadada",neutralLight:"#eaeaea",neutralLighter:"#f4f4f4",neutralLighterAlt:"#f8f8f8",accent:"#0078d4",white:"#ffffff",whiteTranslucent40:"rgba(255,255,255,.4)",yellow:"#ffb900",yellowLight:"#fff100",orange:"#d83b01",orangeLight:"#ea4300",orangeLighter:"#ff8c00",redDark:"#a80000",red:"#e81123",magentaDark:"#5c005c",magenta:"#b4009e",magentaLight:"#e3008c",purpleDark:"#32145a",purple:"#5c2d91",purpleLight:"#b4a0ff",blueDark:"#002050",blueMid:"#00188f",blue:"#0078d4",blueLight:"#00bcf2",tealDark:"#004b50",teal:"#008272",tealLight:"#00b294",greenDark:"#004b1c",green:"#107c10",greenLight:"#bad80a"},le="'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif";!function(e){e.Arabic="Segoe UI Web (Arabic)",e.Cyrillic="Segoe UI Web (Cyrillic)",e.EastEuropean="Segoe UI Web (East European)",e.Greek="Segoe UI Web (Greek)",e.Hebrew="Segoe UI Web (Hebrew)",e.Thai="Leelawadee UI Web",e.Vietnamese="Segoe UI Web (Vietnamese)",e.WestEuropean="Segoe UI Web (West European)",e.Selawik="Selawik Web"}(ie||(ie={})),function(e){e.Arabic="'"+ie.Arabic+"'",e.ChineseSimplified="'Microsoft Yahei UI', Verdana, Simsun",e.ChineseTraditional="'Microsoft Jhenghei UI', Pmingliu",e.Cyrillic="'"+ie.Cyrillic+"'",e.EastEuropean="'"+ie.EastEuropean+"'",e.Greek="'"+ie.Greek+"'",e.Hebrew="'"+ie.Hebrew+"'",e.Hindi="'Nirmala UI'",e.Japanese="'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka",e.Korean="'Malgun Gothic', Gulim",e.Selawik="'"+ie.Selawik+"'",e.Thai="'Leelawadee UI Web', 'Kmer UI'",e.Vietnamese="'"+ie.Vietnamese+"'",e.WestEuropean="'"+ie.WestEuropean+"'"}(ae||(ae={}));var ue,ce,de,pe="'Segoe UI', '"+ie.WestEuropean+"'",fe={ar:ae.Arabic,bg:ae.Cyrillic,cs:ae.EastEuropean,el:ae.Greek,et:ae.EastEuropean,he:ae.Hebrew,hi:ae.Hindi,hr:ae.EastEuropean,hu:ae.EastEuropean,ja:ae.Japanese,kk:ae.EastEuropean,ko:ae.Korean,lt:ae.EastEuropean,lv:ae.EastEuropean,pl:ae.EastEuropean,ru:ae.Cyrillic,sk:ae.EastEuropean,"sr-latn":ae.EastEuropean,th:ae.Thai,tr:ae.EastEuropean,uk:ae.Cyrillic,vi:ae.Vietnamese,"zh-hans":ae.ChineseSimplified,"zh-hant":ae.ChineseTraditional};function he(e){return e+", "+le}function me(e){var t=function(e){for(var t in fe)if(fe.hasOwnProperty(t)&&e&&0===t.indexOf(e))return fe[t];return pe}(e),n=he(t),o=n;return t===pe&&(o=he(ae.WestEuropean)),{tiny:ge(ue.mini,ce.semibold,n),xSmall:ge(ue.xSmall,ce.regular,n),small:ge(ue.small,ce.regular,n),smallPlus:ge(ue.smallPlus,ce.regular,n),medium:ge(ue.medium,ce.regular,n),mediumPlus:ge(ue.mediumPlus,ce.regular,n),large:ge(ue.large,ce.semilight,o),xLarge:ge(ue.xLarge,ce.light,n),xxLarge:ge(ue.xxLarge,ce.light,n),superLarge:ge(ue.superLarge,ce.light,n),mega:ge(ue.mega,ce.light,n)}}function ge(e,t,n){return{fontFamily:n,MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontSize:e,fontWeight:t}}!function(e){e.mini="10px",e.xSmall="11px",e.small="12px",e.smallPlus="13px",e.medium="14px",e.mediumPlus="15px",e.icon="16px",e.large="17px",e.xLarge="21px",e.xxLarge="28px",e.superLarge="42px",e.mega="72px"}(ue||(ue={})),function(e){e.light=100,e.semilight=300,e.regular=400,e.semibold=600,e.bold=700}(ce||(ce={})),function(e){e.xSmall="10px",e.small="12px",e.medium="16px",e.large="20px"}(de||(de={}));var _e=n(55),ve="https://static2.sharepointonline.com/files/fabric/assets",ye=me(Object(_e.a)());function be(e,t,n,o){e="'"+e+"'";var r=void 0!==o?"local('"+o+"'),":"";Object(l.a)({fontFamily:e,src:r+"url('"+t+".woff2') format('woff2'),url('"+t+".woff') format('woff')",fontWeight:n,fontStyle:"normal"})}function Ce(e,t,n,o,r){void 0===o&&(o="segoeui");var i=e+"/"+n+"/"+o;be(t,i+"-light",ce.light,r&&r+" Light"),be(t,i+"-semilight",ce.semilight,r&&r+" SemiLight"),be(t,i+"-regular",ce.regular,r),be(t,i+"-semibold",ce.semibold,r&&r+" SemiBold")}function Se(e){if(e){var t=e+"/fonts";Ce(t,ie.Thai,"leelawadeeui-thai","leelawadeeui"),Ce(t,ie.Arabic,"segoeui-arabic"),Ce(t,ie.Cyrillic,"segoeui-cyrillic"),Ce(t,ie.EastEuropean,"segoeui-easteuropean"),Ce(t,ie.Greek,"segoeui-greek"),Ce(t,ie.Hebrew,"segoeui-hebrew"),Ce(t,ie.Vietnamese,"segoeui-vietnamese"),Ce(t,ie.WestEuropean,"segoeui-westeuropean","segoeui","Segoe UI"),Ce(t,ae.Selawik,"selawik","selawik"),be("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-semilight",ce.light),be("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-bold",ce.semibold)}}Se(function(){var e="undefined"!=typeof window?window:void 0,t=e?e.FabricConfig:void 0;return t&&void 0!==t.fontBaseUrl?t.fontBaseUrl:ve}());var xe="@media screen and (-ms-high-contrast: active)";function Ee(e,t){return"@media only screen and (min-width: "+e+"px) and (max-width: "+t+"px)"}var ke,we=n(48);function Ie(e,t,n,o){return void 0===t&&(t=0),void 0===n&&(n="relative"),void 0===o&&(o=void 0),{outline:"transparent",position:n,selectors:(r={"::-moz-focus-inner":{border:"0"}},r["."+we.a+" &:focus:after"]={content:'""',position:"absolute",left:t+1,top:t+1,bottom:t+1,right:t+1,border:"1px solid "+e.palette.white,outline:"1px solid "+e.palette.neutralSecondary,zIndex:ke.FocusStyle,selectors:(i={},i[xe]=o,i)},r)};var r,i}function Te(){return{selectors:{"&::-moz-focus-inner":{border:0},"&":{outline:"transparent"}}}}!function(e){e.Nav=1,e.ScrollablePane=1,e.FocusStyle=1,e.Coachmark=1e3,e.Layer=1e6,e.KeytipLayer=1000001}(ke||(ke={}));var Me={position:"absolute",width:1,height:1,margin:-1,padding:0,border:0,overflow:"hidden"},Pe="14s",De="2s",Oe="1";function Fe(e,t){return{borderColor:e,borderWidth:"0px",width:t,height:t}}function Re(e){return{opacity:1,borderWidth:e}}function Ae(e,t){return{borderWidth:"0",width:t,height:t,opacity:0,borderColor:e}}function Le(e,t){return i.__assign({},Fe(e,t),{opacity:0})}var Ne={continuousPulseAnimationDouble:function(e,t,n,o,r){return Object(_.a)({"0%":Fe(e,n),"1.42%":Re(r),"3.57%":{opacity:1},"7.14%":Ae(t,o),"8%":Le(e,n),"29.99%":Le(e,n),"30%":Fe(e,n),"31.42%":Re(r),"33.57%":{opacity:1},"37.14%":Ae(t,o),"38%":Le(e,n),"79.42%":Le(e,n),79.43:Fe(e,n),81.85:Re(r),83.42:{opacity:1},"87%":Ae(t,o),"100%":{}})},continuousPulseAnimationSingle:function(e,t,n,o,r){return Object(_.a)({"0%":Fe(e,n),"14.2%":Re(r),"35.7%":{opacity:1},"71.4%":Ae(t,o),"100%":{}})},createDefaultAnimation:function(e){return{animationName:e,animationIterationCount:Oe,animationDuration:Pe,animationDelay:De}}};function Be(e,t){return t.disableGlobalClassNames?{}:e}var Ue,je=n(47),We=n(28),He={palette:se,semanticColors:Xe(se,!1,!1),fonts:ye,isInverted:!1,disableGlobalClassNames:!1},ze=[],Ke="theme";if(!je.a.getSettings([Ke]).theme){var Ve="undefined"!=typeof window?window:void 0;Ve&&Ve.FabricConfig&&Ve.FabricConfig.theme&&(He=Ye(Ve.FabricConfig.theme)),je.a.applySettings(((Ue={})[Ke]=He,Ue))}function Ge(e){return void 0===e&&(e=!1),!0===e&&(He=Ye({},e)),He}function qe(e){-1===ze.indexOf(e)&&ze.push(e)}function Ze(e){var t=ze.indexOf(e);-1!==t&&ze.splice(t,1)}function $e(e,t){return void 0===t&&(t=!1),He=Ye(e,t),Object(We.loadTheme)(i.__assign({},He.palette,He.semanticColors)),je.a.applySettings(((n={})[Ke]=He,n)),ze.forEach(function(e){try{e(He)}catch(e){}}),He;var n}function Ye(e,t){void 0===t&&(t=!1);var n=i.__assign({},se,e.palette);e.palette&&e.palette.accent||(n.accent=n.themePrimary);var o=i.__assign({},Xe(n,!!e.isInverted,t),e.semanticColors);return{palette:n,fonts:i.__assign({},ye,e.fonts),semanticColors:o,isInverted:!!e.isInverted,disableGlobalClassNames:!!e.disableGlobalClassNames}}function Xe(e,t,n){return function(e,t){var n="";!0===t&&(n=" /* @deprecated */");return e.listTextColor=e.listText+n,e.menuItemBackgroundChecked+=n,e}({bodyBackground:e.white,bodyFrameBackground:e.white,bodyText:e.neutralPrimary,bodyTextChecked:e.black,bodySubtext:e.neutralSecondary,bodyDivider:e.neutralTertiaryAlt,disabledBackground:e.neutralLighter,disabledText:e.neutralTertiary,disabledBodyText:e.neutralTertiaryAlt,disabledSubtext:e.neutralQuaternary,focusBorder:e.black,errorText:t?"#ff5f5f":e.redDark,warningText:t?"#ffffff":"#333333",errorBackground:t?"rgba(232, 17, 35, .5)":"rgba(232, 17, 35, .2)",blockingBackground:t?"rgba(234, 67, 0, .5)":"rgba(234, 67, 0, .2)",warningBackground:t?"rgba(255, 251, 0, .6)":"rgba(255, 185, 0, .2)",warningHighlight:t?"#fff100":"#ffb900",successBackground:t?"rgba(186, 216, 10, .4)":"rgba(186, 216, 10, .2)",inputBorder:e.neutralTertiary,inputBorderHovered:e.neutralDark,inputBackground:e.white,inputBackgroundChecked:e.themePrimary,inputBackgroundCheckedHovered:e.themeDarkAlt,inputForegroundChecked:e.white,inputFocusBorderAlt:e.themePrimary,smallInputBorder:e.neutralSecondary,inputPlaceholderText:e.neutralSecondary,buttonBackground:e.neutralLighter,buttonBackgroundChecked:e.neutralTertiaryAlt,buttonBackgroundHovered:e.neutralLight,buttonBackgroundCheckedHovered:e.neutralLight,buttonBorder:"transparent",buttonText:e.neutralPrimary,buttonTextHovered:e.black,buttonTextChecked:e.neutralDark,buttonTextCheckedHovered:e.black,menuItemBackgroundHovered:e.neutralLighter,menuIcon:e.themePrimary,menuHeader:e.themePrimary,listBackground:e.white,listText:e.neutralPrimary,listItemBackgroundHovered:e.neutralLighter,listItemBackgroundChecked:e.neutralLight,listItemBackgroundCheckedHovered:e.neutralQuaternaryAlt,listHeaderBackgroundHovered:e.neutralLighter,listHeaderBackgroundPressed:e.neutralLight,link:e.themePrimary,linkHovered:e.themeDarker,listTextColor:"",menuItemBackgroundChecked:e.neutralLight},n)}var Qe={boxShadow:"none",margin:0,padding:0,boxSizing:"border-box"},Je={overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},et=r(J),tt=r(ye),nt={};for(var ot in se)se.hasOwnProperty(ot)&&(rt(nt,ot,"",!1,"color"),rt(nt,ot,"Hover",!0,"color"),rt(nt,ot,"Background",!1,"background"),rt(nt,ot,"BackgroundHover",!0,"background"),rt(nt,ot,"Border",!1,"borderColor"),rt(nt,ot,"BorderHover",!0,"borderColor"));function rt(e,t,n,o,r){Object.defineProperty(e,t+n,{get:function(){var e,n=((e={})[r]=Ge().palette[t],e);return Object(u.a)(o?{selectors:{":hover":n}}:n).toString()},enumerable:!0,configurable:!0})}n.d(t,"AnimationClassNames",function(){return et}),n.d(t,"FontClassNames",function(){return tt}),n.d(t,"ColorClassNames",function(){return nt}),n.d(t,"AnimationStyles",function(){return J}),n.d(t,"AnimationVariables",function(){return Q}),n.d(t,"DefaultPalette",function(){return se}),n.d(t,"DefaultFontStyles",function(){return ye}),n.d(t,"registerDefaultFontFaces",function(){return Se}),n.d(t,"FontSizes",function(){return ue}),n.d(t,"FontWeights",function(){return ce}),n.d(t,"IconFontSizes",function(){return de}),n.d(t,"createFontStyles",function(){return me}),n.d(t,"getFocusStyle",function(){return Ie}),n.d(t,"focusClear",function(){return Te}),n.d(t,"hiddenContentStyle",function(){return Me}),n.d(t,"PulsingBeaconAnimationStyles",function(){return Ne}),n.d(t,"getGlobalClassNames",function(){return Be}),n.d(t,"ThemeSettingName",function(){return Ke}),n.d(t,"getTheme",function(){return Ge}),n.d(t,"loadTheme",function(){return $e}),n.d(t,"createTheme",function(){return Ye}),n.d(t,"registerOnThemeChangeCallback",function(){return qe}),n.d(t,"removeOnThemeChangeCallback",function(){return Ze}),n.d(t,"HighContrastSelector",function(){return xe}),n.d(t,"ScreenWidthMinSmall",function(){return 320}),n.d(t,"ScreenWidthMinMedium",function(){return 480}),n.d(t,"ScreenWidthMinLarge",function(){return 640}),n.d(t,"ScreenWidthMinXLarge",function(){return 1024}),n.d(t,"ScreenWidthMinXXLarge",function(){return 1366}),n.d(t,"ScreenWidthMinXXXLarge",function(){return 1920}),n.d(t,"ScreenWidthMaxSmall",function(){return 479}),n.d(t,"ScreenWidthMaxMedium",function(){return 639}),n.d(t,"ScreenWidthMaxLarge",function(){return 1023}),n.d(t,"ScreenWidthMaxXLarge",function(){return 1365}),n.d(t,"ScreenWidthMaxXXLarge",function(){return 1919}),n.d(t,"getScreenSelector",function(){return Ee}),n.d(t,"normalize",function(){return Qe}),n.d(t,"noWrap",function(){return Je}),n.d(t,"ZIndexes",function(){return ke}),n.d(t,"buildClassMap",function(){return r}),n.d(t,"getIcon",function(){return f}),n.d(t,"registerIcons",function(){return d}),n.d(t,"registerIconAlias",function(){return p}),n.d(t,"setIconOptions",function(){return h}),n.d(t,"getIconClassName",function(){return g}),n.d(t,"InjectionMode",function(){return o.a}),n.d(t,"Stylesheet",function(){return o.b}),n.d(t,"concatStyleSets",function(){return o.c}),n.d(t,"fontFace",function(){return o.d}),n.d(t,"keyframes",function(){return o.e}),n.d(t,"mergeStyleSets",function(){return o.f}),n.d(t,"mergeStyles",function(){return o.g})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),r={root:"ms-Dialog"};t.getStyles=function(e){var t,n=e.className,i=e.containerClassName,a=e.dialogDefaultMinWidth,s=void 0===a?"288px":a,l=e.dialogDefaultMaxWidth,u=void 0===l?"340px":l,c=e.hidden,d=e.theme;return{root:[o.getGlobalClassNames(r,d).root,n],main:[{width:s,selectors:(t={},t["@media (min-width: "+o.ScreenWidthMinMedium+"px)"]={width:"auto",maxWidth:u,minWidth:s},t)},!c&&{display:"flex"},i]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),r={contentLgHeader:"ms-Dialog-lgHeader",close:"ms-Dialog--close",subText:"ms-Dialog-subText",header:"ms-Dialog-header",headerLg:"ms-Dialog--lgHeader",button:"ms-Dialog-button ms-Dialog-button--close",inner:"ms-Dialog-inner",content:"ms-Dialog-content",title:"ms-Dialog-title"};t.getStyles=function(e){var t=e.className,n=e.theme,i=e.isLargeHeader,a=e.isClose,s=e.hidden,l=e.isMultiline,u=n.palette,c=n.fonts,d=o.getGlobalClassNames(r,n);return{content:[i&&d.contentLgHeader,a&&d.close,{flexGrow:1},t],subText:[d.subText,i?c.medium:c.small,{margin:"0 0 20px 0",paddingTop:"8px",color:u.neutralPrimary,lineHeight:"1.5",wordWrap:"break-word",fontWeight:o.FontWeights.semilight}],header:[d.header,{position:"relative",width:"100%",boxSizing:"border-box"},i&&[d.headerLg,{backgroundColor:u.themePrimary}],a&&d.close],button:[d.button,s&&{selectors:{".ms-Icon.ms-Icon--Cancel":{color:u.neutralSecondary,fontSize:"16px"}}}],inner:[d.inner,{padding:l?"0 20px 20px":"0 28px 20px"}],innerContent:[d.content,{position:"relative",width:"100%",selectors:{".ms-Button.ms-Button--compount":{marginBottom:"20px",selectors:{"&:last-child":{marginBottom:"0"}}}}},t],title:[d.title,{color:u.neutralPrimary,margin:"0",padding:"20px 36px 20px 28px"},c.xLarge,i&&[{color:u.white,marginBottom:"8px",padding:"26px 28px 28px"},c.xxLarge],l&&c.xxLarge],topButton:[{display:"flex",flexDirection:"row",flexWrap:"nowrap",position:"absolute",top:"0",right:"0",padding:"12px 12px 0 0",selectors:{"> *":{flex:"0 0 auto"}}}]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),r={actions:"ms-Dialog-actions",action:"ms-Dialog-action",actionsRight:"ms-Dialog-actionsRight"};t.getStyles=function(e){var t=e.className,n=e.theme,i=o.getGlobalClassNames(r,n);return{actions:[i.actions,{position:"relative",width:"100%",minHeight:"24px",lineHeight:"24px",margin:"20px 0 0",fontSize:"0",selectors:{".ms-Button":{lineHeight:"normal"}}},t],action:[i.action],actionsRight:[i.actionsRight,{textAlign:"right",marginRight:"-4px",fontSize:"0",selectors:{$action:{margin:"0 4px"}}}]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(28).loadStyles([{rawString:".root_40cbea6c{background-color:transparent;position:fixed;height:100%;width:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;opacity:0;pointer-events:none;-webkit-transition:opacity .267s;transition:opacity .267s}.root_40cbea6c .ms-Button.ms-Button--compound{display:block}[dir='ltr'] .root_40cbea6c .ms-Button.ms-Button--compound{margin-left:0}[dir='rtl'] .root_40cbea6c .ms-Button.ms-Button--compound{margin-right:0}@media screen and (-ms-high-contrast: active){.root_40cbea6c .ms-Overlay{opacity:0}}.rootIsVisible_40cbea6c{opacity:1;pointer-events:auto}.main_40cbea6c{background-color:"},{theme:"white",defaultValue:"#ffffff"},{rawString:";-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;outline:3px solid transparent;max-height:100%;overflow-y:auto}[dir='ltr'] .main_40cbea6c{-webkit-box-shadow:0 0 5px 0 rgba(0,0,0,0.4);box-shadow:0 0 5px 0 rgba(0,0,0,0.4)}[dir='rtl'] .main_40cbea6c{-webkit-box-shadow:0 0 5px 0 rgba(0,0,0,0.4);box-shadow:0 0 5px 0 rgba(0,0,0,0.4)}[dir='ltr'] .main_40cbea6c{text-align:left}[dir='rtl'] .main_40cbea6c{text-align:right}\n"}]),t.duration=".267s",t.root="root_40cbea6c",t.rootIsVisible="rootIsVisible_40cbea6c",t.main="main_40cbea6c"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),r={root:"ms-Overlay",rootDark:"ms-Overlay--dark"};t.getStyles=function(e){var t,n=e.className,i=e.theme,a=e.isNone,s=e.isDark,l=i.palette,u=o.getGlobalClassNames(r,i);return{root:[u.root,{backgroundColor:l.whiteTranslucent40,top:0,right:0,bottom:0,left:0,position:"absolute",selectors:(t={},t[o.HighContrastSelector]={border:"1px solid WindowText"},t)},a&&{visibility:"hidden"},s&&[u.rootDark,{backgroundColor:l.blackTranslucent40}],n]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(66),i=n(128);t.Overlay=o.styled(r.OverlayBase,i.getStyles)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0);o.__exportStar(n(129),t),o.__exportStar(n(66),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(130),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._root=i.createRef(),t._isInFocusStack=!1,t._isInClickStack=!1,t._onKeyboardHandler=function(e){if(t.props.onKeyDown&&t.props.onKeyDown(e),!e.isDefaultPrevented()&&9===e.which&&t._root.current){var n=i.getFirstFocusable(t._root.current,t._root.current.firstChild,!0),o=i.getLastTabbable(t._root.current,t._root.current.lastChild,!0);e.shiftKey&&n===e.target?(i.focusAsync(o),e.preventDefault(),e.stopPropagation()):e.shiftKey||o!==e.target||(i.focusAsync(n),e.preventDefault(),e.stopPropagation())}},t}return o.__extends(t,e),t.prototype.componentWillMount=function(){var e=this.props,n=e.isClickableOutsideFocusTrap,o=void 0!==n&&n,r=e.forceFocusInsideTrap;(void 0===r||r)&&(this._isInFocusStack=!0,t._focusStack.push(this)),o||(this._isInClickStack=!0,t._clickStack.push(this))},t.prototype.componentDidMount=function(){var e=this.props,t=e.isClickableOutsideFocusTrap,n=void 0!==t&&t,o=e.forceFocusInsideTrap,r=void 0===o||o,a=e.elementToFocusOnDismiss,s=e.disableFirstFocus,l=void 0!==s&&s;this._previouslyFocusedElement=a||document.activeElement,i.elementContains(this._root.current,this._previouslyFocusedElement)||l||this.focus(),r&&this._events.on(window,"focus",this._forceFocusInTrap,!0),n||this._events.on(window,"click",this._forceClickInTrap,!0)},t.prototype.componentWillReceiveProps=function(e){var t=e.elementToFocusOnDismiss;t&&this._previouslyFocusedElement!==t&&(this._previouslyFocusedElement=t)},t.prototype.componentWillUnmount=function(){var e=this,n=this.props.ignoreExternalFocusing;if(this._events.dispose(),this._isInFocusStack||this._isInClickStack){var o=function(t){return e!==t};this._isInFocusStack&&(t._focusStack=t._focusStack.filter(o)),this._isInClickStack&&(t._clickStack=t._clickStack.filter(o))}var r=document.activeElement;n||!this._previouslyFocusedElement||"function"!=typeof this._previouslyFocusedElement.focus||!i.elementContains(this._root.value,r)&&r!==document.body||i.focusAsync(this._previouslyFocusedElement)},t.prototype.render=function(){var e=this.props,t=e.className,n=e.ariaLabelledBy,a=i.getNativeProps(this.props,i.divProperties);return r.createElement("div",o.__assign({},a,{className:t,ref:this._root,"aria-labelledby":n,onKeyDown:this._onKeyboardHandler}),this.props.children)},t.prototype.focus=function(){var e,t=this.props.firstFocusableSelector,n="string"==typeof t?t:t&&t();this._root.current&&(e=n?this._root.current.querySelector("."+n):i.getNextElement(this._root.current,this._root.current.firstChild,!0,!1,!1,!0)),e&&i.focusAsync(e)},t.prototype._forceFocusInTrap=function(e){if(t._focusStack.length&&this===t._focusStack[t._focusStack.length-1]){var n=document.activeElement;i.elementContains(this._root.current,n)||(this.focus(),e.preventDefault(),e.stopPropagation())}},t.prototype._forceClickInTrap=function(e){if(t._clickStack.length&&this===t._clickStack[t._clickStack.length-1]){var n=e.target;n&&!i.elementContains(this._root.current,n)&&(this.focus(),e.preventDefault(),e.stopPropagation())}},t._focusStack=[],t._clickStack=[],t}(i.BaseComponent);t.FocusTrapZone=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(132),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=n(133),s=n(131),l=n(81),u=n(82),c=n(32),d=n(127),p=function(e){function t(t){var n=e.call(this,t)||this;return n._focusTrapZone=i.createRef(),n.state={id:i.getId("Modal"),isOpen:t.isOpen,isVisible:t.isOpen},n}return o.__extends(t,e),t.prototype.componentWillReceiveProps=function(e){clearTimeout(this._onModalCloseTimer),e.isOpen&&(this.state.isOpen?this.setState({isVisible:!0}):this.setState({isOpen:!0})),!e.isOpen&&this.state.isOpen&&(this._onModalCloseTimer=this._async.setTimeout(this._onModalClose,1e3*parseFloat(d.duration)),this.setState({isVisible:!1}))},t.prototype.componentDidUpdate=function(e,t){e.isOpen||t.isVisible||this.setState({isVisible:!0})},t.prototype.render=function(){var e=this.props,t=e.elementToFocusOnDismiss,n=e.firstFocusableSelector,o=e.forceFocusInsideTrap,p=e.ignoreExternalFocusing,f=e.isBlocking,h=e.isClickableOutsideFocusTrap,m=e.isDarkOverlay,g=e.onDismiss,_=e.onLayerDidMount,v=e.responsiveMode,y=e.titleAriaId,b=e.subtitleAriaId,C=this.state,S=C.isOpen,x=C.isVisible,E=i.css("ms-Modal",d.root,this.props.className,!!S&&"is-open",!!x&&d.rootIsVisible);return S&&v>=c.ResponsiveMode.small?r.createElement(l.Layer,{onLayerDidMount:_},r.createElement(u.Popup,{role:f?"alertdialog":"dialog",ariaLabelledBy:y,ariaDescribedBy:b,onDismiss:g},r.createElement("div",{className:E},r.createElement(s.Overlay,{isDarkThemed:m,onClick:f?void 0:g}),r.createElement(a.FocusTrapZone,{componentRef:this._focusTrapZone,className:i.css("ms-Dialog-main",d.main,this.props.containerClassName),elementToFocusOnDismiss:t,isClickableOutsideFocusTrap:h||!f,ignoreExternalFocusing:p,forceFocusInsideTrap:o,firstFocusableSelector:n},this.props.children)))):null},t.prototype.focus=function(){this._focusTrapZone.current&&this._focusTrapZone.current.focus()},t.prototype._onModalClose=function(){this.setState({isOpen:!1}),this.props.onDismissed&&this.props.onDismissed()},t.defaultProps={isOpen:!1,isDarkOverlay:!0,isBlocking:!1,className:"",containerClassName:""},t=o.__decorate([c.withResponsiveMode],t)}(i.BaseComponent);t.Modal=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(67),t);var o=n(67);t.default=o.Modal},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(68),i=n(124);t.Dialog=o.styled(r.DialogBase,i.getStyles)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_MASK_FORMAT_CHARS={9:/[0-9]/,a:/[a-zA-Z]/,"*":/[a-zA-Z0-9]/},t.parseMask=function(e,n){if(void 0===n&&(n=t.DEFAULT_MASK_FORMAT_CHARS),!e)return[];for(var o=[],r=0,i=0;i+r<e.length;i++){var a=e.charAt(i+r);if("\\"===a)r++;else{var s=n[a];s&&o.push({displayIndex:i,format:s})}}return o},t.getMaskDisplay=function(e,t,n){var o=e;if(!o)return"";o=o.replace(/\\/g,"");var r=0;t.length>0&&(r=t[0].displayIndex-1);for(var i=0,a=t;i<a.length;i++){var s=a[i],l=" ";s.value?(l=s.value,s.displayIndex>r&&(r=s.displayIndex)):n&&(l=n),o=o.slice(0,s.displayIndex)+l+o.slice(s.displayIndex+1)}return n||(o=o.slice(0,r+1)),o},t.getRightFormatIndex=function(e,t){for(var n=0;n<e.length;n++)if(e[n].displayIndex>=t)return e[n].displayIndex;return e[e.length-1].displayIndex},t.getLeftFormatIndex=function(e,t){for(var n=e.length-1;n>=0;n--)if(e[n].displayIndex<t)return e[n].displayIndex;return e[0].displayIndex},t.clearRange=function(e,t,n){for(var o=0;o<e.length;o++)if(e[o].displayIndex>=t){if(e[o].displayIndex>=t+n)break;e[o].value=void 0}return e},t.clearNext=function(e,t){for(var n=0;n<e.length;n++)if(e[n].displayIndex>=t){e[n].value=void 0;break}return e},t.clearPrev=function(e,t){for(var n=e.length-1;n>=0;n--)if(e[n].displayIndex<t){e[n].value=void 0;break}return e},t.insertString=function(e,t,n){for(var o=0,r=0,i=0;i<e.length&&o<n.length;i++)if(e[i].displayIndex>=t)for(r=e[i].displayIndex;o<n.length;){if(e[i].format.test(n.charAt(o))){e[i].value=n.charAt(o++),i+1<e.length?r=e[i+1].displayIndex:r++;break}o++}return r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(0),i=n(1),a=n(73),s=n(2),l=n(137);t.DEFAULT_MASK_CHAR="_",function(e){e[e.default=0]="default",e[e.backspace=1]="backspace",e[e.delete=2]="delete",e[e.textPasted=3]="textPasted"}(o||(o={}));var u=function(e){function n(t){var n=e.call(this,t)||this;return n._shouldUpdateComponentRef=!1,n._maskCharData=l.parseMask(t.mask,t.maskFormat),t.value&&n.setValue(t.value),n._isFocused=!1,n._moveCursorOnMouseUp=!1,n.state={displayValue:l.getMaskDisplay(t.mask,n._maskCharData,t.maskChar)},n}return r.__extends(n,e),n.prototype.componentWillReceiveProps=function(e){e.mask!==this.props.mask&&(this._maskCharData=l.parseMask(e.mask,e.maskFormat),this.state={displayValue:l.getMaskDisplay(e.mask,this._maskCharData,e.maskChar)})},n.prototype.componentDidUpdate=function(){this.state.maskCursorPosition&&this._textField.setSelectionRange(this.state.maskCursorPosition,this.state.maskCursorPosition)},n.prototype.render=function(){return i.createElement(a.TextField,r.__assign({},this.props,{onFocus:this._onFocus,onBlur:this._onBlur,onMouseDown:this._onMouseDown,onMouseUp:this._onMouseUp,onChanged:this._onInputChange,onBeforeChange:this._onBeforeChange,onKeyDown:this._onKeyDown,onPaste:this._onPaste,value:this.state.displayValue,ref:this._resolveRef("_textField")}))},Object.defineProperty(n.prototype,"value",{get:function(){for(var e="",t=0;t<this._maskCharData.length;t++){if(!this._maskCharData[t].value)return;e+=this._maskCharData[t].value}return e},enumerable:!0,configurable:!0}),n.prototype.setValue=function(e){for(var t=0,n=0;t<e.length&&n<this._maskCharData.length;){var o=e[t];this._maskCharData[n].format.test(o)&&(this._maskCharData[n].value=o,n++),t++}},n.prototype.focus=function(){this._textField&&this._textField.focus()},n.prototype.select=function(){this._textField&&this._textField.select()},n.prototype.setSelectionStart=function(e){this._textField&&this._textField.setSelectionStart(e)},n.prototype.setSelectionEnd=function(e){this._textField&&this._textField.setSelectionEnd(e)},n.prototype.setSelectionRange=function(e,t){this._textField&&this._textField.setSelectionRange(e,t)},Object.defineProperty(n.prototype,"selectionStart",{get:function(){return this._textField&&null!==this._textField.selectionStart?this._textField.selectionStart:-1},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"selectionEnd",{get:function(){return this._textField&&this._textField.selectionEnd?this._textField.selectionEnd:-1},enumerable:!0,configurable:!0}),n.prototype._onFocus=function(e){this.props.onFocus&&this.props.onFocus(e),this._isFocused=!0;for(var t=0;t<this._maskCharData.length;t++)if(!this._maskCharData[t].value){this.setState({maskCursorPosition:this._maskCharData[t].displayIndex});break}},n.prototype._onBlur=function(e){this.props.onBlur&&this.props.onBlur(e),this._isFocused=!1,this._moveCursorOnMouseUp=!0},n.prototype._onMouseDown=function(e){this.props.onMouseDown&&this.props.onMouseDown(e),this._isFocused||(this._moveCursorOnMouseUp=!0)},n.prototype._onMouseUp=function(e){if(this.props.onMouseUp&&this.props.onMouseUp(e),this._moveCursorOnMouseUp){this._moveCursorOnMouseUp=!1;for(var t=0;t<this._maskCharData.length;t++)if(!this._maskCharData[t].value){this.setState({maskCursorPosition:this._maskCharData[t].displayIndex});break}}},n.prototype._onBeforeChange=function(e){this.props.onBeforeChange&&this.props.onBeforeChange(e),null===this._changeSelectionData&&(this._changeSelectionData={changeType:o.default,selectionStart:null!==this._textField.selectionStart?this._textField.selectionStart:-1,selectionEnd:null!==this._textField.selectionEnd?this._textField.selectionEnd:-1})},n.prototype._onInputChange=function(e){if(this.props.onChanged&&this.props.onChanged(e),this._changeSelectionData){var t=this.state.displayValue,n=0,r=this._changeSelectionData,i=r.changeType,a=r.selectionStart,s=r.selectionEnd;if(i===o.textPasted){var u=s-a,c=e.length+u-t.length,d=a,p=e.substr(d,c);u&&(this._maskCharData=l.clearRange(this._maskCharData,a,u)),n=l.insertString(this._maskCharData,d,p)}else if(i===o.delete||i===o.backspace){var f=i===o.delete;(c=s-a)?(this._maskCharData=l.clearRange(this._maskCharData,a,c),n=l.getRightFormatIndex(this._maskCharData,a)):f?(this._maskCharData=l.clearNext(this._maskCharData,a),n=l.getRightFormatIndex(this._maskCharData,a)):(this._maskCharData=l.clearPrev(this._maskCharData,a),n=l.getLeftFormatIndex(this._maskCharData,a))}else if(e.length>t.length){d=s-(c=e.length-t.length);var h=e.substr(d,c);n=l.insertString(this._maskCharData,d,h)}else if(e.length<=t.length){c=1;var m=t.length+c-e.length;d=s-c,h=e.substr(d,c);this._maskCharData=l.clearRange(this._maskCharData,d,m),n=l.insertString(this._maskCharData,d,h)}this._changeSelectionData=null,this.setState({displayValue:l.getMaskDisplay(this.props.mask,this._maskCharData,this.props.maskChar),maskCursorPosition:n})}},n.prototype._onKeyDown=function(e){if(this.props.onKeyDown&&this.props.onKeyDown(e),this._changeSelectionData=null,this._textField.value){var t=e.keyCode,n=e.ctrlKey,r=e.metaKey;if(n||r)return;if(8===t||46===t){var i=e.target.selectionStart,a=e.target.selectionEnd;if(!(8===t&&a&&a>0||46===t&&null!==i&&i<this._textField.value.length))return;this._changeSelectionData={changeType:8===t?o.backspace:o.delete,selectionStart:null!==i?i:-1,selectionEnd:null!==a?a:-1}}}},n.prototype._onPaste=function(e){this.props.onPaste&&this.props.onPaste(e);var t=e.target.selectionStart,n=e.target.selectionEnd;this._changeSelectionData={changeType:o.textPasted,selectionStart:null!==t?t:-1,selectionEnd:null!==n?n:-1}},n.defaultProps={maskChar:t.DEFAULT_MASK_CHAR,maskFormat:l.DEFAULT_MASK_FORMAT_CHARS},r.__decorate([s.autobind],n.prototype,"_onFocus",null),r.__decorate([s.autobind],n.prototype,"_onBlur",null),r.__decorate([s.autobind],n.prototype,"_onMouseDown",null),r.__decorate([s.autobind],n.prototype,"_onMouseUp",null),r.__decorate([s.autobind],n.prototype,"_onBeforeChange",null),r.__decorate([s.autobind],n.prototype,"_onInputChange",null),r.__decorate([s.autobind],n.prototype,"_onKeyDown",null),r.__decorate([s.autobind],n.prototype,"_onPaste",null),n}(s.BaseComponent);t.MaskedTextField=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(28).loadStyles([{rawString:".root_df60a678{-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-shadow:none;box-shadow:none;margin:0;padding:0;position:relative}.screenReaderOnly_df60a678{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.fieldGroup_df60a678{-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-shadow:none;box-shadow:none;margin:0;padding:0;border:1px solid "},{theme:"inputBorder",defaultValue:"#a6a6a6"},{rawString:";background:"},{theme:"inputBackground",defaultValue:"#ffffff"},{rawString:";height:32px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;position:relative}.fieldGroup_df60a678:hover{border-color:"},{theme:"inputBorderHovered",defaultValue:"#212121"},{rawString:"}.fieldGroup_df60a678.fieldGroupIsFocused_df60a678{border-color:"},{theme:"inputFocusBorderAlt",defaultValue:"#0078d4"},{rawString:"}@media screen and (-ms-high-contrast: active){.fieldGroup_df60a678.fieldGroupIsFocused_df60a678{border-width:2px}.fieldGroup_df60a678.fieldGroupIsFocused_df60a678 .field_df60a678{padding:0 11px 0 11px}[dir='rtl'] .fieldGroup_df60a678.fieldGroupIsFocused_df60a678 .field_df60a678{padding:0 11px 0 11px}}.fieldGroup_df60a678.fieldGroupIsFocused_df60a678.invalid_df60a678{border-color:"},{theme:"errorText",defaultValue:"#a80000"},{rawString:"}.rootIsDisabled_df60a678 .fieldGroup_df60a678{background-color:"},{theme:"disabledBackground",defaultValue:"#f4f4f4"},{rawString:";border-color:"},{theme:"disabledBackground",defaultValue:"#f4f4f4"},{rawString:"}@media screen and (-ms-high-contrast: active){.fieldGroup_df60a678:hover,.fieldGroup_df60a678.fieldGroupIsFocused_df60a678{border-color:Highlight}}.fieldGroup_df60a678::-ms-clear{display:none}.fieldGroup_df60a678 :-ms-input-placeholder,.fieldGroup_df60a678 :-ms-input-placeholder{color:"},{theme:"inputPlaceholderText",defaultValue:"#666666"},{rawString:";opacity:1}.fieldGroup_df60a678 ::-ms-input-placeholder,.fieldGroup_df60a678 :-ms-input-placeholder{color:"},{theme:"inputPlaceholderText",defaultValue:"#666666"},{rawString:";opacity:1}.fieldGroup :-ms-input-placeholder,.fieldGroup :-ms-input-placeholder{color:"},{theme:"inputPlaceholderText",defaultValue:"#666666"},{rawString:";opacity:1}.fieldGroup ::-ms-input-placeholder,.fieldGroup :-ms-input-placeholder{color:"},{theme:"inputPlaceholderText",defaultValue:"#666666"},{rawString:";opacity:1}.fieldGroup_df60a678 ::placeholder,.fieldGroup_df60a678 :-ms-input-placeholder{color:"},{theme:"inputPlaceholderText",defaultValue:"#666666"},{rawString:";opacity:1}.root_df60a678.rootIsDisabled_df60a678 .field{background-color:"},{theme:"disabledBackground",defaultValue:"#f4f4f4"},{rawString:";border-color:"},{theme:"disabledBackground",defaultValue:"#f4f4f4"},{rawString:"}.fieldPrefixSuffix_df60a678{-webkit-box-align:center;-ms-flex-align:center;align-items:center;background:"},{theme:"neutralLighter",defaultValue:"#f4f4f4"},{rawString:";color:"},{theme:"neutralSecondary",defaultValue:"#666666"},{rawString:";display:-webkit-box;display:-ms-flexbox;display:flex;line-height:1;padding:0 10px;white-space:nowrap}.field_df60a678{-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-shadow:none;box-shadow:none;margin:0;padding:0;font-size:14px;border-radius:0;border:none;background:none;background-color:transparent;color:"},{theme:"bodyText",defaultValue:"#333333"},{rawString:";padding:0 12px 0 12px;width:100%;min-width:0;text-overflow:ellipsis;outline:0}[dir='rtl'] .field_df60a678{padding:0 12px 0 12px}.field_df60a678:active,.field_df60a678:focus,.field_df60a678:hover{outline:0}[dir='ltr'] .field_df60a678.hasIcon_df60a678{padding-right:24px}[dir='rtl'] .field_df60a678.hasIcon_df60a678{padding-left:24px}.field_df60a678[disabled]{background-color:transparent;border-color:transparent}.field_df60a678 .field_df60a678::-webkit-input-placeholder{color:"},{theme:"disabledText",defaultValue:"#a6a6a6"},{rawString:"}.field_df60a678 .field_df60a678:-ms-input-placeholder{color:"},{theme:"disabledText",defaultValue:"#a6a6a6"},{rawString:"}.field_df60a678 .field_df60a678::-ms-input-placeholder{color:"},{theme:"disabledText",defaultValue:"#a6a6a6"},{rawString:"}.field .field::-webkit-input-placeholder{color:"},{theme:"disabledText",defaultValue:"#a6a6a6"},{rawString:"}.field .field:-ms-input-placeholder{color:"},{theme:"disabledText",defaultValue:"#a6a6a6"},{rawString:"}.field .field::-ms-input-placeholder{color:"},{theme:"disabledText",defaultValue:"#a6a6a6"},{rawString:"}.field_df60a678 .field_df60a678::placeholder{color:"},{theme:"disabledText",defaultValue:"#a6a6a6"},{rawString:"}.root_df60a678.rootIsRequiredLabel_df60a678 .ms-Label::after{content:' *';color:"},{theme:"error",defaultValue:"#a80000"},{rawString:"}.root_df60a678.rootIsRequiredPlaceholderOnly_df60a678 .ms-TextField-fieldGroup::after{content:'*';color:"},{theme:"error",defaultValue:"#a80000"},{rawString:";position:absolute;top:-5px}[dir='ltr'] .root_df60a678.rootIsRequiredPlaceholderOnly_df60a678 .ms-TextField-fieldGroup::after{right:-10px}[dir='rtl'] .root_df60a678.rootIsRequiredPlaceholderOnly_df60a678 .ms-TextField-fieldGroup::after{left:-10px}.root_df60a678.rootIsActive_df60a678{border-color:"},{theme:"inputFocusBorderAlt",defaultValue:"#0078d4"},{rawString:"}@media screen and (-ms-high-contrast: active){.root_df60a678.rootIsActive_df60a678{border-width:2px}.root_df60a678.rootIsActive_df60a678 .field_df60a678{padding:0 11px 0 11px}[dir='rtl'] .root_df60a678.rootIsActive_df60a678 .field_df60a678{padding:0 11px 0 11px}}.icon_df60a678{pointer-events:none;position:absolute;bottom:5px;top:auto;font-size:16px;line-height:18px}html[dir='ltr'] .icon_df60a678{right:8px}html[dir='rtl'] .icon_df60a678{left:8px}.description_df60a678{color:"},{theme:"bodySubtext",defaultValue:"#666666"},{rawString:";font-size:11px}.rootIsBorderless_df60a678 .fieldGroup_df60a678{border-color:transparent;border-width:0}.root_df60a678.rootIsUnderlined_df60a678{border:0px solid "},{theme:"inputBorder",defaultValue:"#a6a6a6"},{rawString:"}.root_df60a678.rootIsUnderlined_df60a678 .wrapper_df60a678{display:-webkit-box;display:-ms-flexbox;display:flex;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:inherit;width:100%}.root_df60a678.rootIsUnderlined_df60a678 .wrapper_df60a678.invalid_df60a678,.root_df60a678.rootIsUnderlined_df60a678 .wrapper_df60a678.invalid_df60a678:focus,.root_df60a678.rootIsUnderlined_df60a678 .wrapper_df60a678.invalid_df60a678:hover{border-bottom:1px solid "},{theme:"errorText",defaultValue:"#a80000"},{rawString:"}.root_df60a678.rootIsUnderlined_df60a678 .ms-Label{font-size:14px;line-height:22px;height:32px}[dir='ltr'] .root_df60a678.rootIsUnderlined_df60a678 .ms-Label{margin-right:8px}[dir='rtl'] .root_df60a678.rootIsUnderlined_df60a678 .ms-Label{margin-left:8px}[dir='ltr'] .root_df60a678.rootIsUnderlined_df60a678 .ms-Label{padding-left:12px}[dir='rtl'] .root_df60a678.rootIsUnderlined_df60a678 .ms-Label{padding-right:12px}.root_df60a678.rootIsUnderlined_df60a678 .fieldGroup_df60a678{-webkit-box-flex:1;-ms-flex:1 1 0px;flex:1 1 0px;border-width:0}[dir='ltr'] .root_df60a678.rootIsUnderlined_df60a678 .fieldGroup_df60a678{text-align:left}[dir='rtl'] .root_df60a678.rootIsUnderlined_df60a678 .fieldGroup_df60a678{text-align:right}.root_df60a678.rootIsUnderlined_df60a678.rootIsDisabled_df60a678{border-color:"},{theme:"disabledBackground",defaultValue:"#f4f4f4"},{rawString:"}.root_df60a678.rootIsUnderlined_df60a678.rootIsDisabled_df60a678 .ms-Label{color:"},{theme:"neutralTertiary",defaultValue:"#a6a6a6"},{rawString:"}.root_df60a678.rootIsUnderlined_df60a678.rootIsDisabled_df60a678 .field_df60a678{background-color:transparent;color:"},{theme:"disabledText",defaultValue:"#a6a6a6"},{rawString:"}.root_df60a678.rootIsUnderlined_df60a678.rootIsDisabled_df60a678 .fieldGroup_df60a678{background-color:transparent}.root_df60a678.rootIsUnderlined_df60a678:hover:not(.rootIsActive_df60a678):not(.rootIsDisabled_df60a678){border-color:"},{theme:"inputBorderHovered",defaultValue:"#212121"},{rawString:"}.root_df60a678.rootIsUnderlined_df60a678.rootIsActive_df60a678{border-color:"},{theme:"inputFocusBorderAlt",defaultValue:"#0078d4"},{rawString:"}@media screen and (-ms-high-contrast: active){.root_df60a678.rootIsUnderlined_df60a678.rootIsActive_df60a678{border-width:2px}.root_df60a678.rootIsUnderlined_df60a678.rootIsActive_df60a678 .field_df60a678{padding:0 11px 0 11px}[dir='rtl'] .root_df60a678.rootIsUnderlined_df60a678.rootIsActive_df60a678 .field_df60a678{padding:0 11px 0 11px}}@media screen and (-ms-high-contrast: active){.root_df60a678.rootIsUnderlined_df60a678:hover:not(.rootIsDisabled_df60a678) .wrapper_df60a678,.root_df60a678.rootIsUnderlined_df60a678.rootIsActive_df60a678 .wrapper_df60a678{border-color:Highlight}}.root_df60a678.rootIsMultiline_df60a678 .fieldGroup_df60a678{min-height:60px;height:auto;display:-webkit-box;display:-ms-flexbox;display:flex}.root_df60a678.rootIsMultiline_df60a678 .field_df60a678{line-height:17px;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;padding-top:6px;overflow:auto;width:100%}[dir='ltr'] .root_df60a678.rootIsMultiline_df60a678 .field_df60a678.hasIcon_df60a678{padding-right:40px}[dir='rtl'] .root_df60a678.rootIsMultiline_df60a678 .field_df60a678.hasIcon_df60a678{padding-left:40px}.errorMessage_df60a678{font-size:12px;font-weight:400;color:"},{theme:"errorText",defaultValue:"#a80000"},{rawString:";margin:0;padding-top:5px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.invalid_df60a678,.invalid_df60a678:focus,.invalid_df60a678:hover{border-color:"},{theme:"errorText",defaultValue:"#a80000"},{rawString:"}[dir='ltr'] .root_df60a678.rootIsUnderlined_df60a678 .ms-Label{padding-left:12px}[dir='rtl'] .root_df60a678.rootIsUnderlined_df60a678 .ms-Label{padding-right:12px}[dir='ltr'] .root_df60a678.rootIsUnderlined_df60a678 .ms-Label{padding-right:0}[dir='rtl'] .root_df60a678.rootIsUnderlined_df60a678 .ms-Label{padding-left:0}html[dir='ltr'] .root_df60a678.rootIsUnderlined_df60a678 .field_df60a678{text-align:left}html[dir='rtl'] .root_df60a678.rootIsUnderlined_df60a678 .field_df60a678{text-align:right}.root_df60a678.rootIsMultiline_df60a678 .icon_df60a678{padding-bottom:8px;-webkit-box-align:end;-ms-flex-align:end;align-items:flex-end}[dir='ltr'] .root_df60a678.rootIsMultiline_df60a678 .icon_df60a678{padding-right:24px}[dir='rtl'] .root_df60a678.rootIsMultiline_df60a678 .icon_df60a678{padding-left:24px}.root_df60a678.rootIsMultiline_df60a678 .field_df60a678.fieldIsUnresizable_df60a678{resize:none}.hidden_df60a678{display:none}\n"}]),t.root="root_df60a678",t.screenReaderOnly="screenReaderOnly_df60a678",t.fieldGroup="fieldGroup_df60a678",t.fieldGroupIsFocused="fieldGroupIsFocused_df60a678",t.field="field_df60a678",t.invalid="invalid_df60a678",t.rootIsDisabled="rootIsDisabled_df60a678",t.fieldPrefixSuffix="fieldPrefixSuffix_df60a678",t.hasIcon="hasIcon_df60a678",t.rootIsRequiredLabel="rootIsRequiredLabel_df60a678",t.rootIsRequiredPlaceholderOnly="rootIsRequiredPlaceholderOnly_df60a678",t.rootIsActive="rootIsActive_df60a678",t.icon="icon_df60a678",t.description="description_df60a678",t.rootIsBorderless="rootIsBorderless_df60a678",t.rootIsUnderlined="rootIsUnderlined_df60a678",t.wrapper="wrapper_df60a678",t.rootIsMultiline="rootIsMultiline_df60a678",t.errorMessage="errorMessage_df60a678",t.fieldIsUnresizable="fieldIsUnresizable_df60a678",t.hidden="hidden_df60a678"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4);t.getStyles=function(e){var t,n=e.theme,r=e.className,i=e.disabled,a=e.required;return{root:["ms-Label",{color:n.semanticColors.bodyText,boxSizing:"border-box",boxShadow:"none",margin:0,display:"block",padding:"5px 0",wordWrap:"break-word",overflowWrap:"break-word"},i&&{color:n.semanticColors.disabledBodyText,selectors:(t={},t[o.HighContrastSelector]={color:"GrayText"},t)},a&&{selectors:{"::after":{content:"' *'",color:n.semanticColors.errorText,paddingRight:12}}},r]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(72),i=n(140);t.Label=o.styled(r.LabelBase,i.getStyles)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0);o.__exportStar(n(72),t),o.__exportStar(n(141),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(142),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0);o.__exportStar(n(73),t),o.__exportStar(n(138),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),r=n(2),i=n(19);t.getStyles=r.memoizeFunction(function(e,t,n,r){var a=i.getStyles(e),s={root:{backgroundColor:e.palette.neutralQuaternaryAlt,color:e.palette.neutralPrimary},rootHovered:{backgroundColor:e.palette.neutralTertiaryAlt,color:e.palette.neutralDark},rootPressed:{backgroundColor:e.palette.neutralTertiary,color:e.palette.neutralDark}};return o.concatStyleSets(a,s,t)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(30),a=n(2),s=n(145),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o.__extends(t,e),t.prototype.render=function(){var e=this.props,t=e.styles,n=e.theme;return r.createElement(i.DefaultButton,o.__assign({},this.props,{styles:s.getStyles(n,t),onRenderDescription:a.nullRender}))},t=o.__decorate([a.customizable("MessageBarButton",["theme"])],t)}(a.BaseComponent);t.MessageBarButton=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(42);t.CommandButton=o.ActionButton},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),r=n(2),i=n(19),a=n(29);t.getStyles=r.memoizeFunction(function(e,t,n,r){var s,l,u,c,d=i.getStyles(e),p=a.getStyles(e),f={root:[o.getFocusStyle(e,-1,"relative",{left:4,top:4,bottom:4,right:4,border:"none"}),{minWidth:"40px",backgroundColor:e.palette.neutralLighter,color:e.palette.neutralPrimary,padding:"0 4px",selectors:(s={},s[o.HighContrastSelector]={border:"none"},s)}],rootHovered:{backgroundColor:e.palette.neutralLight,color:e.palette.neutralDark,selectors:(l={},l[o.HighContrastSelector]={color:"Highlight"},l)},rootPressed:{backgroundColor:e.palette.neutralQuaternaryAlt,color:e.palette.black},rootChecked:{backgroundColor:e.palette.neutralQuaternaryAlt,color:e.palette.black},rootExpanded:{backgroundColor:e.palette.neutralQuaternaryAlt,color:e.palette.black},rootCheckedHovered:{backgroundColor:e.palette.neutralQuaternary,color:e.palette.black},splitButtonContainer:{selectors:(u={},u[o.HighContrastSelector]={border:"none"},u)},splitButtonDivider:{backgroundColor:e.palette.neutralTertiaryAlt,marginTop:4,marginBottom:4},splitButtonMenuButton:{backgroundColor:e.palette.neutralLighter,color:e.palette.neutralPrimary,selectors:{":hover":{backgroundColor:e.palette.neutralLight,color:e.palette.neutralDark,selectors:(c={},c[o.HighContrastSelector]={color:"Highlight"},c)}}},splitButtonMenuButtonDisabled:{backgroundColor:e.palette.neutralLighter,selectors:{":hover":{backgroundColor:e.palette.neutralLighter}}},splitButtonMenuButtonChecked:{backgroundColor:e.palette.neutralQuaternaryAlt,color:e.palette.black,selectors:{":hover":{backgroundColor:e.palette.neutralQuaternaryAlt}}},splitButtonMenuButtonExpanded:{backgroundColor:e.palette.neutralQuaternaryAlt,color:e.palette.black,selectors:{":hover":{backgroundColor:e.palette.neutralQuaternaryAlt}}},splitButtonMenuIcon:{color:e.palette.neutralPrimary},splitButtonMenuIconDisabled:{color:e.palette.neutralTertiary},label:{fontWeight:"normal"},icon:{color:e.palette.themeDarkAlt},menuIcon:{color:e.palette.neutralSecondary}};return o.concatStyleSets(d,f,p,t)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(20),a=n(2),s=n(148),l=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._shouldUpdateComponentRef=!1,t}return o.__extends(t,e),t.prototype.render=function(){var e=this.props,t=e.styles,n=e.theme;return r.createElement(i.BaseButton,o.__assign({},this.props,{variantClassName:"ms-Button--commandBar",styles:s.getStyles(n,t),onRenderDescription:a.nullRender}))},t=o.__decorate([a.customizable("CommandBarButton",["theme"])],t)}(a.BaseComponent);t.CommandBarButton=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),r=n(2),i=n(19),a=n(29);t.getStyles=r.memoizeFunction(function(e,t){var n,r=i.getStyles(e),s=a.getStyles(e),l=e.palette,u=e.semanticColors,c={root:{padding:"0 4px",width:"32px",height:"32px",backgroundColor:"transparent"},rootHovered:{color:l.themeDarker,selectors:(n={},n[o.HighContrastSelector]={borderColor:"Highlight",color:"Highlight"},n)},rootPressed:{color:l.themePrimary},rootExpanded:{color:l.themePrimary},rootChecked:{backgroundColor:u.buttonBackgroundChecked},rootCheckedHovered:{backgroundColor:u.buttonBackgroundHovered},rootDisabled:{color:u.disabledText}};return o.concatStyleSets(r,c,s,t)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),r=n(2),i=n(19),a=n(29),s=n(79);t.getStyles=r.memoizeFunction(function(e,t,n){var r,l,u=i.getStyles(e),c=a.getStyles(e),d={root:{maxWidth:"280px",minHeight:"72px",height:"auto",padding:"20px"},flexContainer:{flexDirection:"row",alignItems:"flex-start",minWidth:"100%",margin:""},textContainer:{textAlign:"left"},icon:{fontSize:"2em",lineHeight:"1em",height:"1em",margin:"0px 8px 0px 0px",flexBasis:"1em",flexShrink:"0"},label:{margin:"0 0 5px",lineHeight:"100%",fontWeight:o.FontWeights.semibold},description:[e.fonts.small,{lineHeight:"100%"}]},p={description:{color:e.palette.neutralSecondary},descriptionHovered:{color:e.palette.neutralDark},descriptionPressed:{color:"inherit"},descriptionChecked:{color:"inherit"},descriptionDisabled:{color:"inherit"}},f={description:{color:e.palette.white,selectors:(r={},r[o.HighContrastSelector]={color:"Window",backgroundColor:"WindowText",MsHighContrastAdjust:"none"},r)},descriptionHovered:{color:e.palette.white,selectors:(l={},l[o.HighContrastSelector]={color:"Window",backgroundColor:"Highlight",MsHighContrastAdjust:"none"},l)},descriptionPressed:{color:"inherit"},descriptionChecked:{color:"inherit"},descriptionDisabled:{color:"inherit"}};return o.concatStyleSets(u,d,n?s.primaryStyles(e):s.standardStyles(e),n?f:p,c,t)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),r=n(2),i=n(19);t.getStyles=r.memoizeFunction(function(e,t){var n,r=i.getStyles(e),a={root:{padding:"0 4px",height:"40px",color:e.palette.neutralPrimary,backgroundColor:"transparent"},rootHovered:{color:e.palette.themePrimary,selectors:(n={},n[o.HighContrastSelector]={borderColor:"Highlight",color:"Highlight"},n)},iconHovered:{color:e.palette.themePrimary},rootPressed:{color:e.palette.black},rootExpanded:{color:e.palette.themePrimary},iconPressed:{color:e.palette.themeDarker},rootDisabled:{color:e.palette.neutralTertiary,backgroundColor:"transparent"},rootChecked:{color:e.palette.black},iconChecked:{color:e.palette.themeDarker},flexContainer:{justifyContent:"flex-start"},icon:{color:e.palette.themeDarkAlt},iconDisabled:{color:"inherit"},menuIcon:{color:e.palette.neutralSecondary},textContainer:{flexGrow:0}};return o.concatStyleSets(r,a,t)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),r=n(2),i=n(19),a=n(29),s=n(79);t.getStyles=r.memoizeFunction(function(e,t,n){var r=i.getStyles(e),l=a.getStyles(e),u={root:{minWidth:"80px",height:"32px"},label:{fontWeight:o.FontWeights.semibold}};return o.concatStyleSets(r,u,n?s.primaryStyles(e):s.standardStyles(e),l,t)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=n(80),s=n(30),l=n(42),u=n(78),c=n(77),d=n(76),p=function(e){function t(t){var n=e.call(this,t)||this;return n._shouldUpdateComponentRef=!1,i.warn("The Button component has been deprecated. Use specific variants instead. (PrimaryButton, DefaultButton, IconButton, ActionButton, etc.)"),n}return o.__extends(t,e),t.prototype.render=function(){var e=this.props;switch(e.buttonType){case a.ButtonType.command:return r.createElement(l.ActionButton,o.__assign({},e));case a.ButtonType.compound:return r.createElement(u.CompoundButton,o.__assign({},e));case a.ButtonType.icon:return r.createElement(c.IconButton,o.__assign({},e));case a.ButtonType.primary:return r.createElement(d.PrimaryButton,o.__assign({},e));default:return r.createElement(s.DefaultButton,o.__assign({},e))}},t}(i.BaseComponent);t.Button=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(4);t.getClassNames=o.memoizeFunction(function(e,t,n,o){return{root:r.mergeStyles(e.splitButtonMenuButton,n&&[e.splitButtonMenuButtonExpanded],t&&[e.splitButtonMenuButtonDisabled],o&&!t&&[e.splitButtonMenuButtonChecked]),splitButtonContainer:r.mergeStyles(e.splitButtonContainer,o&&!t&&[e.splitButtonContainerChecked,{selectors:{":hover":e.splitButtonContainerCheckedHovered}}],!t&&!o&&[{selectors:{":hover":e.splitButtonContainerHovered,":focus":e.splitButtonContainerFocused}}],t&&e.splitButtonContainerDisabled),icon:r.mergeStyles(e.splitButtonMenuIcon,t&&e.splitButtonMenuIconDisabled),flexContainer:r.mergeStyles(e.splitButtonFlexContainer),divider:r.mergeStyles(e.splitButtonDivider)}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(4);t.getBaseButtonClassNames=o.memoizeFunction(function(e,t,n,o,i,a,s,l,u){var c=l&&!u;return r.mergeStyleSets({root:["ms-Button",e.root,n,s&&["is-checked",e.rootChecked],c&&["is-expanded",e.rootExpanded,{selectors:{":hover .ms-Button-icon":e.iconExpandedHovered,":hover .ms-Button-menuIcon":e.rootExpandedHovered,":hover":e.rootExpandedHovered}}],a&&["is-disabled",e.rootDisabled],!a&&!c&&!s&&{selectors:{":hover":e.rootHovered,":hover .ms-Button-icon":e.iconHovered,":hover .ms-Button-description":e.descriptionHovered,":hover .ms-Button-menuIcon":e.menuIconHovered,":focus":e.rootFocused,":active":e.rootPressed,":active .ms-Button-icon":e.iconPressed,":active .ms-Button-description":e.descriptionPressed,":active .ms-Button-menuIcon":e.menuIconPressed}},a&&s&&[e.rootCheckedDisabled],!a&&s&&{selectors:{":hover":e.rootCheckedHovered,":active":e.rootCheckedPressed}},t],flexContainer:["ms-Button-flexContainer",e.flexContainer],textContainer:["ms-Button-textContainer",e.textContainer],icon:["ms-Button-icon",o,e.icon,c&&e.iconExpanded,s&&e.iconChecked,a&&e.iconDisabled],label:["ms-Button-label",e.label,s&&e.labelChecked,a&&e.labelDisabled],menuIcon:["ms-Button-menuIcon",i,e.menuIcon,s&&e.menuIconChecked,a&&e.menuIconDisabled,!a&&!c&&!s&&{selectors:{":hover":e.menuIconHovered,":active":e.menuIconPressed}},c&&["is-expanded",e.menuIconExpanded,{selectors:{":hover":e.menuIconExpandedHovered}}]],description:["ms-Button-description",e.description,s&&e.descriptionChecked,a&&e.descriptionDisabled],screenReaderText:["ms-Button-screenReaderText",e.screenReaderText]})})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),r=n(84),i=n(4);t.VerticalDivider=function(e){var t=i.getTheme(),n=e.getClassNames?e.getClassNames(t):r.getDividerClassNames(t);return o.createElement("span",{className:n.wrapper},o.createElement("span",{className:n.divider}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(157),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(158),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=n(25),s=n(85),l=n(27),u=n(26),c=n(159),d=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._onItemKeyDown=function(e){var n=t.props,o=n.item,r=n.onItemKeyDown;13===e.which?(t._executeItemClick(e),e.preventDefault(),e.stopPropagation()):r&&r(o,e)},t._getSubmenuTarget=function(){return t._splitButton},t._onItemMouseEnterPrimary=function(e){var n=t.props,r=n.item,i=n.onItemMouseEnter;i&&i(o.__assign({},r,{subMenuProps:void 0,items:void 0}),e,t._splitButton)},t._onItemMouseEnterIcon=function(e){var n=t.props,o=n.item,r=n.onItemMouseEnter;r&&r(o,e,t._splitButton)},t._onItemMouseMovePrimary=function(e){var n=t.props,r=n.item,i=n.onItemMouseMove;i&&i(o.__assign({},r,{subMenuProps:void 0,items:void 0}),e,t._splitButton)},t._onItemMouseMoveIcon=function(e){var n=t.props,o=n.item,r=n.onItemMouseMove;r&&r(o,e,t._splitButton)},t._onIconItemClick=function(e){var n=t.props,o=n.item,r=n.onItemClickBase;r&&r(o,e,t._splitButton?t._splitButton:e.currentTarget)},t._executeItemClick=function(e){var n=t.props,o=n.item,r=n.executeItemClick,i=n.onItemClick;if(!o.disabled&&!o.isDisabled)return t._processingTouch&&i?i(o,e):void(r&&r(o,e))},t._onTouchStart=function(e){!t._splitButton||"onpointerdown"in t._splitButton||t._handleTouchAndPointerEvent(e)},t._onPointerDown=function(e){"touch"===e.pointerType&&(t._handleTouchAndPointerEvent(e),e.preventDefault(),e.stopImmediatePropagation())},t}return o.__extends(t,e),t.prototype.componentDidMount=function(){this._splitButton&&"onpointerdown"in this._splitButton&&this._events.on(this._splitButton,"pointerdown",this._onPointerDown,!0)},t.prototype.render=function(){var e=this,t=this.props,n=t.item,i=t.classNames,a=t.index,s=t.focusableElementIndex,c=t.totalItemCount,d=t.hasCheckmarks,p=t.hasIcons,f=t.onItemMouseLeave,h=t.expandedMenuItemKey,m=u.hasSubmenu(n),g=n.keytipProps;return g&&(g=o.__assign({},g,{hasMenu:!0})),r.createElement(l.KeytipData,{keytipProps:g,disabled:u.isItemDisabled(n)},function(t){return r.createElement("div",{"data-ktp-target":t["data-ktp-target"],ref:function(t){return e._splitButton=t},role:"menuitem","aria-label":n.ariaLabel,className:i.splitContainer,"aria-disabled":u.isItemDisabled(n),"aria-expanded":m?n.key===h:void 0,"aria-haspopup":!0,"aria-describedby":n.ariaDescription+(t["aria-describedby"]||""),"aria-checked":n.isChecked||n.checked,"aria-posinset":s+1,"aria-setsize":c,onMouseEnter:e._onItemMouseEnterPrimary,onMouseLeave:f?f.bind(e,o.__assign({},n,{subMenuProps:null,items:null})):void 0,onMouseMove:e._onItemMouseMovePrimary,onKeyDown:e._onItemKeyDown,onClick:e._executeItemClick,onTouchStart:e._onTouchStart,tabIndex:0,"data-is-focusable":!0},e._renderSplitPrimaryButton(n,i,a,d,p),e._renderSplitDivider(n),e._renderSplitIconButton(n,i,a,t))})},t.prototype._renderSplitPrimaryButton=function(e,t,n,s,l){var c=this.props,d=c.contextualMenuItemAs,p=void 0===d?a.ContextualMenuItem:d,f=c.onItemClick,h={key:e.key,disabled:u.isItemDisabled(e)||e.primaryDisabled,name:e.name,text:e.text||e.name,className:t.splitPrimary,canCheck:e.canCheck,isChecked:e.isChecked,checked:e.checked,iconProps:e.iconProps,"data-is-focusable":!1,"aria-hidden":!0};return r.createElement("button",o.__assign({},i.getNativeProps(h,i.buttonProperties)),r.createElement(p,{"data-is-focusable":!1,item:h,classNames:t,index:n,onCheckmarkClick:s&&f?f.bind(this,e):void 0,hasIcons:l}))},t.prototype._renderSplitDivider=function(e){var t=e.getSplitButtonVerticalDividerClassNames||s.getSplitButtonVerticalDividerClassNames;return r.createElement(c.VerticalDivider,{getClassNames:t})},t.prototype._renderSplitIconButton=function(e,t,n,s){var l=this.props,c=l.contextualMenuItemAs,d=void 0===c?a.ContextualMenuItem:c,p=l.onItemMouseLeave,f=l.onItemMouseDown,h=l.openSubMenu,m=l.dismissSubMenu,g=l.dismissMenu,_={onClick:this._onIconItemClick,disabled:u.isItemDisabled(e),className:t.splitMenu,subMenuProps:e.subMenuProps,submenuIconProps:e.submenuIconProps,split:!0,key:e.key},v=i.assign({},i.getNativeProps(_,i.buttonProperties),{onMouseEnter:this._onItemMouseEnterIcon,onMouseLeave:p?p.bind(this,e):void 0,onMouseDown:function(t){return f?f(e,t):void 0},onMouseMove:this._onItemMouseMoveIcon,"data-is-focusable":!1,"data-ktp-execute-target":s["data-ktp-execute-target"],"aria-hidden":!0});return r.createElement("button",o.__assign({},v),r.createElement(d,{componentRef:e.componentRef,item:_,classNames:t,index:n,hasIcons:!1,openSubMenu:h,dismissSubMenu:m,dismissMenu:g,getSubmenuTarget:this._getSubmenuTarget}))},t.prototype._handleTouchAndPointerEvent=function(e){var t=this,n=this.props.onTap;n&&n(e),this._lastTouchTimeoutId&&(this._async.clearTimeout(this._lastTouchTimeoutId),this._lastTouchTimeoutId=void 0),this._processingTouch=!0,this._lastTouchTimeoutId=this._async.setTimeout(function(){t._processingTouch=!1,t._lastTouchTimeoutId=void 0},500)},t}(n(31).ContextualMenuItemWrapper);t.ContextualMenuSplitButton=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=n(31),s=n(27),l=n(26),u=n(25),c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._btn=i.createRef(),t._getSubmenuTarget=function(){return t._btn.current?t._btn.current:void 0},t}return o.__extends(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.item,a=t.classNames,c=t.index,d=t.focusableElementIndex,p=t.totalItemCount,f=t.hasCheckmarks,h=t.hasIcons,m=t.contextualMenuItemAs,g=void 0===m?u.ContextualMenuItem:m,_=t.expandedMenuItemKey,v=t.onItemMouseDown,y=t.onItemClick,b=t.openSubMenu,C=t.dismissSubMenu,S=t.dismissMenu,x=this._getSubMenuId(n),E=n.ariaLabel||n.text||n.name||"",k=l.getIsChecked(n),w=null!==k?"menuitemcheckbox":"menuitem",I=l.hasSubmenu(n),T=i.getNativeProps(n,i.buttonProperties);delete T.disabled;var M={className:a.root,onClick:this._onItemClick,onKeyDown:I?this._onItemKeyDown:null,onMouseEnter:this._onItemMouseEnter,onMouseLeave:this._onItemMouseLeave,onMouseDown:function(e){return v?v(n,e):void 0},onMouseMove:this._onItemMouseMove,href:n.href,title:n.title,"aria-label":E,"aria-haspopup":I||void 0,"aria-owns":n.key===_?x:void 0,"aria-expanded":I?n.key===_:void 0,"aria-checked":!!k,"aria-posinset":d+1,"aria-setsize":p,"aria-disabled":l.isItemDisabled(n),role:n.role||w,style:n.style},P=n.keytipProps;return P&&I&&(P=o.__assign({},P,{hasMenu:!0})),r.createElement(s.KeytipData,{keytipProps:P,ariaDescribedBy:T["aria-describedby"],disabled:l.isItemDisabled(n)},function(t){return r.createElement("button",o.__assign({ref:e._btn},T,M,t),r.createElement(g,{componentRef:n.componentRef,item:n,classNames:a,index:c,onCheckmarkClick:f&&y?y.bind(e,n):void 0,hasIcons:h,openSubMenu:b,dismissSubMenu:C,dismissMenu:S,getSubmenuTarget:e._getSubmenuTarget}))})},t}(a.ContextualMenuItemWrapper);t.ContextualMenuButton=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=n(31),s=n(27),l=n(26),u=n(25),c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._anchor=i.createRef(),t._getSubmenuTarget=function(){return t._anchor.current?t._anchor.current:void 0},t._onItemClick=function(e){var n=t.props,o=n.item,r=n.onItemClick;r&&r(o,e)},t}return o.__extends(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.item,a=t.classNames,c=t.index,d=t.focusableElementIndex,p=t.totalItemCount,f=t.hasCheckmarks,h=t.hasIcons,m=t.contextualMenuItemAs,g=void 0===m?u.ContextualMenuItem:m,_=t.expandedMenuItemKey,v=t.onItemClick,y=t.openSubMenu,b=t.dismissSubMenu,C=t.dismissMenu,S=n.rel;n.target&&"_blank"===n.target.toLowerCase()&&(S=S||"nofollow noopener noreferrer");var x=this._getSubMenuId(n),E=l.hasSubmenu(n),k=i.getNativeProps(n,i.anchorProperties),w=l.isItemDisabled(n),I=n.keytipProps;return I&&E&&(I=o.__assign({},I,{hasMenu:!0})),r.createElement("div",null,r.createElement(s.KeytipData,{keytipProps:n.keytipProps,ariaDescribedBy:k["aria-describedby"],disabled:w},function(t){return r.createElement("a",o.__assign({},k,t,{ref:e._anchor,href:n.href,target:n.target,rel:S,className:a.root,role:"menuitem","aria-owns":n.key===_?x:void 0,"aria-haspopup":E||void 0,"aria-expanded":E?n.key===_:void 0,"aria-posinset":d+1,"aria-setsize":p,"aria-disabled":l.isItemDisabled(n),style:n.style,onClick:e._onItemClick,onMouseEnter:e._onItemMouseEnter,onMouseLeave:e._onItemMouseLeave,onKeyDown:E?e._onItemKeyDown:null}),r.createElement(g,{componentRef:n.componentRef,item:n,classNames:a,index:c,onCheckmarkClick:f&&v?v.bind(e,n):void 0,hasIcons:h,openSubMenu:y,dismissSubMenu:b,dismissMenu:C,getSubmenuTarget:e._getSubmenuTarget}))}))},t}(a.ContextualMenuItemWrapper);t.ContextualMenuAnchor=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0);o.__exportStar(n(162),t),o.__exportStar(n(161),t),o.__exportStar(n(160),t),o.__exportStar(n(31),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=n(43),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o.__extends(t,e),t.prototype.shouldComponentUpdate=function(){return!1},t.prototype.componentDidMount=function(){a.LayerBase.notifyHostChanged(this.props.id)},t.prototype.componentWillUnmount=function(){a.LayerBase.notifyHostChanged(this.props.id)},t.prototype.render=function(){return r.createElement("div",o.__assign({},this.props,{className:i.css("ms-LayerHost",this.props.className)}))},t}(i.BaseComponent);t.LayerHost=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),r={root:"ms-Layer",rootNoHost:"ms-Layer--fixed",content:"ms-Layer-content"};t.getStyles=function(e){var t=e.className,n=e.isNotHost,i=e.theme,a=o.getGlobalClassNames(r,i);return{root:[a.root,n&&[a.rootNoHost,{position:"fixed",zIndex:o.ZIndexes.Layer,top:0,left:0,width:"100vw",height:"100vh",visibility:"hidden"}],t],content:[a.content,{visibility:"visible"}]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),r={fontFamily:"inherit"},i={root:"ms-Fabric"};t.getStyles=function(e){var t=e.theme,n=e.className,a=e.isFocusVisible;return{root:[o.getGlobalClassNames(i,t).root,a&&"is-focusVisible",t.fonts.medium,{color:t.palette.neutralPrimary,selectors:{"& button":r,"& input":r,"& textarea":r,":global(button)":{overflow:"visible",margin:0}}},n]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=n(166),s=i.classNamesFunction(),l=function(e){function t(t){var n=e.call(this,t)||this;return n._rootElement=i.createRef(),n._onMouseDown=function(e){n.setState({isFocusVisible:!1})},n._onKeyDown=function(e){i.isDirectionalKeyCode(e.which)&&n.setState({isFocusVisible:!0})},n.state={isFocusVisible:!1},n}return o.__extends(t,e),t.prototype.render=function(){var e=s(a.getStyles,o.__assign({},this.props,this.state)),t=i.getNativeProps(this.props,i.divProperties);return r.createElement("div",o.__assign({},t,{className:e.root,ref:this._rootElement}))},t.prototype.componentDidMount=function(){var e=i.getWindow(this._rootElement.value);e&&(this._events.on(e,"mousedown",this._onMouseDown,!0),this._events.on(e,"keydown",this._onKeyDown,!0))},t=o.__decorate([i.customizable("Fabric",["theme"])],t)}(i.BaseComponent);t.Fabric=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(167),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(168),t)},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var o=n(170);e.exports=function(e){return o(e)&&3==e.nodeType}},function(e,t,n){"use strict";var o=n(171);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!o(t)&&(o(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var o=Object.prototype.hasOwnProperty;function r(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(r(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!o.call(t,n[a])||!r(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var o=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:o,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:o&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:o&&!!window.screen,isInWorker:!o};e.exports=r},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var o=n(54),r=n(1),i=n(175),a=n(120),s=n(53),l=n(174),u=n(173),c=n(172),d=n(119);function p(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||p("227");var f={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,o,r,i,a,s,l){(function(e,t,n,o,r,i,a,s,l){this._hasCaughtError=!1,this._caughtError=null;var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(f,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,o,r,i,a,s,l){if(f.invokeGuardedCallback.apply(this,arguments),f.hasCaughtError()){var u=f.clearCaughtError();f._hasRethrowError||(f._hasRethrowError=!0,f._rethrowError=u)}},rethrowCaughtError:function(){return function(){if(f._hasRethrowError){var e=f._rethrowError;throw f._rethrowError=null,f._hasRethrowError=!1,e}}.apply(f,arguments)},hasCaughtError:function(){return f._hasCaughtError},clearCaughtError:function(){if(f._hasCaughtError){var e=f._caughtError;return f._caughtError=null,f._hasCaughtError=!1,e}p("198")}};var h=null,m={};function g(){if(h)for(var e in m){var t=m[e],n=h.indexOf(e);if(-1<n||p("96",e),!v[n])for(var o in t.extractEvents||p("97",e),v[n]=t,n=t.eventTypes){var r=void 0,i=n[o],a=t,s=o;y.hasOwnProperty(s)&&p("99",s),y[s]=i;var l=i.phasedRegistrationNames;if(l){for(r in l)l.hasOwnProperty(r)&&_(l[r],a,s);r=!0}else i.registrationName?(_(i.registrationName,a,s),r=!0):r=!1;r||p("98",o,e)}}}function _(e,t,n){b[e]&&p("100",e),b[e]=t,C[e]=t.eventTypes[n].dependencies}var v=[],y={},b={},C={};function S(e){h&&p("101"),h=Array.prototype.slice.call(e),g()}function x(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var o=e[t];m.hasOwnProperty(t)&&m[t]===o||(m[t]&&p("102",t),m[t]=o,n=!0)}n&&g()}var E=Object.freeze({plugins:v,eventNameDispatchConfigs:y,registrationNameModules:b,registrationNameDependencies:C,possibleRegistrationNames:null,injectEventPluginOrder:S,injectEventPluginsByName:x}),k=null,w=null,I=null;function T(e,t,n,o){t=e.type||"unknown-event",e.currentTarget=I(o),f.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function M(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function P(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var D=null;function O(e,t){if(e){var n=e._dispatchListeners,o=e._dispatchInstances;if(Array.isArray(n))for(var r=0;r<n.length&&!e.isPropagationStopped();r++)T(e,t,n[r],o[r]);else n&&T(e,t,n,o);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function F(e){return O(e,!0)}function R(e){return O(e,!1)}var A={injectEventPluginOrder:S,injectEventPluginsByName:x};function L(e,t){var n=e.stateNode;if(!n)return null;var o=k(n);if(!o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(o=!o.disabled)||(o=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,typeof n),n)}function N(e,t){null!==e&&(D=M(D,e)),e=D,D=null,e&&(P(e,t?F:R),D&&p("95"),f.rethrowCaughtError())}function B(e,t,n,o){for(var r=null,i=0;i<v.length;i++){var a=v[i];a&&(a=a.extractEvents(e,t,n,o))&&(r=M(r,a))}N(r,!1)}var U=Object.freeze({injection:A,getListener:L,runEventsInBatch:N,runExtractedEventsInBatch:B}),j=Math.random().toString(36).slice(2),W="__reactInternalInstance$"+j,H="__reactEventHandlers$"+j;function z(e){if(e[W])return e[W];for(;!e[W];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[W]).tag||6===e.tag?e:null}function K(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function V(e){return e[H]||null}var G=Object.freeze({precacheFiberNode:function(e,t){t[W]=e},getClosestInstanceFromNode:z,getInstanceFromNode:function(e){return!(e=e[W])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:K,getFiberCurrentPropsFromNode:V,updateFiberProps:function(e,t){e[H]=t}});function q(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Z(e,t,n){for(var o=[];e;)o.push(e),e=q(e);for(e=o.length;0<e--;)t(o[e],"captured",n);for(e=0;e<o.length;e++)t(o[e],"bubbled",n)}function $(e,t,n){(t=L(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=M(n._dispatchListeners,t),n._dispatchInstances=M(n._dispatchInstances,e))}function Y(e){e&&e.dispatchConfig.phasedRegistrationNames&&Z(e._targetInst,$,e)}function X(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;Z(t=t?q(t):null,$,e)}}function Q(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=L(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=M(n._dispatchListeners,t),n._dispatchInstances=M(n._dispatchInstances,e))}function J(e){e&&e.dispatchConfig.registrationName&&Q(e._targetInst,null,e)}function ee(e){P(e,Y)}function te(e,t,n,o){if(n&&o)e:{for(var r=n,i=o,a=0,s=r;s;s=q(s))a++;s=0;for(var l=i;l;l=q(l))s++;for(;0<a-s;)r=q(r),a--;for(;0<s-a;)i=q(i),s--;for(;a--;){if(r===i||r===i.alternate)break e;r=q(r),i=q(i)}r=null}else r=null;for(i=r,r=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)r.push(n),n=q(n);for(n=[];o&&o!==i&&(null===(a=o.alternate)||a!==i);)n.push(o),o=q(o);for(o=0;o<r.length;o++)Q(r[o],"bubbled",e);for(e=n.length;0<e--;)Q(n[e],"captured",t)}var ne=Object.freeze({accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){P(e,X)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){P(e,J)}}),oe=null;function re(){return!oe&&i.canUseDOM&&(oe="textContent"in document.documentElement?"textContent":"innerText"),oe}var ie={_root:null,_startText:null,_fallbackText:null};function ae(){if(ie._fallbackText)return ie._fallbackText;var e,t,n=ie._startText,o=n.length,r=se(),i=r.length;for(e=0;e<o&&n[e]===r[e];e++);var a=o-e;for(t=1;t<=a&&n[o-t]===r[i-t];t++);return ie._fallbackText=r.slice(e,1<t?1-t:void 0),ie._fallbackText}function se(){return"value"in ie._root?ie._root.value:ie._root[re()]}var le="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),ue={type:null,target:null,currentTarget:s.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function ce(e,t,n,o){for(var r in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(r)&&((t=e[r])?this[r]=t(n):"target"===r?this.target=o:this[r]=n[r]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?s.thatReturnsTrue:s.thatReturnsFalse,this.isPropagationStopped=s.thatReturnsFalse,this}function de(e,t,n,o){if(this.eventPool.length){var r=this.eventPool.pop();return this.call(r,e,t,n,o),r}return new this(e,t,n,o)}function pe(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=de,e.release=pe}a(ce.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=s.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=s.thatReturnsTrue)},persist:function(){this.isPersistent=s.thatReturnsTrue},isPersistent:s.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<le.length;t++)this[le[t]]=null}}),ce.Interface=ue,ce.extend=function(e){function t(){}function n(){return o.apply(this,arguments)}var o=this;t.prototype=o.prototype;var r=new t;return a(r,n.prototype),n.prototype=r,n.prototype.constructor=n,n.Interface=a({},o.Interface,e),n.extend=o.extend,fe(n),n},fe(ce);var he=ce.extend({data:null}),me=ce.extend({data:null}),ge=[9,13,27,32],_e=i.canUseDOM&&"CompositionEvent"in window,ve=null;i.canUseDOM&&"documentMode"in document&&(ve=document.documentMode);var ye=i.canUseDOM&&"TextEvent"in window&&!ve,be=i.canUseDOM&&(!_e||ve&&8<ve&&11>=ve),Ce=String.fromCharCode(32),Se={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},xe=!1;function Ee(e,t){switch(e){case"topKeyUp":return-1!==ge.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function ke(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var we=!1;var Ie={eventTypes:Se,extractEvents:function(e,t,n,o){var r=void 0,i=void 0;if(_e)e:{switch(e){case"topCompositionStart":r=Se.compositionStart;break e;case"topCompositionEnd":r=Se.compositionEnd;break e;case"topCompositionUpdate":r=Se.compositionUpdate;break e}r=void 0}else we?Ee(e,n)&&(r=Se.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(r=Se.compositionStart);return r?(be&&(we||r!==Se.compositionStart?r===Se.compositionEnd&&we&&(i=ae()):(ie._root=o,ie._startText=se(),we=!0)),r=he.getPooled(r,t,n,o),i?r.data=i:null!==(i=ke(n))&&(r.data=i),ee(r),i=r):i=null,(e=ye?function(e,t){switch(e){case"topCompositionEnd":return ke(t);case"topKeyPress":return 32!==t.which?null:(xe=!0,Ce);case"topTextInput":return(e=t.data)===Ce&&xe?null:e;default:return null}}(e,n):function(e,t){if(we)return"topCompositionEnd"===e||!_e&&Ee(e,t)?(e=ae(),ie._root=null,ie._startText=null,ie._fallbackText=null,we=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return be?null:t.data;default:return null}}(e,n))?((t=me.getPooled(Se.beforeInput,t,n,o)).data=e,ee(t)):t=null,null===i?t:null===t?i:[i,t]}},Te=null,Me={injectFiberControlledHostComponent:function(e){Te=e}},Pe=null,De=null;function Oe(e){if(e=w(e)){Te&&"function"==typeof Te.restoreControlledState||p("194");var t=k(e.stateNode);Te.restoreControlledState(e.stateNode,e.type,t)}}function Fe(e){Pe?De?De.push(e):De=[e]:Pe=e}function Re(){return null!==Pe||null!==De}function Ae(){if(Pe){var e=Pe,t=De;if(De=Pe=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}var Le=Object.freeze({injection:Me,enqueueStateRestore:Fe,needsStateRestore:Re,restoreStateIfNeeded:Ae});function Ne(e,t){return e(t)}function Be(e,t,n){return e(t,n)}function Ue(){}var je=!1;function We(e,t){if(je)return e(t);je=!0;try{return Ne(e,t)}finally{je=!1,Re()&&(Ue(),Ae())}}var He={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ze(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!He[e.type]:"textarea"===t}function Ke(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ve(e,t){return!(!i.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function Ge(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function qe(e){e._valueTracker||(e._valueTracker=function(e){var t=Ge(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),o=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){o=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return o},setValue:function(e){o=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function Ze(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),o="";return e&&(o=Ge(e)?e.checked?"true":"false":e.value),(e=o)!==n&&(t.setValue(e),!0)}var $e=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Ye="function"==typeof Symbol&&Symbol.for,Xe=Ye?Symbol.for("react.element"):60103,Qe=Ye?Symbol.for("react.call"):60104,Je=Ye?Symbol.for("react.return"):60105,et=Ye?Symbol.for("react.portal"):60106,tt=Ye?Symbol.for("react.fragment"):60107,nt=Ye?Symbol.for("react.strict_mode"):60108,ot=Ye?Symbol.for("react.provider"):60109,rt=Ye?Symbol.for("react.context"):60110,it=Ye?Symbol.for("react.async_mode"):60111,at=Ye?Symbol.for("react.forward_ref"):60112,st="function"==typeof Symbol&&Symbol.iterator;function lt(e){return null===e||void 0===e?null:"function"==typeof(e=st&&e[st]||e["@@iterator"])?e:null}function ut(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case tt:return"ReactFragment";case et:return"ReactPortal";case Qe:return"ReactCall";case Je:return"ReactReturn"}if("object"==typeof e&&null!==e)switch(e.$$typeof){case at:return""!==(e=e.render.displayName||e.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function ct(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,o=e._debugSource,r=ut(e),i=null;n&&(i=ut(n)),n=o,r="\n    in "+(r||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:r=""}t+=r,e=e.return}while(e);return t}var dt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt={},ft={};function ht(e,t,n,o,r){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=o,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=e,this.type=t}var mt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){mt[e]=new ht(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];mt[t]=new ht(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){mt[e]=new ht(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){mt[e]=new ht(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){mt[e]=new ht(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){mt[e]=new ht(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){mt[e]=new ht(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){mt[e]=new ht(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){mt[e]=new ht(e,5,!1,e.toLowerCase(),null)});var gt=/[\-:]([a-z])/g;function _t(e){return e[1].toUpperCase()}function vt(e,t,n,o){var r=mt.hasOwnProperty(t)?mt[t]:null;(null!==r?0===r.type:!o&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,o){if(null===t||void 0===t||function(e,t,n,o){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!o&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,o))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,r,o)&&(n=null),o||null===r?function(e){return!!ft.hasOwnProperty(e)||!pt.hasOwnProperty(e)&&(dt.test(e)?ft[e]=!0:(pt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):r.mustUseProperty?e[r.propertyName]=null===n?3!==r.type&&"":n:(t=r.attributeName,o=r.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,o?e.setAttributeNS(o,t,n):e.setAttribute(t,n))))}function yt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function bt(e,t){var n=null==t.defaultValue?"":t.defaultValue,o=null!=t.checked?t.checked:t.defaultChecked;n=kt(null!=t.value?t.value:n),e._wrapperState={initialChecked:o,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ct(e,t){null!=(t=t.checked)&&vt(e,"checked",t,!1)}function St(e,t){Ct(e,t);var n=kt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?Et(e,t.type,n):t.hasOwnProperty("defaultValue")&&Et(e,t.type,kt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function xt(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function Et(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function kt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(gt,_t);mt[t]=new ht(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(gt,_t);mt[t]=new ht(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(gt,_t);mt[t]=new ht(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),mt.tabIndex=new ht("tabIndex",1,!1,"tabindex",null);var wt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function It(e,t,n){return(e=ce.getPooled(wt.change,e,t,n)).type="change",Fe(n),ee(e),e}var Tt=null,Mt=null;function Pt(e){N(e,!1)}function Dt(e){if(Ze(K(e)))return e}function Ot(e,t){if("topChange"===e)return t}var Ft=!1;function Rt(){Tt&&(Tt.detachEvent("onpropertychange",At),Mt=Tt=null)}function At(e){"value"===e.propertyName&&Dt(Mt)&&We(Pt,e=It(Mt,e,Ke(e)))}function Lt(e,t,n){"topFocus"===e?(Rt(),Mt=n,(Tt=t).attachEvent("onpropertychange",At)):"topBlur"===e&&Rt()}function Nt(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return Dt(Mt)}function Bt(e,t){if("topClick"===e)return Dt(t)}function Ut(e,t){if("topInput"===e||"topChange"===e)return Dt(t)}i.canUseDOM&&(Ft=Ve("input")&&(!document.documentMode||9<document.documentMode));var jt={eventTypes:wt,_isInputEventSupported:Ft,extractEvents:function(e,t,n,o){var r=t?K(t):window,i=void 0,a=void 0,s=r.nodeName&&r.nodeName.toLowerCase();if("select"===s||"input"===s&&"file"===r.type?i=Ot:ze(r)?Ft?i=Ut:(i=Nt,a=Lt):(s=r.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===r.type||"radio"===r.type)&&(i=Bt),i&&(i=i(e,t)))return It(i,n,o);a&&a(e,r,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||r._wrapperState)&&e.controlled&&"number"===r.type&&Et(r,"number",r.value)}},Wt=ce.extend({view:null,detail:null}),Ht={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function zt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ht[e])&&!!t[e]}function Kt(){return zt}var Vt=Wt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Kt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),Gt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},qt={eventTypes:Gt,extractEvents:function(e,t,n,o){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var r=o.window===o?o:(r=o.ownerDocument)?r.defaultView||r.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?z(t):null):e=null,e===t)return null;var i=null==e?r:K(e);r=null==t?r:K(t);var a=Vt.getPooled(Gt.mouseLeave,e,n,o);return a.type="mouseleave",a.target=i,a.relatedTarget=r,(n=Vt.getPooled(Gt.mouseEnter,t,n,o)).type="mouseenter",n.target=r,n.relatedTarget=i,te(a,n,e,t),[a,n]}};function Zt(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function $t(e){return!!(e=e._reactInternalFiber)&&2===Zt(e)}function Yt(e){2!==Zt(e)&&p("188")}function Xt(e){var t=e.alternate;if(!t)return 3===(t=Zt(e))&&p("188"),1===t?null:e;for(var n=e,o=t;;){var r=n.return,i=r?r.alternate:null;if(!r||!i)break;if(r.child===i.child){for(var a=r.child;a;){if(a===n)return Yt(r),e;if(a===o)return Yt(r),t;a=a.sibling}p("188")}if(n.return!==o.return)n=r,o=i;else{a=!1;for(var s=r.child;s;){if(s===n){a=!0,n=r,o=i;break}if(s===o){a=!0,o=r,n=i;break}s=s.sibling}if(!a){for(s=i.child;s;){if(s===n){a=!0,n=i,o=r;break}if(s===o){a=!0,o=i,n=r;break}s=s.sibling}a||p("189")}}n.alternate!==o&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}function Qt(e){if(!(e=Xt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var Jt=ce.extend({animationName:null,elapsedTime:null,pseudoElement:null}),en=ce.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tn=Wt.extend({relatedTarget:null});function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var on={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},rn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=Wt.extend({key:function(e){if(e.key){var t=on[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?rn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Kt,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),sn=Vt.extend({dataTransfer:null}),ln=Wt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Kt}),un=ce.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),cn=Vt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),dn={},pn={};function fn(e,t){var n=e[0].toUpperCase()+e.slice(1),o="on"+n;t={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[n="top"+n],isInteractive:t},dn[e]=t,pn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){fn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){fn(e,!1)});var hn={eventTypes:dn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=pn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,o){var r=pn[e];if(!r)return null;switch(e){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":e=an;break;case"topBlur":case"topFocus":e=tn;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Vt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=sn;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=ln;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Jt;break;case"topTransitionEnd":e=un;break;case"topScroll":e=Wt;break;case"topWheel":e=cn;break;case"topCopy":case"topCut":case"topPaste":e=en;break;default:e=ce}return ee(t=e.getPooled(r,t,n,o)),t}},mn=hn.isInteractiveTopLevelEventType,gn=[];function _n(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=z(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],B(e.topLevelType,t,e.nativeEvent,Ke(e.nativeEvent))}var vn=!0;function yn(e){vn=!!e}function bn(e,t,n){if(!n)return null;e=(mn(e)?Sn:xn).bind(null,e),n.addEventListener(t,e,!1)}function Cn(e,t,n){if(!n)return null;e=(mn(e)?Sn:xn).bind(null,e),n.addEventListener(t,e,!0)}function Sn(e,t){Be(xn,e,t)}function xn(e,t){if(vn){var n=Ke(t);if(null!==(n=z(n))&&"number"==typeof n.tag&&2!==Zt(n)&&(n=null),gn.length){var o=gn.pop();o.topLevelType=e,o.nativeEvent=t,o.targetInst=n,e=o}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{We(_n,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>gn.length&&gn.push(e)}}}var En=Object.freeze({get _enabled(){return vn},setEnabled:yn,isEnabled:function(){return vn},trapBubbledEvent:bn,trapCapturedEvent:Cn,dispatchEvent:xn});function kn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var wn={animationend:kn("Animation","AnimationEnd"),animationiteration:kn("Animation","AnimationIteration"),animationstart:kn("Animation","AnimationStart"),transitionend:kn("Transition","TransitionEnd")},In={},Tn={};function Mn(e){if(In[e])return In[e];if(!wn[e])return e;var t,n=wn[e];for(t in n)if(n.hasOwnProperty(t)&&t in Tn)return In[e]=n[t];return e}i.canUseDOM&&(Tn=document.createElement("div").style,"AnimationEvent"in window||(delete wn.animationend.animation,delete wn.animationiteration.animation,delete wn.animationstart.animation),"TransitionEvent"in window||delete wn.transitionend.transition);var Pn={topAnimationEnd:Mn("animationend"),topAnimationIteration:Mn("animationiteration"),topAnimationStart:Mn("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:Mn("transitionend"),topWheel:"wheel"},Dn={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},On={},Fn=0,Rn="_reactListenersID"+(""+Math.random()).slice(2);function An(e){return Object.prototype.hasOwnProperty.call(e,Rn)||(e[Rn]=Fn++,On[e[Rn]]={}),On[e[Rn]]}function Ln(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Nn(e,t){var n,o=Ln(e);for(e=0;o;){if(3===o.nodeType){if(n=e+o.textContent.length,e<=t&&n>=t)return{node:o,offset:t-e};e=n}e:{for(;o;){if(o.nextSibling){o=o.nextSibling;break e}o=o.parentNode}o=void 0}o=Ln(o)}}function Bn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Un=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,jn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Wn=null,Hn=null,zn=null,Kn=!1;function Vn(e,t){if(Kn||null==Wn||Wn!==l())return null;var n=Wn;return"selectionStart"in n&&Bn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,zn&&u(zn,n)?null:(zn=n,(e=ce.getPooled(jn.select,Hn,e,t)).type="select",e.target=Wn,ee(e),e)}var Gn={eventTypes:jn,extractEvents:function(e,t,n,o){var r,i=o.window===o?o.document:9===o.nodeType?o:o.ownerDocument;if(!(r=!i)){e:{i=An(i),r=C.onSelect;for(var a=0;a<r.length;a++){var s=r[a];if(!i.hasOwnProperty(s)||!i[s]){i=!1;break e}}i=!0}r=!i}if(r)return null;switch(i=t?K(t):window,e){case"topFocus":(ze(i)||"true"===i.contentEditable)&&(Wn=i,Hn=t,zn=null);break;case"topBlur":zn=Hn=Wn=null;break;case"topMouseDown":Kn=!0;break;case"topContextMenu":case"topMouseUp":return Kn=!1,Vn(n,o);case"topSelectionChange":if(Un)break;case"topKeyDown":case"topKeyUp":return Vn(n,o)}return null}};function qn(e,t,n,o){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=o,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Zn(e,t,n){var o=e.alternate;return null===o?((o=new qn(e.tag,t,e.key,e.mode)).type=e.type,o.stateNode=e.stateNode,o.alternate=e,e.alternate=o):(o.pendingProps=t,o.effectTag=0,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null),o.expirationTime=n,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,o.sibling=e.sibling,o.index=e.index,o.ref=e.ref,o}function $n(e,t,n){var o=e.type,r=e.key;e=e.props;var i=void 0;if("function"==typeof o)i=o.prototype&&o.prototype.isReactComponent?2:0;else if("string"==typeof o)i=5;else switch(o){case tt:return Yn(e.children,t,n,r);case it:i=11,t|=3;break;case nt:i=11,t|=2;break;case Qe:i=7;break;case Je:i=9;break;default:if("object"==typeof o&&null!==o)switch(o.$$typeof){case ot:i=13;break;case rt:i=12;break;case at:i=14;break;default:if("number"==typeof o.tag)return(t=o).pendingProps=e,t.expirationTime=n,t;p("130",null==o?o:typeof o,"")}else p("130",null==o?o:typeof o,"")}return(t=new qn(i,e,r,t)).type=o,t.expirationTime=n,t}function Yn(e,t,n,o){return(e=new qn(10,e,o,t)).expirationTime=n,e}function Xn(e,t,n){return(e=new qn(6,e,null,t)).expirationTime=n,e}function Qn(e,t,n){return(t=new qn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}A.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=G.getFiberCurrentPropsFromNode,w=G.getInstanceFromNode,I=G.getNodeFromInstance,A.injectEventPluginsByName({SimpleEventPlugin:hn,EnterLeaveEventPlugin:qt,ChangeEventPlugin:jt,SelectEventPlugin:Gn,BeforeInputEventPlugin:Ie});var Jn=null,eo=null;function to(e){return function(t){try{return e(t)}catch(e){}}}function no(e){"function"==typeof Jn&&Jn(e)}function oo(e){"function"==typeof eo&&eo(e)}function ro(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function io(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var ao=void 0,so=void 0;function lo(e){ao=so=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=ro(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=ro(null)):e=null,ao=n,so=e!==n?e:null}function uo(e,t){lo(e),e=ao;var n=so;null===n?io(e,t):null===e.last||null===n.last?(io(e,t),io(n,t)):(io(e,t),n.last=t)}function co(e,t,n,o){return"function"==typeof(e=e.partialState)?e.call(t,n,o):e}function po(e,t,n,o,r,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var s=!0,l=n.first,u=!1;null!==l;){var c=l.expirationTime;if(c>i){var d=n.expirationTime;(0===d||d>c)&&(n.expirationTime=c),u||(u=!0,n.baseState=e)}else u||(n.first=l.next,null===n.first&&(n.last=null)),l.isReplace?(e=co(l,o,e,r),s=!0):(c=co(l,o,e,r))&&(e=s?a({},e,c):a(e,c),s=!1),l.isForced&&(n.hasForceUpdate=!0),null!==l.callback&&(null===(c=n.callbackList)&&(c=n.callbackList=[]),c.push(l)),null!==l.capturedValue&&(null===(c=n.capturedValues)?n.capturedValues=[l.capturedValue]:c.push(l.capturedValue));l=l.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),u||(n.baseState=e),e}function fo(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var o=n[e],r=o.callback;o.callback=null,"function"!=typeof r&&p("191",r),r.call(t)}}var ho=Array.isArray;function mo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var o=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),o=n.stateNode),o||p("147",e);var r=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===r?t.ref:((t=function(e){var t=o.refs===d?o.refs={}:o.refs;null===e?delete t[r]:t[r]=e})._stringRef=r,t)}"string"!=typeof e&&p("148"),n._owner||p("254",e)}return e}function go(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function _o(e){function t(t,n){if(e){var o=t.lastEffect;null!==o?(o.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,o){if(!e)return null;for(;null!==o;)t(n,o),o=o.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t,n){return(e=Zn(e,t,n)).index=0,e.sibling=null,e}function i(t,n,o){return t.index=o,e?null!==(o=t.alternate)?(o=o.index)<n?(t.effectTag=2,n):o:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,o){return null===t||6!==t.tag?((t=Xn(n,e.mode,o)).return=e,t):((t=r(t,n,o)).return=e,t)}function l(e,t,n,o){return null!==t&&t.type===n.type?((o=r(t,n.props,o)).ref=mo(e,t,n),o.return=e,o):((o=$n(n,e.mode,o)).ref=mo(e,t,n),o.return=e,o)}function u(e,t,n,o){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Qn(n,e.mode,o)).return=e,t):((t=r(t,n.children||[],o)).return=e,t)}function c(e,t,n,o,i){return null===t||10!==t.tag?((t=Yn(n,e.mode,o,i)).return=e,t):((t=r(t,n,o)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Xe:return(n=$n(t,e.mode,n)).ref=mo(e,null,t),n.return=e,n;case et:return(t=Qn(t,e.mode,n)).return=e,t}if(ho(t)||lt(t))return(t=Yn(t,e.mode,n,null)).return=e,t;go(e,t)}return null}function f(e,t,n,o){var r=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==r?null:s(e,t,""+n,o);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Xe:return n.key===r?n.type===tt?c(e,t,n.props.children,o,r):l(e,t,n,o):null;case et:return n.key===r?u(e,t,n,o):null}if(ho(n)||lt(n))return null!==r?null:c(e,t,n,o,null);go(e,n)}return null}function h(e,t,n,o,r){if("string"==typeof o||"number"==typeof o)return s(t,e=e.get(n)||null,""+o,r);if("object"==typeof o&&null!==o){switch(o.$$typeof){case Xe:return e=e.get(null===o.key?n:o.key)||null,o.type===tt?c(t,e,o.props.children,r,o.key):l(t,e,o,r);case et:return u(t,e=e.get(null===o.key?n:o.key)||null,o,r)}if(ho(o)||lt(o))return c(t,e=e.get(n)||null,o,r,null);go(t,o)}return null}function m(r,a,s,l){for(var u=null,c=null,p=a,m=a=0,g=null;null!==p&&m<s.length;m++){p.index>m?(g=p,p=null):g=p.sibling;var _=f(r,p,s[m],l);if(null===_){null===p&&(p=g);break}e&&p&&null===_.alternate&&t(r,p),a=i(_,a,m),null===c?u=_:c.sibling=_,c=_,p=g}if(m===s.length)return n(r,p),u;if(null===p){for(;m<s.length;m++)(p=d(r,s[m],l))&&(a=i(p,a,m),null===c?u=p:c.sibling=p,c=p);return u}for(p=o(r,p);m<s.length;m++)(g=h(p,r,m,s[m],l))&&(e&&null!==g.alternate&&p.delete(null===g.key?m:g.key),a=i(g,a,m),null===c?u=g:c.sibling=g,c=g);return e&&p.forEach(function(e){return t(r,e)}),u}function g(r,a,s,l){var u=lt(s);"function"!=typeof u&&p("150"),null==(s=u.call(s))&&p("151");for(var c=u=null,m=a,g=a=0,_=null,v=s.next();null!==m&&!v.done;g++,v=s.next()){m.index>g?(_=m,m=null):_=m.sibling;var y=f(r,m,v.value,l);if(null===y){m||(m=_);break}e&&m&&null===y.alternate&&t(r,m),a=i(y,a,g),null===c?u=y:c.sibling=y,c=y,m=_}if(v.done)return n(r,m),u;if(null===m){for(;!v.done;g++,v=s.next())null!==(v=d(r,v.value,l))&&(a=i(v,a,g),null===c?u=v:c.sibling=v,c=v);return u}for(m=o(r,m);!v.done;g++,v=s.next())null!==(v=h(m,r,g,v.value,l))&&(e&&null!==v.alternate&&m.delete(null===v.key?g:v.key),a=i(v,a,g),null===c?u=v:c.sibling=v,c=v);return e&&m.forEach(function(e){return t(r,e)}),u}return function(e,o,i,s){"object"==typeof i&&null!==i&&i.type===tt&&null===i.key&&(i=i.props.children);var l="object"==typeof i&&null!==i;if(l)switch(i.$$typeof){case Xe:e:{var u=i.key;for(l=o;null!==l;){if(l.key===u){if(10===l.tag?i.type===tt:l.type===i.type){n(e,l.sibling),(o=r(l,i.type===tt?i.props.children:i.props,s)).ref=mo(e,l,i),o.return=e,e=o;break e}n(e,l);break}t(e,l),l=l.sibling}i.type===tt?((o=Yn(i.props.children,e.mode,s,i.key)).return=e,e=o):((s=$n(i,e.mode,s)).ref=mo(e,o,i),s.return=e,e=s)}return a(e);case et:e:{for(l=i.key;null!==o;){if(o.key===l){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(e,o.sibling),(o=r(o,i.children||[],s)).return=e,e=o;break e}n(e,o);break}t(e,o),o=o.sibling}(o=Qn(i,e.mode,s)).return=e,e=o}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==o&&6===o.tag?(n(e,o.sibling),(o=r(o,i,s)).return=e,e=o):(n(e,o),(o=Xn(i,e.mode,s)).return=e,e=o),a(e);if(ho(i))return m(e,o,i,s);if(lt(i))return g(e,o,i,s);if(l&&go(e,i),void 0===i)switch(e.tag){case 2:case 1:p("152",(s=e.type).displayName||s.name||"Component")}return n(e,o)}}var vo=_o(!0),yo=_o(!1);function bo(e,t,n,o,r,i,s){function l(e,t,n){c(e,t,n,t.expirationTime)}function c(e,t,n,o){t.child=null===e?yo(t,null,n,o):vo(t,e.child,n,o)}function f(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function h(e,t,n,o,r,i){if(f(e,t),!n&&!r)return o&&T(t,!1),_(e,t);n=t.stateNode,$e.current=t;var a=r?null:n.render();return t.effectTag|=1,r&&(c(e,t,null,i),t.child=null),c(e,t,a,i),t.memoizedState=n.state,t.memoizedProps=n.props,o&&T(t,!0),t.child}function m(e){var t=e.stateNode;t.pendingContext?I(e,t.pendingContext,t.pendingContext!==t.context):t.context&&I(e,t.context,!1),C(e,t.containerInfo)}function g(e,t,n,o){var r=e.child;for(null!==r&&(r.return=e);null!==r;){switch(r.tag){case 12:var i=0|r.stateNode;if(r.type===t&&0!=(i&n)){for(i=r;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>o)i.expirationTime=o,null!==a&&(0===a.expirationTime||a.expirationTime>o)&&(a.expirationTime=o);else{if(null===a||!(0===a.expirationTime||a.expirationTime>o))break;a.expirationTime=o}i=i.return}i=null}else i=r.child;break;case 13:i=r.type===e.type?null:r.child;break;default:i=r.child}if(null!==i)i.return=r;else for(i=r;null!==i;){if(i===e){i=null;break}if(null!==(r=i.sibling)){i=r;break}i=i.return}r=i}}function _(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=Zn(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Zn(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var v=e.shouldSetTextContent,y=e.shouldDeprioritizeSubtree,b=t.pushHostContext,C=t.pushHostContainer,S=o.pushProvider,x=n.getMaskedContext,E=n.getUnmaskedContext,k=n.hasContextChanged,w=n.pushContextProvider,I=n.pushTopLevelContextObject,T=n.invalidateContextProvider,M=r.enterHydrationState,P=r.resetHydrationState,D=r.tryToClaimNextHydratableInstance,O=(e=function(e,t,n,o,r){function i(e,t,n,o,r,i){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,r,i):!(e.prototype&&e.prototype.isPureReactComponent&&u(t,n)&&u(o,r))}function s(e,t){t.updater=_,e.stateNode=t,t._reactInternalFiber=e}function l(e,t,n,o){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,o),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,o),t.state!==e&&_.enqueueReplaceState(t,t.state,null)}function c(e,t,n,o){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,o)}var p=e.cacheContext,f=e.getMaskedContext,h=e.getUnmaskedContext,m=e.isContextConsumer,g=e.hasContextChanged,_={isMounted:$t,enqueueSetState:function(e,o,r){e=e._reactInternalFiber,r=void 0===r?null:r;var i=n(e);uo(e,{expirationTime:i,partialState:o,callback:r,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueReplaceState:function(e,o,r){e=e._reactInternalFiber,r=void 0===r?null:r;var i=n(e);uo(e,{expirationTime:i,partialState:o,callback:r,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueForceUpdate:function(e,o){e=e._reactInternalFiber,o=void 0===o?null:o;var r=n(e);uo(e,{expirationTime:r,partialState:null,callback:o,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,r)}};return{adoptClassInstance:s,callGetDerivedStateFromProps:c,constructClassInstance:function(e,t){var n=e.type,o=h(e),r=m(e),i=r?f(e,o):d,l=null!==(n=new n(t,i)).state&&void 0!==n.state?n.state:null;return s(e,n),e.memoizedState=l,null!==(t=c(e,0,t,l))&&void 0!==t&&(e.memoizedState=a({},e.memoizedState,t)),r&&p(e,o,i),n},mountClassInstance:function(e,t){var n=e.type,o=e.alternate,r=e.stateNode,i=e.pendingProps,a=h(e);r.props=i,r.state=e.memoizedState,r.refs=d,r.context=f(e,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(n=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),n!==r.state&&_.enqueueReplaceState(r,r.state,null),null!==(n=e.updateQueue)&&(r.state=po(o,e,n,r,i,t))),"function"==typeof r.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,s=e.stateNode;s.props=e.memoizedProps,s.state=e.memoizedState;var u=e.memoizedProps,d=e.pendingProps,p=s.context,m=h(e);m=f(e,m),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(u!==d||p!==m)&&l(e,s,d,m),p=e.memoizedState,t=null!==e.updateQueue?po(null,e,e.updateQueue,s,d,t):p;var _=void 0;if(u!==d&&(_=c(e,0,d,t)),null!==_&&void 0!==_){t=null===t||void 0===t?_:a({},t,_);var v=e.updateQueue;null!==v&&(v.baseState=a({},v.baseState,_))}return u!==d||p!==t||g()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((u=i(e,u,d,p,t,m))?(n||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(e.effectTag|=4)):("function"==typeof s.componentDidMount&&(e.effectTag|=4),o(e,d),r(e,t)),s.props=d,s.state=t,s.context=m,u):("function"==typeof s.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var s=t.type,u=t.stateNode;u.props=t.memoizedProps,u.state=t.memoizedState;var d=t.memoizedProps,p=t.pendingProps,m=u.context,_=h(t);_=f(t,_),(s="function"==typeof s.getDerivedStateFromProps||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(d!==p||m!==_)&&l(t,u,p,_),m=t.memoizedState,n=null!==t.updateQueue?po(e,t,t.updateQueue,u,p,n):m;var v=void 0;if(d!==p&&(v=c(t,0,p,n)),null!==v&&void 0!==v){n=null===n||void 0===n?v:a({},n,v);var y=t.updateQueue;null!==y&&(y.baseState=a({},y.baseState,v))}return d!==p||m!==n||g()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((v=i(t,d,p,m,n,_))?(s||"function"!=typeof u.UNSAFE_componentWillUpdate&&"function"!=typeof u.componentWillUpdate||("function"==typeof u.componentWillUpdate&&u.componentWillUpdate(p,n,_),"function"==typeof u.UNSAFE_componentWillUpdate&&u.UNSAFE_componentWillUpdate(p,n,_)),"function"==typeof u.componentDidUpdate&&(t.effectTag|=4),"function"==typeof u.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof u.componentDidUpdate||d===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof u.getSnapshotBeforeUpdate||d===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),o(t,p),r(t,n)),u.props=p,u.state=n,u.context=_,v):("function"!=typeof u.componentDidUpdate||d===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof u.getSnapshotBeforeUpdate||d===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,i,s,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,F=e.callGetDerivedStateFromProps,R=e.constructClassInstance,A=e.mountClassInstance,L=e.resumeMountClassInstance,N=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:m(t);break;case 2:w(t);break;case 4:C(t,t.stateNode.containerInfo);break;case 13:S(t)}return null}switch(t.tag){case 0:null!==e&&p("155");var o=t.type,r=t.pendingProps,i=E(t);return o=o(r,i=x(t,i)),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(r=F(t,o,r,t.memoizedState))&&void 0!==r&&(t.memoizedState=a({},t.memoizedState,r))),r=w(t),O(t,o),A(t,n),e=h(e,t,!0,r,!1,n)):(t.tag=1,l(e,t,o),t.memoizedProps=r,e=t.child),e;case 1:return r=t.type,n=t.pendingProps,k()||t.memoizedProps!==n?(o=E(t),r=r(n,o=x(t,o)),t.effectTag|=1,l(e,t,r),t.memoizedProps=n,e=t.child):e=_(e,t),e;case 2:r=w(t),null===e?null===t.stateNode?(R(t,t.pendingProps),A(t,n),o=!0):o=L(t,n):o=N(e,t,n),i=!1;var s=t.updateQueue;return null!==s&&null!==s.capturedValues&&(i=o=!0),h(e,t,o,r,i,n);case 3:e:if(m(t),o=t.updateQueue,null!==o){if(i=t.memoizedState,r=po(e,t,o,null,null,n),t.memoizedState=r,null!==(o=t.updateQueue)&&null!==o.capturedValues)o=null;else{if(i===r){P(),e=_(e,t);break e}o=r.element}i=t.stateNode,(null===e||null===e.child)&&i.hydrate&&M(t)?(t.effectTag|=2,t.child=yo(t,null,o,n)):(P(),l(e,t,o)),t.memoizedState=r,e=t.child}else P(),e=_(e,t);return e;case 5:return b(t),null===e&&D(t),r=t.type,s=t.memoizedProps,o=t.pendingProps,i=null!==e?e.memoizedProps:null,k()||s!==o||((s=1&t.mode&&y(r,o))&&(t.expirationTime=1073741823),s&&1073741823===n)?(s=o.children,v(r,o)?s=null:i&&v(r,i)&&(t.effectTag|=16),f(e,t),1073741823!==n&&1&t.mode&&y(r,o)?(t.expirationTime=1073741823,t.memoizedProps=o,e=null):(l(e,t,s),t.memoizedProps=o,e=t.child)):e=_(e,t),e;case 6:return null===e&&D(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return r=t.pendingProps,k()||t.memoizedProps!==r||(r=t.memoizedProps),o=r.children,t.stateNode=null===e?yo(t,t.stateNode,o,n):vo(t,e.stateNode,o,n),t.memoizedProps=r,t.stateNode;case 9:return null;case 4:return C(t,t.stateNode.containerInfo),r=t.pendingProps,k()||t.memoizedProps!==r?(null===e?t.child=vo(t,null,r,n):l(e,t,r),t.memoizedProps=r,e=t.child):e=_(e,t),e;case 14:return l(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,k()||t.memoizedProps!==n?(l(e,t,n),t.memoizedProps=n,e=t.child):e=_(e,t),e;case 11:return n=t.pendingProps.children,k()||null!==n&&t.memoizedProps!==n?(l(e,t,n),t.memoizedProps=n,e=t.child):e=_(e,t),e;case 13:return function(e,t,n){var o=t.type._context,r=t.pendingProps,i=t.memoizedProps;if(!k()&&i===r)return t.stateNode=0,S(t),_(e,t);var a=r.value;if(t.memoizedProps=r,null===i)a=1073741823;else if(i.value===r.value){if(i.children===r.children)return t.stateNode=0,S(t),_(e,t);a=0}else{var s=i.value;if(s===a&&(0!==s||1/s==1/a)||s!=s&&a!=a){if(i.children===r.children)return t.stateNode=0,S(t),_(e,t);a=0}else if(a="function"==typeof o._calculateChangedBits?o._calculateChangedBits(s,a):1073741823,0==(a|=0)){if(i.children===r.children)return t.stateNode=0,S(t),_(e,t)}else g(t,o,a,n)}return t.stateNode=a,S(t),l(e,t,r.children),t.child}(e,t,n);case 12:e:{o=t.type,i=t.pendingProps,s=t.memoizedProps,r=o._currentValue;var u=o._changedBits;if(k()||0!==u||s!==i){t.memoizedProps=i;var c=i.unstable_observedBits;if(void 0!==c&&null!==c||(c=1073741823),t.stateNode=c,0!=(u&c))g(t,o,u,n);else if(s===i){e=_(e,t);break e}l(e,t,n=(n=i.children)(r)),e=t.child}else e=_(e,t)}return e;default:p("156")}}}}function Co(e,t){var n=t.source;null===t.stack&&ct(n),null!==n&&ut(n),t=t.value,null!==e&&2===e.tag&&ut(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var So={};function xo(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)R(e),e=e.return;te=null,ne=0,ee=null,ie=!1}function n(e){return null!==ae&&ae.has(e)}function o(e){for(;;){var t=e.alternate,n=e.return,o=e.sibling;if(0==(512&e.effectTag)){t=D(t,e,ne);var r=e;if(1073741823===ne||1073741823!==r.expirationTime){e:switch(r.tag){case 3:case 2:var i=r.updateQueue;i=null===i?0:i.expirationTime;break e;default:i=0}for(var a=r.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;r.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==o)return o;if(null===n){ie=!0;break}e=n}else{if(null!==(e=F(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==o)return o;if(null===n)break;e=n}}return null}function r(e){var t=P(e.alternate,e,ne);return null===t&&(t=o(e)),$e.current=null,t}function i(e,n,i){J&&p("243"),J=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=Zn((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(i)for(;null!==ee&&!E();)ee=r(ee);else for(;null!==ee;)ee=r(ee)}catch(e){if(null===ee){a=!0,k(e);break}var s=(i=ee).return;if(null===s){a=!0,k(e);break}O(s,i,e),ee=o(i)}break}return J=!1,a||null!==ee?null:ie?(e.pendingCommitExpirationTime=n,e.current.alternate):void p("262")}function s(e,t,n,o){uo(t,{expirationTime:o,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:ct(e)},next:null}),c(t,o)}function l(e,t){e:{J&&!re&&p("263");for(var o=e.return;null!==o;){switch(o.tag){case 2:var r=o.stateNode;if("function"==typeof o.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&!n(r)){s(e,o,t,1),e=void 0;break e}break;case 3:s(e,o,t,1),e=void 0;break e}o=o.return}3===e.tag&&s(e,e,t,1),e=void 0}return e}function u(e){return e=0!==Q?Q:J?re?1:ne:1&e.mode?Ce?10*(1+((f()+15)/10|0)):25*(1+((f()+500)/25|0)):1,Ce&&(0===he||e>he)&&(he=e),e}function c(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var o=e.stateNode;!J&&0!==ne&&n<ne&&t(),J&&!re&&te===o||g(o,n),Ee>xe&&p("185")}e=e.return}n=void 0}return n}function f(){return Y=K()-$,2+(Y/10|0)}function h(e,t,n,o,r){var i=Q;Q=1;try{return e(t,n,o,r)}finally{Q=i}}function m(e){if(0!==ue){if(e>ue)return;G(ce)}var t=K()-$;ue=e,ce=V(v,{timeout:10*(e-2)-t})}function g(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===le?(se=le=e,e.nextScheduledRoot=e):(le=le.nextScheduledRoot=e).nextScheduledRoot=se;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}de||(ye?be&&(pe=e,fe=1,S(e,1,!1)):1===t?y():m(t))}function _(){var e=0,t=null;if(null!==le)for(var n=le,o=se;null!==o;){var r=o.remainingExpirationTime;if(0===r){if((null===n||null===le)&&p("244"),o===o.nextScheduledRoot){se=le=o.nextScheduledRoot=null;break}if(o===se)se=r=o.nextScheduledRoot,le.nextScheduledRoot=r,o.nextScheduledRoot=null;else{if(o===le){(le=n).nextScheduledRoot=se,o.nextScheduledRoot=null;break}n.nextScheduledRoot=o.nextScheduledRoot,o.nextScheduledRoot=null}o=n.nextScheduledRoot}else{if((0===e||r<e)&&(e=r,t=o),o===le)break;n=o,o=o.nextScheduledRoot}}null!==(n=pe)&&n===t&&1===e?Ee++:Ee=0,pe=t,fe=e}function v(e){b(0,!0,e)}function y(){b(1,!1,null)}function b(e,t,n){if(ve=n,_(),t)for(;null!==pe&&0!==fe&&(0===e||e>=fe)&&(!me||f()>=fe);)S(pe,fe,!me),_();else for(;null!==pe&&0!==fe&&(0===e||e>=fe);)S(pe,fe,!1),_();null!==ve&&(ue=0,ce=-1),0!==fe&&m(fe),ve=null,me=!1,C()}function C(){if(Ee=0,null!==Se){var e=Se;Se=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ge||(ge=!0,_e=e)}}}if(ge)throw e=_e,_e=null,ge=!1,e}function S(e,t,n){de&&p("245"),de=!0,n?null!==(n=e.finishedWork)?x(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!0))&&(E()?e.finishedWork=n:x(e,n,t))):null!==(n=e.finishedWork)?x(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!1))&&x(e,n,t)),de=!1}function x(e,t,n){var o=e.firstBatch;if(null!==o&&o._expirationTime<=n&&(null===Se?Se=[o]:Se.push(o),o._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,re=J=!0,(n=t.stateNode).current===t&&p("177"),0===(o=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0;var r=f();if($e.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var i=t.firstEffect}else i=t;else i=t.firstEffect;for(q(n.containerInfo),oe=i;null!==oe;){var a=!1,s=void 0;try{for(;null!==oe;)2048&oe.effectTag&&A(oe.alternate,oe),oe=oe.nextEffect}catch(e){a=!0,s=e}a&&(null===oe&&p("178"),l(oe,s),null!==oe&&(oe=oe.nextEffect))}for(oe=i;null!==oe;){a=!1,s=void 0;try{for(;null!==oe;){var u=oe.effectTag;if(16&u&&L(oe),128&u){var c=oe.alternate;null!==c&&z(c)}switch(14&u){case 2:N(oe),oe.effectTag&=-3;break;case 6:N(oe),oe.effectTag&=-3,U(oe.alternate,oe);break;case 4:U(oe.alternate,oe);break;case 8:B(oe)}oe=oe.nextEffect}}catch(e){a=!0,s=e}a&&(null===oe&&p("178"),l(oe,s),null!==oe&&(oe=oe.nextEffect))}for(Z(n.containerInfo),n.current=t,oe=i;null!==oe;){u=!1,c=void 0;try{for(i=n,a=r,s=o;null!==oe;){var d=oe.effectTag;36&d&&j(i,oe.alternate,oe,a,s),256&d&&W(oe,k),128&d&&H(oe);var h=oe.nextEffect;oe.nextEffect=null,oe=h}}catch(e){u=!0,c=e}u&&(null===oe&&p("178"),l(oe,c),null!==oe&&(oe=oe.nextEffect))}J=re=!1,no(t.stateNode),0===(t=n.current.expirationTime)&&(ae=null),e.remainingExpirationTime=t}function E(){return!(null===ve||ve.timeRemaining()>ke)&&(me=!0)}function k(e){null===pe&&p("246"),pe.remainingExpirationTime=0,ge||(ge=!0,_e=e)}var w=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,o){e[++t]=n.current,n.current=o},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),I=function(e,t){function n(e){return e===So&&p("174"),e}var o=e.getChildHostContext,r=e.getRootHostContext;e=t.createCursor;var i=t.push,a=t.pop,s=e(So),l=e(So),u=e(So);return{getHostContext:function(){return n(s.current)},getRootHostContainer:function(){return n(u.current)},popHostContainer:function(e){a(s,e),a(l,e),a(u,e)},popHostContext:function(e){l.current===e&&(a(s,e),a(l,e))},pushHostContainer:function(e,t){i(u,t,e),i(l,e,e),i(s,So,e),t=r(t),a(s,e),i(s,t,e)},pushHostContext:function(e){var t=n(u.current),r=n(s.current);r!==(t=o(r,e.type,t))&&(i(l,e,e),i(s,t,e))}}}(e,w),T=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function o(e,t){var n=e.stateNode,o=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var r in n=n.getChildContext())r in o||p("108",ut(e)||"Unknown",r);return a({},t,n)}var r=e.createCursor,i=e.push,s=e.pop,l=r(d),u=r(!1),c=d;return{getUnmaskedContext:function(e){return n(e)?c:l.current},cacheContext:t,getMaskedContext:function(e,n){var o=e.type.contextTypes;if(!o)return d;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in o)a[i]=n[i];return r&&t(e,n,a),a},hasContextChanged:function(){return u.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(s(u,e),s(l,e))},popTopLevelContextObject:function(e){s(u,e),s(l,e)},pushTopLevelContextObject:function(e,t,n){null!=l.cursor&&p("168"),i(l,t,e),i(u,n,e)},processChildContext:o,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||d,c=l.current,i(l,t,e),i(u,u.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||p("169"),t){var r=o(e,c);n.__reactInternalMemoizedMergedChildContext=r,s(u,e),s(l,e),i(l,r,e)}else s(u,e);i(u,t,e)},findCurrentUnmaskedContext:function(e){for((2!==Zt(e)||2!==e.tag)&&p("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||p("171")}return e.stateNode.context}}}(w);w=function(e){var t=e.createCursor,n=e.push,o=e.pop,r=t(null),i=t(null),a=t(0);return{pushProvider:function(e){var t=e.type._context;n(a,t._changedBits,e),n(i,t._currentValue,e),n(r,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=a.current,n=i.current;o(r,e),o(i,e),o(a,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(w);var M=function(e){function t(e,t){var n=new qn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=i(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=a(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function o(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;d=e}var r=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){p("175")},prepareToHydrateHostTextInstance:function(){p("176")},popHydrationState:function(){return!1}};var i=e.canHydrateInstance,a=e.canHydrateTextInstance,s=e.getNextHydratableSibling,l=e.getFirstHydratableChild,u=e.hydrateInstance,c=e.hydrateTextInstance,d=null,f=null,h=!1;return{enterHydrationState:function(e){return f=l(e.stateNode.containerInfo),d=e,h=!0},resetHydrationState:function(){f=d=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var o=f;if(o){if(!n(e,o)){if(!(o=s(o))||!n(e,o))return e.effectTag|=2,h=!1,void(d=e);t(d,f)}d=e,f=l(o)}else e.effectTag|=2,h=!1,d=e}},prepareToHydrateHostInstance:function(e,t,n){return t=u(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return c(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==d)return!1;if(!h)return o(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!r(n,e.memoizedProps))for(n=f;n;)t(e,n),n=s(n);return o(e),f=d?s(e.stateNode):null,!0}}}(e),P=bo(e,I,T,w,M,c,u).beginWork,D=function(e,t,n,o,r){function i(e){e.effectTag|=4}var a=e.createInstance,s=e.createTextInstance,l=e.appendInitialChild,u=e.finalizeInitialChildren,c=e.prepareUpdate,d=e.persistence,f=t.getRootHostContainer,h=t.popHostContext,m=t.getHostContext,g=t.popHostContainer,_=n.popContextProvider,v=n.popTopLevelContextObject,y=o.popProvider,b=r.prepareToHydrateHostInstance,C=r.prepareToHydrateHostTextInstance,S=r.popHydrationState,x=void 0,E=void 0,k=void 0;return e.mutation?(x=function(){},E=function(e,t,n){(t.updateQueue=n)&&i(t)},k=function(e,t,n,o){n!==o&&i(t)}):p(d?"235":"236"),{completeWork:function(e,t,n){var o=t.pendingProps;switch(t.tag){case 1:return null;case 2:return _(t),e=t.stateNode,null!==(o=t.updateQueue)&&null!==o.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:o.capturedValues=null),null;case 3:return g(t),v(t),(o=t.stateNode).pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),null!==e&&null!==e.child||(S(t),t.effectTag&=-3),x(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:h(t),n=f();var r=t.type;if(null!==e&&null!=t.stateNode){var d=e.memoizedProps,w=t.stateNode,I=m();w=c(w,r,d,o,n,I),E(e,t,w,r,d,o,n,I),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!o)return null===t.stateNode&&p("166"),null;if(e=m(),S(t))b(t,n,e)&&i(t);else{d=a(r,o,n,e,t);e:for(I=t.child;null!==I;){if(5===I.tag||6===I.tag)l(d,I.stateNode);else if(4!==I.tag&&null!==I.child){I.child.return=I,I=I.child;continue}if(I===t)break;for(;null===I.sibling;){if(null===I.return||I.return===t)break e;I=I.return}I.sibling.return=I.return,I=I.sibling}u(d,r,o,n,e)&&i(t),t.stateNode=d}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)k(e,t,e.memoizedProps,o);else{if("string"!=typeof o)return null===t.stateNode&&p("166"),null;e=f(),n=m(),S(t)?C(t)&&i(t):t.stateNode=s(o,e,n,t)}return null;case 7:(o=t.memoizedProps)||p("165"),t.tag=8,r=[];e:for((d=t.stateNode)&&(d.return=t);null!==d;){if(5===d.tag||6===d.tag||4===d.tag)p("247");else if(9===d.tag)r.push(d.pendingProps.value);else if(null!==d.child){d.child.return=d,d=d.child;continue}for(;null===d.sibling;){if(null===d.return||d.return===t)break e;d=d.return}d.sibling.return=d.return,d=d.sibling}return o=(d=o.handler)(o.props,r),t.child=vo(t,null!==e?e.child:null,o,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return g(t),x(t),null;case 13:return y(t),null;case 12:return null;case 0:p("167");default:p("156")}}}}(e,I,T,w,M).completeWork,O=(I=function(e,t,n,o,r){var i=e.popHostContainer,a=e.popHostContext,s=t.popContextProvider,l=t.popTopLevelContextObject,u=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:ct(t)};do{switch(e.tag){case 3:return lo(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!r(n)){lo(e);var o=(n=e.updateQueue).capturedValues;return null===o?n.capturedValues=[t]:o.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:s(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return i(e),l(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return a(e),null;case 4:return i(e),null;case 13:return u(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:s(e);break;case 3:i(e),l(e);break;case 5:a(e);break;case 4:i(e);break;case 13:u(e)}}}}(I,T,w,0,n)).throwException,F=I.unwindWork,R=I.unwindInterruptedWork,A=(I=function(e,t,n,o,r){function i(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function a(e){switch(oo(e),e.tag){case 2:i(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:i(e);break;case 7:s(e.stateNode);break;case 4:d&&u(e)}}function s(e){for(var t=e;;)if(a(t),null===t.child||d&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function l(e){return 5===e.tag||3===e.tag||4===e.tag}function u(e){for(var t=e,n=!1,o=void 0,r=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:o=n.stateNode,r=!1;break e;case 3:case 4:o=n.stateNode.containerInfo,r=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)s(t),r?S(o,t.stateNode):C(o,t.stateNode);else if(4===t.tag?o=t.stateNode.containerInfo:a(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var c=e.getPublicInstance,d=e.mutation;e=e.persistence,d||p(e?"235":"236");var f=d.commitMount,h=d.commitUpdate,m=d.resetTextContent,g=d.commitTextUpdate,_=d.appendChild,v=d.appendChildToContainer,y=d.insertBefore,b=d.insertInContainerBefore,C=d.removeChild,S=d.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,o=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,o),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:p("163")}},commitResetTextContent:function(e){m(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(l(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var o=t=void 0;switch(n.tag){case 5:t=n.stateNode,o=!1;break;case 3:case 4:t=n.stateNode.containerInfo,o=!0;break;default:p("161")}16&n.effectTag&&(m(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||l(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var r=e;;){if(5===r.tag||6===r.tag)n?o?b(t,r.stateNode,n):y(t,r.stateNode,n):o?v(t,r.stateNode):_(t,r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)break;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},commitDeletion:function(e){u(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var o=t.memoizedProps;e=null!==e?e.memoizedProps:o;var r=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&h(n,i,r,e,o,t)}break;case 6:null===t.stateNode&&p("162"),n=t.memoizedProps,g(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:p("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var o=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(o,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&fo(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=c(n.child.stateNode);break;case 2:e=n.child.stateNode}fo(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&f(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:p("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var o=e.updateQueue;(null===o||null===o.capturedValues)&&p("264");var i=o.capturedValues;for(o.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&r(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<i.length;n++){var a=(o=i[n]).value,s=o.stack;Co(e,o),t.componentDidCatch(a,{componentStack:null!==s?s:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&p("264"),i=n.capturedValues,n.capturedValues=null,n=0;n<i.length;n++)Co(e,o=i[n]),t(o.value);break;default:p("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=c(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,l,0,0,function(e){null===ae?ae=new Set([e]):ae.add(e)})).commitBeforeMutationLifeCycles,L=I.commitResetTextContent,N=I.commitPlacement,B=I.commitDeletion,U=I.commitWork,j=I.commitLifeCycles,W=I.commitErrorLogging,H=I.commitAttachRef,z=I.commitDetachRef,K=e.now,V=e.scheduleDeferredCallback,G=e.cancelDeferredCallback,q=e.prepareForCommit,Z=e.resetAfterCommit,$=K(),Y=$,X=0,Q=0,J=!1,ee=null,te=null,ne=0,oe=null,re=!1,ie=!1,ae=null,se=null,le=null,ue=0,ce=-1,de=!1,pe=null,fe=0,he=0,me=!1,ge=!1,_e=null,ve=null,ye=!1,be=!1,Ce=!1,Se=null,xe=1e3,Ee=0,ke=1;return{recalculateCurrentTime:f,computeExpirationForFiber:u,scheduleWork:c,requestWork:g,flushRoot:function(e,t){de&&p("253"),pe=e,fe=t,S(e,t,!1),y(),C()},batchedUpdates:function(e,t){var n=ye;ye=!0;try{return e(t)}finally{(ye=n)||de||y()}},unbatchedUpdates:function(e,t){if(ye&&!be){be=!0;try{return e(t)}finally{be=!1}}return e(t)},flushSync:function(e,t){de&&p("187");var n=ye;ye=!0;try{return h(e,t)}finally{ye=n,y()}},flushControlled:function(e){var t=ye;ye=!0;try{h(e)}finally{(ye=t)||de||b(1,!1,null)}},deferredUpdates:function(e){var t=Q;Q=25*(1+((f()+500)/25|0));try{return e()}finally{Q=t}},syncUpdates:h,interactiveUpdates:function(e,t,n){if(Ce)return e(t,n);ye||de||0===he||(b(he,!1,null),he=0);var o=Ce,r=ye;ye=Ce=!0;try{return e(t,n)}finally{Ce=o,(ye=r)||de||y()}},flushInteractiveUpdates:function(){de||0===he||(b(he,!1,null),he=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((f()+500)/25|0));return e<=X&&(e=X+1),X=e},legacyContext:T}}function Eo(e){function t(e,t,n,o,r,a){if(o=t.current,n){n=n._reactInternalFiber;var s=l(n);n=u(n)?c(n,s):s}else n=d;return null===t.context?t.context=n:t.pendingContext=n,uo(o,{expirationTime:r,partialState:{element:e},callback:void 0===(t=a)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),i(o,r),r}var n=e.getPublicInstance,o=(e=xo(e)).recalculateCurrentTime,r=e.computeExpirationForFiber,i=e.scheduleWork,s=e.legacyContext,l=s.findCurrentUnmaskedContext,u=s.isContextProvider,c=s.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new qn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,i,a){var s=n.current;return t(e,n,i,o(),s=r(s),a)},updateContainerAtExpirationTime:function(e,n,r,i,a){return t(e,n,r,o(),i,a)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?p("188"):p("268",Object.keys(e))),null===(e=Qt(t))?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Xt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Jn=to(function(e){return t.onCommitFiberRoot(n,e)}),eo=to(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return null===(e=Qt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var ko=Object.freeze({default:Eo}),wo=ko&&Eo||ko,Io=wo.default?wo.default:wo;var To="object"==typeof performance&&"function"==typeof performance.now,Mo=void 0;Mo=To?function(){return performance.now()}:function(){return Date.now()};var Po=void 0,Do=void 0;if(i.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Oo=null,Fo=!1,Ro=-1,Ao=!1,Lo=0,No=33,Bo=33,Uo=void 0;Uo=To?{didTimeout:!1,timeRemaining:function(){var e=Lo-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Lo-Date.now();return 0<e?e:0}};var jo="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===jo){if(Fo=!1,e=Mo(),0>=Lo-e){if(!(-1!==Ro&&Ro<=e))return void(Ao||(Ao=!0,requestAnimationFrame(Wo)));Uo.didTimeout=!0}else Uo.didTimeout=!1;Ro=-1,e=Oo,Oo=null,null!==e&&e(Uo)}},!1);var Wo=function(e){Ao=!1;var t=e-Lo+Bo;t<Bo&&No<Bo?(8>t&&(t=8),Bo=t<No?No:t):No=t,Lo=e+Bo,Fo||(Fo=!0,window.postMessage(jo,"*"))};Po=function(e,t){return Oo=e,null!=t&&"number"==typeof t.timeout&&(Ro=Mo()+t.timeout),Ao||(Ao=!0,requestAnimationFrame(Wo)),0},Do=function(){Oo=null,Fo=!1,Ro=-1}}else Po=window.requestIdleCallback,Do=window.cancelIdleCallback;else Po=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Do=function(e){clearTimeout(e)};function Ho(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function zo(e,t,n,o){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r),r&&o&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,r=0;r<e.length;r++){if(e[r].value===n)return e[r].selected=!0,void(o&&(e[r].defaultSelected=!0));null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}function Ko(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Vo(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Go(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function qo(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Zo(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var $o={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Yo(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Xo(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Yo(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Qo,Jo=void 0,er=(Qo=function(e,t){if(e.namespaceURI!==$o.svg||"innerHTML"in e)e.innerHTML=t;else{for((Jo=Jo||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Jo.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,o){MSApp.execUnsafeLocalFunction(function(){return Qo(e,t)})}:Qo);function tr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var nr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},or=["Webkit","ms","Moz","O"];function rr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var o=0===n.indexOf("--"),r=n,i=t[n];r=null==i||"boolean"==typeof i||""===i?"":o||"number"!=typeof i||0===i||nr.hasOwnProperty(r)&&nr[r]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),o?e.setProperty(n,r):e[n]=r}}Object.keys(nr).forEach(function(e){or.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),nr[t]=nr[e]})});var ir=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ar(e,t,n){t&&(ir[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",n()))}function sr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var lr=s.thatReturns("");function ur(e,t){var n=An(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=C[t];for(var o=0;o<t.length;o++){var r=t[o];n.hasOwnProperty(r)&&n[r]||("topScroll"===r?Cn("topScroll","scroll",e):"topFocus"===r||"topBlur"===r?(Cn("topFocus","focus",e),Cn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===r?(Ve("cancel",!0)&&Cn("topCancel","cancel",e),n.topCancel=!0):"topClose"===r?(Ve("close",!0)&&Cn("topClose","close",e),n.topClose=!0):Pn.hasOwnProperty(r)&&bn(r,Pn[r],e),n[r]=!0)}}function cr(e,t,n,o){return n=9===n.nodeType?n:n.ownerDocument,o===$o.html&&(o=Yo(e)),o===$o.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(o,e),e}function dr(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function pr(e,t,n,o){var r=sr(t,n);switch(t){case"iframe":case"object":bn("topLoad","load",e);var i=n;break;case"video":case"audio":for(i in Dn)Dn.hasOwnProperty(i)&&bn(i,Dn[i],e);i=n;break;case"source":bn("topError","error",e),i=n;break;case"img":case"image":case"link":bn("topError","error",e),bn("topLoad","load",e),i=n;break;case"form":bn("topReset","reset",e),bn("topSubmit","submit",e),i=n;break;case"details":bn("topToggle","toggle",e),i=n;break;case"input":bt(e,n),i=yt(e,n),bn("topInvalid","invalid",e),ur(o,"onChange");break;case"option":i=Ho(e,n);break;case"select":Ko(e,n),i=a({},n,{value:void 0}),bn("topInvalid","invalid",e),ur(o,"onChange");break;case"textarea":Go(e,n),i=Vo(e,n),bn("topInvalid","invalid",e),ur(o,"onChange");break;default:i=n}ar(t,i,lr);var l,u=i;for(l in u)if(u.hasOwnProperty(l)){var c=u[l];"style"===l?rr(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&er(e,c):"children"===l?"string"==typeof c?("textarea"!==t||""!==c)&&tr(e,c):"number"==typeof c&&tr(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(b.hasOwnProperty(l)?null!=c&&ur(o,l):null!=c&&vt(e,l,c,r))}switch(t){case"input":qe(e),xt(e,n);break;case"textarea":qe(e),Zo(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?zo(e,!!n.multiple,t,!1):null!=n.defaultValue&&zo(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=s)}}function fr(e,t,n,o,r){var i=null;switch(t){case"input":n=yt(e,n),o=yt(e,o),i=[];break;case"option":n=Ho(e,n),o=Ho(e,o),i=[];break;case"select":n=a({},n,{value:void 0}),o=a({},o,{value:void 0}),i=[];break;case"textarea":n=Vo(e,n),o=Vo(e,o),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof o.onClick&&(e.onclick=s)}ar(t,o,lr),t=e=void 0;var l=null;for(e in n)if(!o.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var u=n[e];for(t in u)u.hasOwnProperty(t)&&(l||(l={}),l[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(b.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in o){var c=o[e];if(u=null!=n?n[e]:void 0,o.hasOwnProperty(e)&&c!==u&&(null!=c||null!=u))if("style"===e)if(u){for(t in u)!u.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(l||(l={}),l[t]="");for(t in c)c.hasOwnProperty(t)&&u[t]!==c[t]&&(l||(l={}),l[t]=c[t])}else l||(i||(i=[]),i.push(e,l)),l=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(i=i||[]).push(e,""+c)):"children"===e?u===c||"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(b.hasOwnProperty(e)?(null!=c&&ur(r,e),i||u===c||(i=[])):(i=i||[]).push(e,c))}return l&&(i=i||[]).push("style",l),i}function hr(e,t,n,o,r){"input"===n&&"radio"===r.type&&null!=r.name&&Ct(e,r),sr(n,o),o=sr(n,r);for(var i=0;i<t.length;i+=2){var a=t[i],s=t[i+1];"style"===a?rr(e,s):"dangerouslySetInnerHTML"===a?er(e,s):"children"===a?tr(e,s):vt(e,a,s,o)}switch(n){case"input":St(e,r);break;case"textarea":qo(e,r);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!r.multiple,null!=(n=r.value)?zo(e,!!r.multiple,n,!1):t!==!!r.multiple&&(null!=r.defaultValue?zo(e,!!r.multiple,r.defaultValue,!0):zo(e,!!r.multiple,r.multiple?[]:"",!1))}}function mr(e,t,n,o,r){switch(t){case"iframe":case"object":bn("topLoad","load",e);break;case"video":case"audio":for(var i in Dn)Dn.hasOwnProperty(i)&&bn(i,Dn[i],e);break;case"source":bn("topError","error",e);break;case"img":case"image":case"link":bn("topError","error",e),bn("topLoad","load",e);break;case"form":bn("topReset","reset",e),bn("topSubmit","submit",e);break;case"details":bn("topToggle","toggle",e);break;case"input":bt(e,n),bn("topInvalid","invalid",e),ur(r,"onChange");break;case"select":Ko(e,n),bn("topInvalid","invalid",e),ur(r,"onChange");break;case"textarea":Go(e,n),bn("topInvalid","invalid",e),ur(r,"onChange")}for(var a in ar(t,n,lr),o=null,n)n.hasOwnProperty(a)&&(i=n[a],"children"===a?"string"==typeof i?e.textContent!==i&&(o=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(o=["children",""+i]):b.hasOwnProperty(a)&&null!=i&&ur(r,a));switch(t){case"input":qe(e),xt(e,n);break;case"textarea":qe(e),Zo(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=s)}return o}function gr(e,t){return e.nodeValue!==t}var _r=Object.freeze({createElement:cr,createTextNode:dr,setInitialProperties:pr,diffProperties:fr,updateProperties:hr,diffHydratedProperties:mr,diffHydratedText:gr,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(St(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var o=n[t];if(o!==e&&o.form===e.form){var r=V(o);r||p("90"),Ze(o),St(o,r)}}}break;case"textarea":qo(e,n);break;case"select":null!=(t=n.value)&&zo(e,!!n.multiple,t,!1)}}});Me.injectFiberControlledHostComponent(_r);var vr=null,yr=null;function br(e){this._expirationTime=kr.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Cr(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Sr(e,t,n){this._internalRoot=kr.createContainer(e,t,n)}function xr(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Er(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}br.prototype.render=function(e){this._defer||p("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,o=new Cr;return kr.updateContainerAtExpirationTime(e,t,null,n,o._onCommit),o},br.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},br.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||p("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var o=null,r=t;r!==this;)o=r,r=r._next;null===o&&p("251"),o._next=r._next,this._next=t,e.firstBatch=this}this._defer=!1,kr.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},br.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Cr.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Cr.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&p("191",n),n()}}},Sr.prototype.render=function(e,t){var n=this._internalRoot,o=new Cr;return null!==(t=void 0===t?null:t)&&o.then(t),kr.updateContainer(e,n,null,o._onCommit),o},Sr.prototype.unmount=function(e){var t=this._internalRoot,n=new Cr;return null!==(e=void 0===e?null:e)&&n.then(e),kr.updateContainer(null,t,null,n._onCommit),n},Sr.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var o=this._internalRoot,r=new Cr;return null!==(n=void 0===n?null:n)&&r.then(n),kr.updateContainer(t,o,e,r._onCommit),r},Sr.prototype.createBatch=function(){var e=new br(this),t=e._expirationTime,n=this._internalRoot,o=n.firstBatch;if(null===o)n.firstBatch=e,e._next=null;else{for(n=null;null!==o&&o._expirationTime<=t;)n=o,o=o._next;e._next=o,null!==n&&(n._next=e)}return e};var kr=Io({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Xo(null,"");break;default:e=Xo(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Xo(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){vr=vn;var e=l();if(Bn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var o=n.anchorOffset,r=n.focusNode;n=n.focusOffset;try{t.nodeType,r.nodeType}catch(e){t=null;break e}var i=0,a=-1,s=-1,u=0,c=0,d=e,p=null;t:for(;;){for(var f;d!==t||0!==o&&3!==d.nodeType||(a=i+o),d!==r||0!==n&&3!==d.nodeType||(s=i+n),3===d.nodeType&&(i+=d.nodeValue.length),null!==(f=d.firstChild);)p=d,d=f;for(;;){if(d===e)break t;if(p===t&&++u===o&&(a=i),p===r&&++c===n&&(s=i),null!==(f=d.nextSibling))break;p=(d=p).parentNode}d=f}t=-1===a||-1===s?null:{start:a,end:s}}else t=null}t=t||{start:0,end:0}}else t=null;yr={focusedElem:e,selectionRange:t},yn(!1)},resetAfterCommit:function(){var e=yr,t=l(),n=e.focusedElem,o=e.selectionRange;if(t!==n&&c(document.documentElement,n)){if(Bn(n))if(t=o.start,void 0===(e=o.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var r=n[re()].length;e=Math.min(o.start,r),o=void 0===o.end?e:Math.min(o.end,r),!t.extend&&e>o&&(r=o,o=e,e=r),r=Nn(n,e);var i=Nn(n,o);if(r&&i&&(1!==t.rangeCount||t.anchorNode!==r.node||t.anchorOffset!==r.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(r.node,r.offset),t.removeAllRanges(),e>o?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}yr=null,yn(vr),vr=null},createInstance:function(e,t,n,o,r){return(e=cr(e,t,n,o))[W]=r,e[H]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,o){return pr(e,t,n,o),Er(t,n)},prepareUpdate:function(e,t,n,o,r){return fr(e,t,n,o,r)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,o){return(e=dr(e,t))[W]=o,e},now:Mo,mutation:{commitMount:function(e,t,n){Er(t,n)&&e.focus()},commitUpdate:function(e,t,n,o,r){e[H]=r,hr(e,t,n,o,r)},resetTextContent:function(e){tr(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,o,r,i){return e[W]=i,e[H]=n,mr(e,t,n,r,o)},hydrateTextInstance:function(e,t,n){return e[W]=n,gr(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Po,cancelDeferredCallback:Do}),wr=kr;function Ir(e,t,n,o,r){xr(n)||p("200");var i=n._reactRootContainer;if(i){if("function"==typeof r){var a=r;r=function(){var e=kr.getPublicRootInstance(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,r):i.render(t,r)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Sr(e,!1,t)}(n,o),"function"==typeof r){var s=r;r=function(){var e=kr.getPublicRootInstance(i._internalRoot);s.call(e)}}kr.unbatchedUpdates(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,r):i.render(t,r)})}return kr.getPublicRootInstance(i._internalRoot)}function Tr(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return xr(t)||p("200"),function(e,t,n){var o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:et,key:null==o?null:""+o,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ne=wr.batchedUpdates,Be=wr.interactiveUpdates,Ue=wr.flushInteractiveUpdates;var Mr={createPortal:Tr,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:kr.findHostInstance(e)},hydrate:function(e,t,n){return Ir(null,e,t,!0,n)},render:function(e,t,n){return Ir(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,o){return(null==e||void 0===e._reactInternalFiber)&&p("38"),Ir(e,t,n,!1,o)},unmountComponentAtNode:function(e){return xr(e)||p("40"),!!e._reactRootContainer&&(kr.unbatchedUpdates(function(){Ir(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Tr.apply(void 0,arguments)},unstable_batchedUpdates:kr.batchedUpdates,unstable_deferredUpdates:kr.deferredUpdates,flushSync:kr.flushSync,unstable_flushControlled:kr.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:U,EventPluginRegistry:E,EventPropagators:ne,ReactControlledComponent:Le,ReactDOMComponentTree:G,ReactDOMEventListener:En},unstable_createRoot:function(e,t){return new Sr(e,!0,null!=t&&!0===t.hydrate)}};kr.injectIntoDevTools({findFiberByHostInstance:z,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var Pr=Object.freeze({default:Mr}),Dr=Pr&&Mr||Pr;e.exports=Dr.default?Dr.default:Dr},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(43),i=n(165);t.Layer=o.styled(r.LayerBase,i.getStyles)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0);o.__exportStar(n(177),t),o.__exportStar(n(43),t),o.__exportStar(n(164),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4);var r={container:"ms-Callout-container",root:"ms-Callout",beak:"ms-Callout-beak",beakCurtain:"ms-Callout-beakCurtain",calloutMain:"ms-Callout-main"};t.getStyles=function(e){var t,n=e.theme,i=e.className,a=e.overflowYHidden,s=e.calloutWidth,l=e.beakWidth,u=e.backgroundColor,c=o.getGlobalClassNames(r,n),d=n.palette;return{container:[c.container,{position:"relative"}],root:[c.root,{position:"absolute",boxSizing:"border-box",borderWidth:1,borderStyle:"solid",borderColor:d.neutralLight,boxShadow:"0 0 5px 0px rgba(0,0,0,0.4)",selectors:(t={},t[o.HighContrastSelector]={borderWidth:1,borderStyle:"solid",borderColor:"WindowText"},t)},o.focusClear(),i,!!s&&{width:s}],beak:[c.beak,{position:"absolute",backgroundColor:d.white,boxShadow:"inherit",border:"inherit",boxSizing:"border-box",transform:"rotate(45deg)"},function(e){return{height:e,width:e}}(l),u&&{backgroundColor:u}],beakCurtain:[c.beakCurtain,{position:"absolute",top:0,right:0,bottom:0,left:0,backgroundColor:d.white}],calloutMain:[c.calloutMain,{backgroundColor:d.white,overflowX:"hidden",overflowY:"auto",position:"relative"},a&&{overflowY:"hidden"},u&&{backgroundColor:u}]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=function(e){function t(t){var n=e.call(this,t)||this;return n._root=i.createRef(),n._onKeyDown=function(e){switch(e.which){case 27:n.props.onDismiss&&(n.props.onDismiss(e),e.preventDefault(),e.stopPropagation())}},n.state={needsVerticalScrollBar:!1},n}return o.__extends(t,e),t.prototype.componentWillMount=function(){this._originalFocusedElement=i.getDocument().activeElement},t.prototype.componentDidMount=function(){this._root.current&&(this._events.on(this._root.current,"focus",this._onFocus,!0),this._events.on(this._root.current,"blur",this._onBlur,!0),i.doesElementContainFocus(this._root.current)&&(this._containsFocus=!0),this._updateScrollBarAsync())},t.prototype.componentDidUpdate=function(){this._updateScrollBarAsync()},t.prototype.componentWillUnmount=function(){this.props.shouldRestoreFocus&&this._originalFocusedElement&&this._containsFocus&&this._originalFocusedElement!==window&&this._originalFocusedElement&&this._originalFocusedElement.focus()},t.prototype.render=function(){var e=this.props,t=e.role,n=e.className,a=e.ariaLabel,s=e.ariaLabelledBy,l=e.ariaDescribedBy,u=e.style;return r.createElement("div",o.__assign({ref:this._root},i.getNativeProps(this.props,i.divProperties),{className:n,role:t,"aria-label":a,"aria-labelledby":s,"aria-describedby":l,onKeyDown:this._onKeyDown,style:o.__assign({overflowY:this.state.needsVerticalScrollBar?"scroll":"auto"},u)}),this.props.children)},t.prototype._updateScrollBarAsync=function(){var e=this;this._async.requestAnimationFrame(function(){e._getScrollBar()})},t.prototype._getScrollBar=function(){var e=!1;if(this._root&&this._root.current&&this._root.current.firstElementChild){var t=this._root.current.clientHeight,n=this._root.current.firstElementChild.clientHeight;t>0&&n>t&&(e=n-t>1)}this.state.needsVerticalScrollBar!==e&&this.setState({needsVerticalScrollBar:e})},t.prototype._onFocus=function(){this._containsFocus=!0},t.prototype._onBlur=function(e){this._root.value&&this._root.value.contains(e.relatedTarget)&&(this._containsFocus=!1)},t.defaultProps={shouldRestoreFocus:!0},t}(i.BaseComponent);t.Popup=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(82),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(2),i=n(83),a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o.__extends(t,e),t}(r.Rectangle);function s(e,t,n){return{targetEdge:e,alignmentEdge:t,isAuto:n}}t.Rectangle=a;var l,u=((l={})[0]=s(i.RectangleEdge.top,i.RectangleEdge.left),l[1]=s(i.RectangleEdge.top),l[2]=s(i.RectangleEdge.top,i.RectangleEdge.right),l[3]=s(i.RectangleEdge.top,void 0,!0),l[4]=s(i.RectangleEdge.bottom,i.RectangleEdge.left),l[5]=s(i.RectangleEdge.bottom),l[6]=s(i.RectangleEdge.bottom,i.RectangleEdge.right),l[7]=s(i.RectangleEdge.bottom,void 0,!0),l[8]=s(i.RectangleEdge.left,i.RectangleEdge.top),l[9]=s(i.RectangleEdge.left),l[10]=s(i.RectangleEdge.left,i.RectangleEdge.bottom),l[11]=s(i.RectangleEdge.right,i.RectangleEdge.top),l[12]=s(i.RectangleEdge.right),l[13]=s(i.RectangleEdge.right,i.RectangleEdge.bottom),l);function c(e,t){return!(e.top<t.top)&&(!(e.bottom>t.bottom)&&(!(e.left<t.left)&&!(e.right>t.right)))}function d(e,t){var n=new Array;return e.top<t.top&&n.push(i.RectangleEdge.top),e.bottom>t.bottom&&n.push(i.RectangleEdge.bottom),e.left<t.left&&n.push(i.RectangleEdge.left),e.right>t.right&&n.push(i.RectangleEdge.right),n}function p(e,t){return e[i.RectangleEdge[t]]}function f(e,t,n){return e[i.RectangleEdge[t]]=n,e}function h(e,t){var n=E(t);return(p(e,n.positiveEdge)+p(e,n.negativeEdge))/2}function m(e,t){return e>0?t:-1*t}function g(e,t){return m(e,p(t,e))}function _(e,t,n){return m(n,p(e,n)-p(t,n))}function v(e,t,n){var o=p(e,t)-n;return e=f(e=f(e,t,n),-1*t,p(e,-1*t)-o)}function y(e,t,n,o){return void 0===o&&(o=0),v(e,n,p(t,n)+m(n,o))}function b(e,t,n){return g(n,e)>g(n,t)}function C(e,t,n,o,r,a,s){void 0===r&&(r=0);var l=o.alignmentEdge,u={elementRectangle:e,targetEdge:o.targetEdge,alignmentEdge:l};a||s||(u=function(e,t,n,o,r){void 0===r&&(r=0);for(var a=[i.RectangleEdge.left,i.RectangleEdge.right,i.RectangleEdge.bottom,i.RectangleEdge.top],s=e,l=o.targetEdge,u=o.alignmentEdge,c=0;c<4;c++){if(b(s,n,l))return{elementRectangle:s,targetEdge:l,alignmentEdge:u};a.splice(a.indexOf(l),1),a.indexOf(-1*l)>-1?l*=-1:(u=l,l=a.slice(-1)[0]),s=x(e,t,{targetEdge:l,alignmentEdge:u},r)}return{elementRectangle:e,targetEdge:o.targetEdge,alignmentEdge:u}}(e,t,n,o,r));for(var c=0,p=d(e,n);c<p.length;c++){var f=p[c];u.elementRectangle=y(u.elementRectangle,n,f)}return u}function S(e,t,n){var o=E(t).positiveEdge;return v(e,o,n-(h(e,t)-p(e,o)))}function x(e,t,n,o,r){var i;void 0===o&&(o=0);var a=n.alignmentEdge,s=n.targetEdge,l=r?s:-1*s;(i=r?y(e,t,s,o):function(e,t,n,o){void 0===o&&(o=0);var r=m(-1*n,o);return v(e,-1*n,p(t,n)+r)}(e,t,s,o),a)?i=y(i,t,a):i=S(i,l,h(t,s));return i}function E(e){return e===i.RectangleEdge.top||e===i.RectangleEdge.bottom?{positiveEdge:i.RectangleEdge.left,negativeEdge:i.RectangleEdge.right}:{positiveEdge:i.RectangleEdge.top,negativeEdge:i.RectangleEdge.bottom}}function k(e){return Math.sqrt(e*e*2)}function w(e,t,n){if(void 0===e&&(e=7),n)return{alignmentEdge:n.alignmentEdge,isAuto:n.isAuto,targetEdge:n.targetEdge};var i=o.__assign({},u[e]);return r.getRTL()?(i.alignmentEdge&&i.alignmentEdge%2==0&&(i.alignmentEdge=-1*i.alignmentEdge),void 0!==t?u[t]:i):i}function I(e,t,n){var o=h(t,e),r=h(n,e),i=E(e),a=i.positiveEdge,s=i.negativeEdge;return o<=r?a:s}function T(e,t,n,o,r,i,a){var s=x(e,t,o,r,a);return c(s,n)?{elementRectangle:s,targetEdge:o.targetEdge,alignmentEdge:o.alignmentEdge}:C(e,t,n,o,r,i,a)}function M(e,t){var n=t.targetRectangle,o=E(t.targetEdge),r=o.positiveEdge,i=o.negativeEdge,s=h(n,t.targetEdge),l=new a(e/2,t.elementRectangle.width-e/2,e/2,t.elementRectangle.height-e/2),u=new a(0,e,0,e);return b(u=S(u=v(u,-1*t.targetEdge,-e/2),-1*t.targetEdge,s-g(r,t.elementRectangle)),l,r)?b(u,l,i)||(u=y(u,l,i)):u=y(u,l,r),u}function P(e){var t=e.getBoundingClientRect();return new a(t.left,t.right,t.top,t.bottom)}function D(e){return new a(e.left,e.right,e.top,e.bottom)}function O(e,t,n,o,r){var a=0,s=u[t],l=r?-1*s.targetEdge:s.targetEdge;return(a=l===i.RectangleEdge.top?p(e,s.targetEdge)-o.top-n:l===i.RectangleEdge.bottom?o.bottom-p(e,s.targetEdge)-n:o.bottom-e.top-n)>0?a:o.height}function F(e,t,n,s){var l=e.gapSpace?e.gapSpace:0,u=e.bounds?D(e.bounds):new a(0,window.innerWidth-r.getScrollbarWidth(),0,window.innerHeight),p=function(e,t){var n;if(t){if(t.preventDefault){var o=t;n=new a(o.clientX,o.clientX,o.clientY,o.clientY)}else if(t.getBoundingClientRect)n=P(t);else{var r=t;n=new a(r.x,r.x,r.y,r.y)}if(!c(n,e))for(var s=0,l=d(n,e);s<l.length;s++){var u=l[s];n[i.RectangleEdge[u]]=e[i.RectangleEdge[u]]}}else n=new a(0,0,0,0);return n}(u,e.target),f=function(e,t,n,o){return e.isAuto&&(e.alignmentEdge=I(e.targetEdge,t,n)),e}(w(e.directionalHint,e.directionalHintForRTL,s),p,u,e.coverTarget),h=T(P(n),p,u,f,l,e.directionalHintFixed,e.coverTarget);return o.__assign({},h,{targetRectangle:p})}function R(e,t,n){return{elementPosition:function(e,t,n,o,r){var a={},s=P(t),l=r?n:-1*n,u=i.RectangleEdge[l],c=o||E(n).positiveEdge;return a[u]=_(e,s,l),a[i.RectangleEdge[c]]=_(e,s,c),a}(e.elementRectangle,t,e.targetEdge,e.alignmentEdge,n),targetEdge:e.targetEdge,alignmentEdge:e.alignmentEdge}}function A(e,t,n,r){var s=e.isBeakVisible&&e.beakWidth||0,l=k(s)/2+(e.gapSpace?e.gapSpace:0),u=e;u.gapSpace=l;var c,d,f,h,m,g,v=F(u,0,n,r),y=M(s,v),b=(d=y,f=-1*(c=v).targetEdge,h=new a(0,c.elementRectangle.width,0,c.elementRectangle.height),m=c.alignmentEdge?c.alignmentEdge:E(f).positiveEdge,(g={})[i.RectangleEdge[f]]=p(d,f),g[i.RectangleEdge[m]]=_(d,h,m),{elementPosition:o.__assign({},g),closestEdge:I(c.targetEdge,d,h),targetEdge:f});return o.__assign({},R(v,t,e.coverTarget),{beakPosition:b})}t.__positioningTestPackage={_finalizePositionData:R,_calculateActualBeakWidthInPixels:k,_positionElementWithinBounds:T,_positionBeak:M,_getPositionData:w,_getMaxHeightFromTargetRectangle:O},t.positionElement=function(e,t,n,o){return function(e,t,n,o){return R(F(e,0,n,o),t,e.coverTarget)}(e,t,n,o)},t.positionCallout=function(e,t,n,o){return A(e,t,n,o)},t.getMaxHeight=function(e,t,n,o,i){void 0===n&&(n=0);var s=e,l=e,u=e,c=o?D(o):new a(0,window.innerWidth-r.getScrollbarWidth(),0,window.innerHeight);return O(s.stopPropagation?new a(s.clientX,s.clientX,s.clientY,s.clientY):void 0!==u.x&&void 0!==u.y?new a(u.x,u.x,u.y,u.y):P(l),t,n,c,i)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0);o.__exportStar(n(182),t),o.__exportStar(n(83),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(183),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(0),i=n(1),a=n(2),s=n(184),l=n(181),u=n(2),c=n(4),d=((o={})[s.RectangleEdge.top]=c.AnimationClassNames.slideUpIn10,o[s.RectangleEdge.bottom]=c.AnimationClassNames.slideDownIn10,o[s.RectangleEdge.left]=c.AnimationClassNames.slideLeftIn10,o[s.RectangleEdge.right]=c.AnimationClassNames.slideRightIn10,o),p=u.classNamesFunction(),f=0,h=0,m={opacity:0,filter:"opacity(0)"},g=function(e){function t(t){var n=e.call(this,t)||this;return n._hostElement=a.createRef(),n._calloutElement=a.createRef(),n._hasListeners=!1,n.dismiss=function(e){var t=n.props.onDismiss;t&&t(e)},n._setInitialFocus=function(){n.props.setInitialFocus&&!n._didSetInitialFocus&&n.state.positions&&n._calloutElement.current&&(n._didSetInitialFocus=!0,n._async.requestAnimationFrame(function(){return a.focusFirstChild(n._calloutElement.current)}))},n._onComponentDidMount=function(){n._addListeners(),n.props.onLayerMounted&&n.props.onLayerMounted(),n._updateAsyncPosition(),n._setHeightOffsetEveryFrame()},n._didSetInitialFocus=!1,n.state={positions:void 0,slideDirectionalClassName:void 0,calloutElementRect:void 0,heightOffset:0},n._positionAttempts=0,n}return r.__extends(t,e),t.prototype.componentDidUpdate=function(){this._setInitialFocus(),this.props.hidden?this._hasListeners&&this._removeListeners():(this._hasListeners||this._addListeners(),this._updateAsyncPosition())},t.prototype.componentWillMount=function(){this._setTargetWindowAndElement(this._getTarget())},t.prototype.componentWillUpdate=function(e){var t=this._getTarget(e);(t!==this._getTarget()||"string"==typeof t||t instanceof String)&&(this._maxHeight=void 0,this._setTargetWindowAndElement(t)),e.gapSpace===this.props.gapSpace&&this.props.beakWidth===e.beakWidth||(this._maxHeight=void 0),e.finalHeight!==this.props.finalHeight&&this._setHeightOffsetEveryFrame(),e.hidden&&e.hidden!==this.props.hidden&&this.setState({positions:void 0})},t.prototype.componentDidMount=function(){this.props.hidden||this._onComponentDidMount()},t.prototype.render=function(){if(!this._targetWindow)return null;var e=this.props.target,t=this.props,n=t.styles,o=t.role,r=t.ariaLabel,s=t.ariaDescribedBy,u=t.ariaLabelledBy,c=t.className,f=t.isBeakVisible,h=t.children,g=t.beakWidth,_=t.calloutWidth,v=t.finalHeight,y=t.backgroundColor,b=t.calloutMaxHeight,C=t.onScroll;e=this._getTarget();var S=this.state.positions,x=this._getMaxHeight()?this._getMaxHeight()+this.state.heightOffset:void 0,E=b&&x&&b<x?b:x,k=!!v,w=f&&!!e;this._classNames=p(n,{theme:this.props.theme,className:c,overflowYHidden:k,calloutWidth:_,positions:S,beakWidth:g,backgroundColor:y});var I=k?{overflowY:"hidden",maxHeight:E}:{maxHeight:E},T=this.props.hidden?{visibility:"hidden"}:void 0;return i.createElement("div",{ref:this._hostElement,className:this._classNames.container,style:T},i.createElement("div",{className:a.css(this._classNames.root,S&&S.targetEdge&&d[S.targetEdge]),style:S?S.elementPosition:m,tabIndex:-1,ref:this._calloutElement},w&&i.createElement("div",{className:this._classNames.beak,style:this._getBeakPosition()}),w&&i.createElement("div",{className:this._classNames.beakCurtain}),!this.props.hidden&&i.createElement(l.Popup,{role:o,ariaLabel:r,ariaDescribedBy:s,ariaLabelledBy:u,className:this._classNames.calloutMain,onDismiss:this.dismiss,onScroll:C,shouldRestoreFocus:!0,style:I},h)))},t.prototype._dismissOnScroll=function(e){var t=this.props.preventDismissOnScroll;this.state.positions&&!t&&this._dismissOnLostFocus(e)},t.prototype._dismissOnLostFocus=function(e){var t=e.target,n=this._hostElement.current&&!a.elementContains(this._hostElement.current,t);(!this._target&&n||e.target!==this._targetWindow&&n&&(this._target.stopPropagation||!this._target||t!==this._target&&!a.elementContains(this._target,t)))&&this.dismiss(e)},t.prototype._addListeners=function(){var e=this;this._async.setTimeout(function(){e._events.on(e._targetWindow,"scroll",e._dismissOnScroll,!0),e._events.on(e._targetWindow,"resize",e.dismiss,!0),e._events.on(e._targetWindow.document.body,"focus",e._dismissOnLostFocus,!0),e._events.on(e._targetWindow.document.body,"click",e._dismissOnLostFocus,!0),e._hasListeners=!0},0)},t.prototype._removeListeners=function(){this._events.off(this._targetWindow,"scroll",this._dismissOnScroll,!0),this._events.off(this._targetWindow,"resize",this.dismiss,!0),this._events.off(this._targetWindow.document.body,"focus",this._dismissOnLostFocus,!0),this._events.off(this._targetWindow.document.body,"click",this._dismissOnLostFocus,!0),this._hasListeners=!1},t.prototype._updateAsyncPosition=function(){var e=this;this._async.requestAnimationFrame(function(){return e._updatePosition()})},t.prototype._getBeakPosition=function(){var e=this.state.positions,t=r.__assign({},e&&e.beakPosition?e.beakPosition.elementPosition:null);return t.top||t.bottom||t.left||t.right||(t.left=h,t.top=f),t},t.prototype._updatePosition=function(){var e=this.state.positions,t=this._hostElement.current,n=this._calloutElement.current;if(t&&n){var o=void 0;(o=a.assign(o,this.props)).bounds=this._getBounds(),o.target=this._target;var r=s.positionCallout(o,t,n,e);!e&&r||e&&r&&!this._arePositionsEqual(e,r)&&this._positionAttempts<5?(this._positionAttempts++,this.setState({positions:r})):(this._positionAttempts=0,this.props.onPositioned&&this.props.onPositioned(this.state.positions))}},t.prototype._getBounds=function(){if(!this._bounds){var e=this.props.bounds;e||(e={top:0+this.props.minPagePadding,left:0+this.props.minPagePadding,right:this._targetWindow.innerWidth-this.props.minPagePadding,bottom:this._targetWindow.innerHeight-this.props.minPagePadding,width:this._targetWindow.innerWidth-2*this.props.minPagePadding,height:this._targetWindow.innerHeight-2*this.props.minPagePadding}),this._bounds=e}return this._bounds},t.prototype._getMaxHeight=function(){var e=this;if(!this._maxHeight)if(this.props.directionalHintFixed&&this._target){var t=this.props.isBeakVisible?this.props.beakWidth:0,n=(this.props.gapSpace?this.props.gapSpace:0)+t+2;this._async.requestAnimationFrame(function(){e._target&&(e._maxHeight=s.getMaxHeight(e._target,e.props.directionalHint,n,e._getBounds(),e.props.coverTarget),e.forceUpdate())})}else this._maxHeight=this._getBounds().height-2;return this._maxHeight},t.prototype._arePositionsEqual=function(e,t){return this._comparePositions(e.elementPosition,t.elementPosition)&&this._comparePositions(e.beakPosition.elementPosition,t.beakPosition.elementPosition)},t.prototype._comparePositions=function(e,t){for(var n in t)if(t.hasOwnProperty(n)){var o=e[n],r=t[n];if(void 0===o||void 0===r)return!1;if(o.toFixed(2)!==r.toFixed(2))return!1}return!0},t.prototype._setTargetWindowAndElement=function(e){if(e)if("string"==typeof e){var t=a.getDocument();this._target=t?t.querySelector(e):null,this._targetWindow=a.getWindow()}else if(e.stopPropagation)this._targetWindow=a.getWindow(e.toElement),this._target=e;else if(e.getBoundingClientRect){var n=e;this._targetWindow=a.getWindow(n),this._target=e}else this._targetWindow=a.getWindow(),this._target=e;else this._targetWindow=a.getWindow()},t.prototype._setHeightOffsetEveryFrame=function(){var e=this;this._calloutElement.current&&this.props.finalHeight&&(this._setHeightOffsetTimer=this._async.requestAnimationFrame(function(){var t=e._calloutElement.current&&e._calloutElement.current.lastChild;if(t){var n=t.scrollHeight-t.offsetHeight;e.setState({heightOffset:e.state.heightOffset+n}),t.offsetHeight<e.props.finalHeight?e._setHeightOffsetEveryFrame():e._async.cancelAnimationFrame(e._setHeightOffsetTimer)}}))},t.prototype._getTarget=function(e){return void 0===e&&(e=this.props),e.target},t.defaultProps={preventDismissOnScroll:!1,isBeakVisible:!0,beakWidth:16,gapSpace:0,minPagePadding:8,directionalHint:7},t=r.__decorate([a.customizable("CalloutContent",["theme"])],t)}(a.BaseComponent);t.CalloutContentBase=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(185),i=n(179);t.CalloutContent=o.styled(r.CalloutContentBase,i.getStyles)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=n(186),s=n(81),l=function(e){function t(t){return e.call(this,t)||this}return o.__extends(t,e),t.prototype.render=function(){var e=r.createElement(a.CalloutContent,o.__assign({},this.props));return this.props.doNotLayer?e:r.createElement(s.Layer,null,e)},t}(i.BaseComponent);t.Callout=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0);o.__exportStar(n(187),t),o.__exportStar(n(87),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(188),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(2),i=function(e){function t(t){var n=e.call(this,t)||this;return n._shouldUpdateComponentRef=!1,n._updateComposedComponentRef=n._updateComposedComponentRef.bind(n),n}return o.__extends(t,e),t.prototype._updateComposedComponentRef=function(e){this._composedComponentInstance=e,e?this._hoisted=r.hoistMethods(this,e):this._hoisted&&r.unhoistMethods(this,this._hoisted)},t}(r.BaseComponent);t.BaseDecorator=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getIsChecked=function(e){return e.canCheck?!(!e.isChecked&&!e.checked):"boolean"==typeof e.isChecked?e.isChecked:"boolean"==typeof e.checked?e.checked:null},t.hasSubmenu=function(e){return!(!e.subMenuProps&&!e.items)},t.isItemDisabled=function(e){return!(!e.isDisabled&&!e.disabled)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(4),i=n(2),a=i.memoizeFunction(function(){return{selectors:(e={},e[r.HighContrastSelector]={backgroundColor:"Highlight",borderColor:"Highlight",color:"HighlightText",MsHighContrastAdjust:"none"},e)};var e});t.getMenuItemStyles=i.memoizeFunction(function(e){var t,n,i,s,l=e.semanticColors,u=e.fonts,c=l.menuItemBackgroundHovered,d=l.menuItemBackgroundChecked,p=l.bodyDivider,f={item:[u.medium,{color:l.bodyText,position:"relative",boxSizing:"border-box"}],divider:{display:"block",height:"1px",backgroundColor:p,position:"relative"},root:[r.getFocusStyle(e),u.medium,{color:"inherit",backgroundColor:"transparent",border:"none",width:"100%",height:"32px",lineHeight:"32px",display:"block",cursor:"pointer",padding:"0px 6px",textAlign:"left"}],rootDisabled:{color:l.disabledBodyText,cursor:"default",pointerEvents:"none"},rootHovered:o.__assign({backgroundColor:c},a()),rootFocused:o.__assign({backgroundColor:c},a()),rootChecked:o.__assign({},a()),rootPressed:o.__assign({backgroundColor:d},a()),rootExpanded:o.__assign({backgroundColor:d,color:l.bodyTextChecked},a()),linkContent:{whiteSpace:"nowrap",height:"inherit",display:"flex",alignItems:"center",maxWidth:"100%"},anchorLink:{padding:"0px 6px",textRendering:"auto",color:"inherit",letterSpacing:"normal",wordSpacing:"normal",textTransform:"none",textIndent:"0px",textShadow:"none",textDecoration:"none",boxSizing:"border-box"},label:{margin:"0 4px",verticalAlign:"middle",display:"inline-block",flexGrow:"1",textOverflow:"ellipsis",overflow:"hidden",whiteSpace:"nowrap"},secondaryText:{color:e.palette.neutralTertiary,paddingLeft:"20px",textAlign:"right"},icon:{display:"inline-block",minHeight:"1px",maxHeight:"32px",width:"14px",margin:"0 4px",verticalAlign:"middle",flexShrink:"0"},iconColor:{color:l.menuIcon,selectors:(t={},t[r.HighContrastSelector]={color:"inherit"},t["$root:hover &"]={selectors:(n={},n[r.HighContrastSelector]={color:"HighlightText"},n)},t["$root:focus &"]={selectors:(i={},i[r.HighContrastSelector]={color:"HighlightText"},i)},t)},iconDisabled:{color:l.disabledBodyText},checkmarkIcon:{color:l.bodySubtext,selectors:(s={},s[r.HighContrastSelector]={color:"HighlightText"},s)},subMenuIcon:{height:"32px",lineHeight:"32px",textAlign:"center",display:"inline-block",verticalAlign:"middle",flexShrink:"0",fontSize:r.FontSizes.mini},splitButtonFlexContainer:[r.getFocusStyle(e),{display:"flex",height:"32px",flexWrap:"nowrap",justifyContent:"center",alignItems:"center"}]};return r.concatStyleSets(f)}),t.getStyles=i.memoizeFunction(function(e){var t=e.semanticColors,n=e.fonts,o=t.bodyBackground,i=t.menuHeader,a={root:{backgroundColor:o,minWidth:"180px"},container:{},list:{listStyleType:"none",margin:"0",padding:"0",lineHeight:"0"},title:{fontSize:"16px",paddingRight:"14px",paddingLeft:"14px",paddingBottom:"5px",paddingTop:"5px",backgroundColor:e.palette.neutralLight},header:[n.small,{fontWeight:r.FontWeights.semibold,color:i,background:"none",backgroundColor:"transparent",border:"none",height:"32px",lineHeight:"32px",cursor:"default",padding:"0px 6px",userSelect:"none",textAlign:"left"}]};return r.concatStyleSets(a)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(86),a=n(2),s="data-no-horizontal-wrap",l={},u=["text","number","password","email","tel","url","search"],c=!1,d=function(e){function t(t){var n=e.call(this,t)||this;return n._root=a.createRef(),n._onFocus=function(e){var t=n.props,o=t.onActiveElementChanged,r=t.doNotAllowFocusEventToPropagate,i=t.onFocusNotification;if(i&&i(),n._isImmediateDescendantOfZone(e.target))n._activeElement=e.target,n._setFocusAlignment(n._activeElement);else for(var s=e.target;s&&s!==n._root.current;){if(a.isElementTabbable(s)&&n._isImmediateDescendantOfZone(s)){n._activeElement=s;break}s=a.getParent(s,c)}o&&o(n._activeElement,e),r&&e.stopPropagation()},n._onMouseDown=function(e){if(!n.props.disabled){for(var t=e.target,o=[];t&&t!==n._root.current;)o.push(t),t=a.getParent(t,c);for(;o.length&&((t=o.pop())&&a.isElementTabbable(t)&&n._setActiveElement(t,!0),!a.isElementFocusZone(t)););}},n._onKeyDown=function(e){var t=n.props,o=t.direction,r=t.disabled,l=t.isInnerZoneKeystroke;if(!r&&!(document.activeElement===n._root.current&&n._isInnerZone||(n.props.onKeyDown&&n.props.onKeyDown(e),e.isDefaultPrevented()))){if(l&&l(e)&&n._isImmediateDescendantOfZone(e.target)){var u=n._getFirstInnerZone();if(u){if(!u.focus(!0))return}else{if(!a.isElementFocusSubZone(e.target))return;if(!n.focusElement(a.getNextElement(e.target,e.target.firstChild,!0)))return}}else{if(e.altKey)return;switch(e.which){case 32:if(n._tryInvokeClickForFocusable(e.target))break;return;case 37:if(o!==i.FocusZoneDirection.vertical&&n._moveFocusLeft())break;return;case 39:if(o!==i.FocusZoneDirection.vertical&&n._moveFocusRight())break;return;case 38:if(o!==i.FocusZoneDirection.horizontal&&n._moveFocusUp())break;return;case 40:if(o!==i.FocusZoneDirection.horizontal&&n._moveFocusDown())break;return;case 9:if(n.props.allowTabKey||1===n.props.handleTabKey||2===n.props.handleTabKey&&n._isElementInput(e.target)){var c=!1;if(n._processingTabKey=!0,o!==i.FocusZoneDirection.vertical&&n._shouldWrapFocus(n._activeElement,s)?o!==i.FocusZoneDirection.horizontal&&o!==i.FocusZoneDirection.bidirectional||(c=e.shiftKey?n._moveFocusLeft():n._moveFocusRight()):c=e.shiftKey?n._moveFocusUp():n._moveFocusDown(),n._processingTabKey=!1,c)break}return;case 36:if(n._isElementInput(e.target)&&!n._shouldInputLoseFocus(e.target,!1))return!1;var d=n._root.current&&n._root.current.firstChild;if(n._root.current&&d&&n.focusElement(a.getNextElement(n._root.current,d,!0)))break;return;case 35:if(n._isElementInput(e.target)&&!n._shouldInputLoseFocus(e.target,!0))return!1;var p=n._root.current&&n._root.current.lastChild;if(n._root.current&&n.focusElement(a.getPreviousElement(n._root.current,p,!0,!0,!0)))break;return;case 13:if(n._tryInvokeClickForFocusable(e.target))break;return;default:return}}e.preventDefault(),e.stopPropagation()}},n._warnDeprecations({rootProps:void 0,allowTabKey:"handleTabKey"}),n._id=a.getId("FocusZone"),n._focusAlignment={left:0,top:0},n._processingTabKey=!1,n}return o.__extends(t,e),t.prototype.componentDidMount=function(){if(l[this._id]=this,this._root.current){for(var e=this._root.current.ownerDocument.defaultView,t=a.getParent(this._root.current,c);t&&t!==document.body&&1===t.nodeType;){if(a.isElementFocusZone(t)){this._isInnerZone=!0;break}t=a.getParent(t,c)}this._isInnerZone||this._events.on(e,"keydown",this._onKeyDownCapture,!0),this._updateTabIndexes(),this.props.defaultActiveElement&&(this._activeElement=a.getDocument().querySelector(this.props.defaultActiveElement),this.focus())}},t.prototype.componentWillUnmount=function(){delete l[this._id]},t.prototype.render=function(){var e=this.props,t=e.rootProps,n=e.ariaDescribedBy,i=e.ariaLabelledBy,s=e.className,l=a.getNativeProps(this.props,a.htmlElementProperties),u=this.props.elementType||"div";return r.createElement(u,o.__assign({role:"presentation"},l,t,{className:a.css("ms-FocusZone",s),ref:this._root,"data-focuszone-id":this._id,"aria-labelledby":i,"aria-describedby":n,onKeyDown:this._onKeyDown,onFocus:this._onFocus,onMouseDownCapture:this._onMouseDown}),this.props.children)},t.prototype.focus=function(e){if(void 0===e&&(e=!1),this._root.current){if(!e&&"true"===this._root.current.getAttribute("data-is-focusable")&&this._isInnerZone){var t=this._getOwnerZone(this._root.current);if(t!==this._root.current){var n=l[t.getAttribute("data-focuszone-id")];return!!n&&n.focusElement(this._root.current)}return!1}if(!e&&this._activeElement&&a.elementContains(this._root.current,this._activeElement)&&a.isElementTabbable(this._activeElement))return this._activeElement.focus(),!0;var o=this._root.current.firstChild;return this.focusElement(a.getNextElement(this._root.current,o,!0))}return!1},t.prototype.focusElement=function(e){var t=this.props.onBeforeFocus;return!(t&&!t(e))&&(!!e&&(this._setActiveElement(e),this._activeElement&&this._activeElement.focus(),!0))},t.prototype._onKeyDownCapture=function(e){9===e.which&&this._updateTabIndexes()},t.prototype._setActiveElement=function(e,t){var n=this._activeElement;this._activeElement=e,n&&(a.isElementFocusZone(n)&&this._updateTabIndexes(n),n.tabIndex=-1),this._activeElement&&(this._focusAlignment&&!t||this._setFocusAlignment(e,!0,!0),this._activeElement.tabIndex=0)},t.prototype._tryInvokeClickForFocusable=function(e){if(e===this._root.current)return!1;do{if("BUTTON"===e.tagName||"A"===e.tagName||"INPUT"===e.tagName||"TEXTAREA"===e.tagName)return!1;if(this._isImmediateDescendantOfZone(e)&&"true"===e.getAttribute("data-is-focusable")&&"true"!==e.getAttribute("data-disable-click-on-enter"))return a.EventGroup.raise(e,"click",null,!0),!0;e=a.getParent(e,c)}while(e!==this._root.current);return!1},t.prototype._getFirstInnerZone=function(e){if(!(e=e||this._activeElement||this._root.current))return null;if(a.isElementFocusZone(e))return l[e.getAttribute("data-focuszone-id")];for(var t=e.firstElementChild;t;){if(a.isElementFocusZone(t))return l[t.getAttribute("data-focuszone-id")];var n=this._getFirstInnerZone(t);if(n)return n;t=t.nextElementSibling}return null},t.prototype._moveFocus=function(e,t,n,o){void 0===o&&(o=!0);var r=this._activeElement,s=-1,l=void 0,u=!1,c=this.props.direction===i.FocusZoneDirection.bidirectional;if(!r||!this._root.current)return!1;if(this._isElementInput(r)&&!this._shouldInputLoseFocus(r,e))return!1;var d=c?r.getBoundingClientRect():null;do{if(r=e?a.getNextElement(this._root.current,r):a.getPreviousElement(this._root.current,r),!c){l=r;break}if(r){var p=t(d,r.getBoundingClientRect());if(-1===p&&-1===s){l=r;break}if(p>-1&&(-1===s||p<s)&&(s=p,l=r),s>=0&&p<0)break}}while(r);if(l&&l!==this._activeElement)u=!0,this.focusElement(l);else if(this.props.isCircularNavigation&&o)return e?this.focusElement(a.getNextElement(this._root.current,this._root.current.firstElementChild,!0)):this.focusElement(a.getPreviousElement(this._root.current,this._root.current.lastElementChild,!0,!0,!0));return u},t.prototype._moveFocusDown=function(){var e=this,t=-1,n=this._focusAlignment.left;return!!this._moveFocus(!0,function(o,r){var i=-1,a=Math.floor(r.top),s=Math.floor(o.bottom);return a<s?e._shouldWrapFocus(e._activeElement,"data-no-vertical-wrap")?999999999:-999999999:((-1===t&&a>=s||a===t)&&(t=a,i=n>=r.left&&n<=r.left+r.width?0:Math.abs(r.left+r.width/2-n)),i)})&&(this._setFocusAlignment(this._activeElement,!1,!0),!0)},t.prototype._moveFocusUp=function(){var e=this,t=-1,n=this._focusAlignment.left;return!!this._moveFocus(!1,function(o,r){var i=-1,a=Math.floor(r.bottom),s=Math.floor(r.top),l=Math.floor(o.top);return a>l?e._shouldWrapFocus(e._activeElement,"data-no-vertical-wrap")?999999999:-999999999:((-1===t&&a<=l||s===t)&&(t=s,i=n>=r.left&&n<=r.left+r.width?0:Math.abs(r.left+r.width/2-n)),i)})&&(this._setFocusAlignment(this._activeElement,!1,!0),!0)},t.prototype._moveFocusLeft=function(){var e=this,t=this._shouldWrapFocus(this._activeElement,s);return!!this._moveFocus(a.getRTL(),function(n,o){var r=-1;return o.bottom>n.top&&o.right<=n.right&&e.props.direction!==i.FocusZoneDirection.vertical?r=n.right-o.right:t||(r=-999999999),r},void 0,t)&&(this._setFocusAlignment(this._activeElement,!0,!1),!0)},t.prototype._moveFocusRight=function(){var e=this,t=this._shouldWrapFocus(this._activeElement,s);return!!this._moveFocus(!a.getRTL(),function(n,o){var r=-1;return o.top<n.bottom&&o.left>=n.left&&e.props.direction!==i.FocusZoneDirection.vertical?r=o.left-n.left:t||(r=-999999999),r},void 0,t)&&(this._setFocusAlignment(this._activeElement,!0,!1),!0)},t.prototype._setFocusAlignment=function(e,t,n){if(this.props.direction===i.FocusZoneDirection.bidirectional&&(!this._focusAlignment||t||n)){var o=e.getBoundingClientRect(),r=o.left+o.width/2,a=o.top+o.height/2;this._focusAlignment||(this._focusAlignment={left:r,top:a}),t&&(this._focusAlignment.left=r),n&&(this._focusAlignment.top=a)}},t.prototype._isImmediateDescendantOfZone=function(e){return this._getOwnerZone(e)===this._root.current},t.prototype._getOwnerZone=function(e){for(var t=a.getParent(e,c);t&&t!==this._root.current&&t!==document.body;){if(a.isElementFocusZone(t))return t;t=a.getParent(t,c)}return this._root.current},t.prototype._updateTabIndexes=function(e){!e&&this._root.current&&(this._defaultFocusElement=null,e=this._root.current,this._activeElement&&!a.elementContains(e,this._activeElement)&&(this._activeElement=null)),this._activeElement&&!a.isElementTabbable(this._activeElement)&&(this._activeElement=null);for(var t=e&&e.children,n=0;t&&n<t.length;n++){var o=t[n];a.isElementFocusZone(o)?"true"===o.getAttribute("data-is-focusable")&&(this._isInnerZone||(this._activeElement||this._defaultFocusElement)&&this._activeElement!==o?"-1"!==o.getAttribute("tabindex")&&o.setAttribute("tabindex","-1"):(this._defaultFocusElement=o,"0"!==o.getAttribute("tabindex")&&o.setAttribute("tabindex","0"))):(o.getAttribute&&"false"===o.getAttribute("data-is-focusable")&&o.setAttribute("tabindex","-1"),a.isElementTabbable(o)?this.props.disabled?o.setAttribute("tabindex","-1"):this._isInnerZone||(this._activeElement||this._defaultFocusElement)&&this._activeElement!==o?"-1"!==o.getAttribute("tabindex")&&o.setAttribute("tabindex","-1"):(this._defaultFocusElement=o,"0"!==o.getAttribute("tabindex")&&o.setAttribute("tabindex","0")):"svg"===o.tagName&&"false"!==o.getAttribute("focusable")&&o.setAttribute("focusable","false")),this._updateTabIndexes(o)}},t.prototype._isElementInput=function(e){return!(!e||!e.tagName||"input"!==e.tagName.toLowerCase()&&"textarea"!==e.tagName.toLowerCase())},t.prototype._shouldInputLoseFocus=function(e,t){if(!this._processingTabKey&&e&&e.type&&u.indexOf(e.type.toLowerCase())>-1){var n=e.selectionStart,o=n!==e.selectionEnd,r=e.value;if(o||n>0&&!t||n!==r.length&&t||this.props.handleTabKey&&(!this.props.shouldInputLoseFocusOnArrowKey||!this.props.shouldInputLoseFocusOnArrowKey(e)))return!1}return!0},t.prototype._shouldWrapFocus=function(e,t){return!this.props.checkForNoWrap||a.shouldWrapFocus(e,t)},t.defaultProps={isCircularNavigation:!1,direction:i.FocusZoneDirection.bidirectional},t}(a.BaseComponent);t.FocusZone=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0);o.__exportStar(n(193),t),o.__exportStar(n(86),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(194),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(88),a=n(195),s=n(85),l=n(2),u=n(26),c=n(32),d=n(189),p=n(25),f=n(163);function h(e){return e.subMenuProps?e.subMenuProps.items:e.items}function m(e){return e.some(function(e){return!!e.canCheck||!(!e.sectionProps||!e.sectionProps.items.some(function(e){return!0===e.canCheck}))})}t.getSubmenuItems=h,t.canAnyMenuItemsCheck=m;var g=250,_=function(e){function t(t){var n=e.call(this,t)||this;return n.dismiss=function(e,t){var o=n.props.onDismiss;o&&o(e,t)},n._onKeyDown=function(e){(27===e.which||e.altKey||e.metaKey||n._shouldCloseSubMenu(e))&&(n._isFocusingPreviousElement=!0,e.preventDefault(),e.stopPropagation(),n.dismiss(e))},n._shouldCloseSubMenu=function(e){var t=l.getRTL()?39:37;return!(e.which!==t||!n.props.isSubMenu)&&(n._adjustedFocusZoneProps.direction===a.FocusZoneDirection.vertical||!!n._adjustedFocusZoneProps.checkForNoWrap&&!l.shouldWrapFocus(e.target,"data-no-horizontal-wrap"))},n._onMenuKeyDown=function(e){if(27===e.which||e.altKey||e.metaKey)return n._isFocusingPreviousElement=!0,e.preventDefault(),e.stopPropagation(),void n.dismiss(e);if(n._host){var t=38===e.which?l.getLastFocusable(n._host,n._host.lastChild,!0):40===e.which?l.getFirstFocusable(n._host,n._host.firstChild,!0):null;t&&(t.focus(),e.preventDefault(),e.stopPropagation())}},n._onScroll=function(){n._isScrollIdle||void 0===n._scrollIdleTimeoutId?n._isScrollIdle=!1:(n._async.clearTimeout(n._scrollIdleTimeoutId),n._scrollIdleTimeoutId=void 0),n._scrollIdleTimeoutId=n._async.setTimeout(function(){n._isScrollIdle=!0},g)},n._onItemMouseEnterBase=function(e,t,o){n._isScrollIdle&&n._updateFocusOnMouseEvent(e,t,o)},n._onItemMouseMoveBase=function(e,t,o){var r=t.currentTarget;n._isScrollIdle&&void 0===n._enterTimerId&&r!==n._targetWindow.document.activeElement&&n._updateFocusOnMouseEvent(e,t,o)},n._onMouseItemLeave=function(e,t){n._isScrollIdle&&(void 0!==n._enterTimerId&&(n._async.clearTimeout(n._enterTimerId),n._enterTimerId=void 0),void 0===n.state.expandedMenuItemKey&&(n._host.setActive?n._host.setActive():n._host.focus()))},n._onItemMouseDown=function(e,t){e.onMouseDown&&e.onMouseDown(e,t)},n._onItemClick=function(e,t){n._onItemClickBase(e,t,t.currentTarget)},n._onItemClickBase=function(e,t,o){var r=h(e);n._cancelSubMenuTimer(),u.hasSubmenu(e)||r&&r.length?e.key===n.state.expandedMenuItemKey?n._onSubMenuDismiss(t):(n.setState({expandedByMouseClick:0!==t.nativeEvent.detail}),n._onItemSubMenuExpand(e,o)):n._executeItemClick(e,t),t.stopPropagation(),t.preventDefault()},n._onAnchorClick=function(e,t){n._executeItemClick(e,t),t.stopPropagation()},n._executeItemClick=function(e,t){if(!e.disabled&&!e.isDisabled){var o=!1;e.onClick?o=!!e.onClick(t,e):n.props.onItemClick&&(o=!!n.props.onItemClick(t,e)),(o||!t.defaultPrevented)&&n.dismiss(t,!0)}},n._onItemKeyDown=function(e,t){var o=l.getRTL()?37:39;t.which!==o&&13!==t.which||e.disabled||(n.setState({expandedByMouseClick:!1}),n._onItemSubMenuExpand(e,t.currentTarget),t.preventDefault())},n._cancelSubMenuTimer=function(){void 0!==n._enterTimerId&&(n._async.clearTimeout(n._enterTimerId),n._enterTimerId=void 0)},n._onItemSubMenuExpand=function(e,t){n.state.expandedMenuItemKey!==e.key&&(n.state.expandedMenuItemKey&&n._onSubMenuDismiss(),t.focus(),n.setState({expandedMenuItemKey:e.key,submenuTarget:t}))},n._onSubMenuDismiss=function(e,t){t?n.dismiss(e,t):n.setState({dismissedMenuItemKey:n.state.expandedMenuItemKey,expandedMenuItemKey:void 0,submenuTarget:void 0})},n._getSubMenuId=function(e){var t=n.state.subMenuId;return e.subMenuProps&&e.subMenuProps.id&&(t=e.subMenuProps.id),t},n._onPointerAndTouchEvent=function(e){n._cancelSubMenuTimer()},n.state={contextualMenuItems:void 0,subMenuId:l.getId("ContextualMenu")},n._isFocusingPreviousElement=!1,n._isScrollIdle=!0,n}return o.__extends(t,e),n=t,t.prototype.componentWillUpdate=function(e){if(e.target!==this.props.target){var t=e.target;this._setTargetWindowAndElement(t)}e.hidden!==this.props.hidden&&(e.hidden?this._onMenuClosed():(this._onMenuOpened(),this._previousActiveElement=this._targetWindow?this._targetWindow.document.activeElement:null))},t.prototype.componentWillMount=function(){var e=this.props.target;this._setTargetWindowAndElement(e),this.props.hidden||(this._previousActiveElement=this._targetWindow?this._targetWindow.document.activeElement:null)},t.prototype.componentDidMount=function(){this.props.hidden||this._onMenuOpened()},t.prototype.componentWillUnmount=function(){var e=this;this._isFocusingPreviousElement&&this._previousActiveElement&&setTimeout(function(){e._previousActiveElement&&e._previousActiveElement.focus()},0),this.props.onMenuDismissed&&this.props.onMenuDismissed(this.props),this._events.dispose(),this._async.dispose()},t.prototype.render=function(){var e=this,t=this.props.isBeakVisible,n=this.props,u=n.className,p=n.items,f=n.labelElementId,h=n.id,g=n.beakWidth,_=n.directionalHint,v=n.directionalHintForRTL,y=n.gapSpace,b=n.coverTarget,C=n.ariaLabel,S=n.doNotLayer,x=n.target,E=n.bounds,k=n.useTargetWidth,w=n.useTargetAsMinWidth,I=n.directionalHintFixed,T=n.shouldFocusOnMount,M=n.shouldFocusOnContainer,P=n.title,D=n.theme,O=n.calloutProps,F=n.onRenderSubMenu,R=void 0===F?this._onRenderSubMenu:F,A=n.focusZoneProps,L=this.props.getMenuClassNames||s.getContextualMenuClassNames;this._classNames=L(D,u);var N=function e(t){for(var n=0,o=t;n<o.length;n++){var r=o[n];if(r.iconProps)return!0;if(r.itemType===i.ContextualMenuItemType.Section&&r.sectionProps&&e(r.sectionProps.items))return!0}return!1}(p);this._adjustedFocusZoneProps=o.__assign({},A,{direction:this._getFocusZoneDirection()});var B,U=m(p),j=this.state.expandedMenuItemKey?this._getSubmenuProps():null;t=void 0===t?this.props.responsiveMode<=c.ResponsiveMode.medium:t;var W=this._target;if((k||w)&&W&&W.offsetWidth){var H=W.getBoundingClientRect().width-2;k?B={width:H}:w&&(B={minWidth:H})}if(p&&p.length>0){for(var z=0,K=0,V=0,G=p;V<G.length;V++){var q=G[V];if(q.itemType!==i.ContextualMenuItemType.Divider&&q.itemType!==i.ContextualMenuItemType.Header){var Z=q.customOnRenderListLength?q.customOnRenderListLength:1;K+=Z}}return r.createElement(d.Callout,o.__assign({},O,{target:x,isBeakVisible:t,beakWidth:g,directionalHint:_,directionalHintForRTL:v,gapSpace:y,coverTarget:b,doNotLayer:S,className:l.css("ms-ContextualMenu-Callout",O?O.className:void 0),setInitialFocus:T,onDismiss:this.props.onDismiss,onScroll:this._onScroll,bounds:E,directionalHintFixed:I,hidden:this.props.hidden}),r.createElement("div",{role:"menu","aria-label":C,"aria-labelledby":f,style:B,ref:function(t){return e._host=t},id:h,className:this._classNames.container,tabIndex:M?0:-1,onKeyDown:this._onMenuKeyDown},P&&r.createElement("div",{className:this._classNames.title,role:"heading","aria-level":1}," ",P," "),p&&p.length?r.createElement(a.FocusZone,o.__assign({},this._adjustedFocusZoneProps,{className:this._classNames.root,isCircularNavigation:!0,handleTabKey:1}),r.createElement("ul",{className:this._classNames.list,onKeyDown:this._onKeyDown},p.map(function(t,n){var o=e._renderMenuItem(t,n,z,K,U,N);if(t.itemType!==i.ContextualMenuItemType.Divider&&t.itemType!==i.ContextualMenuItemType.Header){var r=t.customOnRenderListLength?t.customOnRenderListLength:1;z+=r}return o}))):null,j&&R(j,this._onRenderSubMenu)))}return null},t.prototype._onMenuOpened=function(){this._events.on(this._targetWindow,"resize",this.dismiss),this.props.onMenuOpened&&this.props.onMenuOpened(this.props)},t.prototype._onMenuClosed=function(){var e=this;this._events.off(this._targetWindow,"resize",this.dismiss),this._previousActiveElement&&this._async.setTimeout(function(){e._previousActiveElement&&e._previousActiveElement.focus()},0)},t.prototype._getFocusZoneDirection=function(){var e=this.props.focusZoneProps;return e&&void 0!==e.direction?e.direction:a.FocusZoneDirection.vertical},t.prototype._onRenderSubMenu=function(e){return r.createElement(n,o.__assign({},e))},t.prototype._renderMenuItem=function(e,t,n,o,r,a){var l=[],c=e.iconProps||{iconName:"None"},d=e.itemType===i.ContextualMenuItemType.Divider?e.className:void 0,p=e.submenuIconProps?e.submenuIconProps.className:"",f=(e.getItemClassNames||s.getItemClassNames)(this.props.theme,u.isItemDisabled(e),this.state.expandedMenuItemKey===e.key,!!u.getIsChecked(e),!!e.href,"None"!==c.iconName,e.className,d,c.className,p,e.primaryDisabled);switch("-"!==e.text&&"-"!==e.name||(e.itemType=i.ContextualMenuItemType.Divider),e.itemType){case i.ContextualMenuItemType.Divider:l.push(this._renderSeparator(t,f));break;case i.ContextualMenuItemType.Header:l.push(this._renderSeparator(t,f));var h=this._renderHeaderMenuItem(e,f,t,r,a);l.push(this._renderListItem(h,e.key||t,f,e.title));break;case i.ContextualMenuItemType.Section:l.push(this._renderSectionItem(e,f,t,r,a));break;default:var m=this._renderNormalItem(e,f,t,n,o,r,a);l.push(this._renderListItem(m,e.key||t,f,e.title))}return l},t.prototype._renderSectionItem=function(e,t,n,o,a){var s=this,l=e.sectionProps;if(l){var u;if(l.title){var c={key:"section-"+l.title+"-title",itemType:i.ContextualMenuItemType.Header,text:l.title};u=this._renderHeaderMenuItem(c,t,n,o,a)}return l.items&&l.items.length>0?r.createElement("li",{role:"presentation",key:l.key},r.createElement("div",{role:"group"},r.createElement("ul",{className:this._classNames.list},l.topDivider&&this._renderSeparator(n,t,!0,!0),u&&this._renderListItem(u,e.key||n,t,e.title),l.items.map(function(e,t){return s._renderMenuItem(e,t,t,l.items.length,o,a)}),l.bottomDivider&&this._renderSeparator(n,t,!1,!0)))):void 0}},t.prototype._renderListItem=function(e,t,n,o){return r.createElement("li",{role:"presentation",title:o,key:t,className:n.item},e)},t.prototype._renderSeparator=function(e,t,n,o){return o||e>0?r.createElement("li",{role:"separator",key:"separator-"+e+(void 0===n?"":n?"-top":"-bottom"),className:t.divider}):null},t.prototype._renderNormalItem=function(e,t,n,r,i,a,s){return e.onRender?[e.onRender(o.__assign({"aria-posinset":r+1,"aria-setsize":i},e),this.dismiss)]:e.href?this._renderAnchorMenuItem(e,t,n,r,i,a,s):e.split&&u.hasSubmenu(e)?this._renderSplitButton(e,t,n,r,i,a,s):this._renderButtonItem(e,t,n,r,i,a,s)},t.prototype._renderHeaderMenuItem=function(e,t,n,o,i){var a=this.props.contextualMenuItemAs,s=void 0===a?p.ContextualMenuItem:a;return r.createElement("div",{className:this._classNames.header,style:e.style,role:"heading","aria-level":this.props.title?2:1},r.createElement(s,{item:e,classNames:t,index:n,onCheckmarkClick:o?this._onItemClick:void 0,hasIcons:i}))},t.prototype._renderAnchorMenuItem=function(e,t,n,o,i,a,s){var l=this.props.contextualMenuItemAs,u=this.state.expandedMenuItemKey;return r.createElement(f.ContextualMenuAnchor,{item:e,classNames:t,index:n,focusableElementIndex:o,totalItemCount:i,hasCheckmarks:a,hasIcons:s,contextualMenuItemAs:l,onItemMouseEnter:this._onItemMouseEnterBase,onItemMouseLeave:this._onMouseItemLeave,onItemMouseMove:this._onItemMouseMoveBase,onItemMouseDown:this._onItemMouseDown,executeItemClick:this._executeItemClick,onItemClick:this._onAnchorClick,onItemKeyDown:this._onItemKeyDown,getSubMenuId:this._getSubMenuId,expandedMenuItemKey:u,openSubMenu:this._onItemSubMenuExpand,dismissSubMenu:this._onSubMenuDismiss,dismissMenu:this.dismiss})},t.prototype._renderButtonItem=function(e,t,n,o,i,a,s){var l=this.props.contextualMenuItemAs,u=this.state.expandedMenuItemKey;return r.createElement(f.ContextualMenuButton,{item:e,classNames:t,index:n,focusableElementIndex:o,totalItemCount:i,hasCheckmarks:a,hasIcons:s,contextualMenuItemAs:l,onItemMouseEnter:this._onItemMouseEnterBase,onItemMouseLeave:this._onMouseItemLeave,onItemMouseMove:this._onItemMouseMoveBase,onItemMouseDown:this._onItemMouseDown,executeItemClick:this._executeItemClick,onItemClick:this._onItemClick,onItemClickBase:this._onItemClickBase,onItemKeyDown:this._onItemKeyDown,getSubMenuId:this._getSubMenuId,expandedMenuItemKey:u,openSubMenu:this._onItemSubMenuExpand,dismissSubMenu:this._onSubMenuDismiss,dismissMenu:this.dismiss})},t.prototype._renderSplitButton=function(e,t,n,o,i,a,s){var l=this.props.contextualMenuItemAs,u=this.state.expandedMenuItemKey;return r.createElement(f.ContextualMenuSplitButton,{item:e,classNames:t,index:n,focusableElementIndex:o,totalItemCount:i,hasCheckmarks:a,hasIcons:s,contextualMenuItemAs:l,onItemMouseEnter:this._onItemMouseEnterBase,onItemMouseLeave:this._onMouseItemLeave,onItemMouseMove:this._onItemMouseMoveBase,onItemMouseDown:this._onItemMouseDown,executeItemClick:this._executeItemClick,onItemClick:this._onItemClick,onItemClickBase:this._onItemClickBase,onItemKeyDown:this._onItemKeyDown,openSubMenu:this._onItemSubMenuExpand,dismissSubMenu:this._onSubMenuDismiss,dismissMenu:this.dismiss,expandedMenuItemKey:u,onTap:this._onPointerAndTouchEvent})},t.prototype._updateFocusOnMouseEvent=function(e,t,n){var o=this,r=n||t.currentTarget,i=this.props.subMenuHoverDelay,a=void 0===i?g:i;e.key!==this.state.expandedMenuItemKey&&(void 0!==this._enterTimerId&&(this._async.clearTimeout(this._enterTimerId),this._enterTimerId=void 0),void 0===this.state.expandedMenuItemKey&&r.focus(),u.hasSubmenu(e)?(t.stopPropagation(),this._enterTimerId=this._async.setTimeout(function(){r.focus(),o.setState({expandedByMouseClick:!0}),o._onItemSubMenuExpand(e,r),o._enterTimerId=void 0},a)):this._enterTimerId=this._async.setTimeout(function(){o._onSubMenuDismiss(t),r.focus(),o._enterTimerId=void 0},a))},t.prototype._getSubmenuProps=function(){var e=this.state,t=e.submenuTarget,n=e.expandedMenuItemKey,o=this._findItemByKey(n),r=null;return o&&(r={items:h(o),target:t,onDismiss:this._onSubMenuDismiss,isSubMenu:!0,id:this.state.subMenuId,shouldFocusOnMount:!0,shouldFocusOnContainer:this.state.expandedByMouseClick,directionalHint:l.getRTL()?8:11,className:this.props.className,gapSpace:0,isBeakVisible:!1},o.subMenuProps&&l.assign(r,o.subMenuProps)),r},t.prototype._findItemByKey=function(e){var t=this.props.items;return this._findItemByKeyFromItems(e,t)},t.prototype._findItemByKeyFromItems=function(e,t){for(var n=0,o=t;n<o.length;n++){var r=o[n];if(r.itemType===i.ContextualMenuItemType.Section&&r.sectionProps){var a=this._findItemByKeyFromItems(e,r.sectionProps.items);if(a)return a}else if(r.key&&r.key===e)return r}},t.prototype._setTargetWindowAndElement=function(e){if(e)if("string"==typeof e){var t=l.getDocument();this._target=t?t.querySelector(e):null,this._targetWindow=l.getWindow()}else if(e.stopPropagation)this._targetWindow=l.getWindow(e.toElement),this._target=e;else if(void 0!==e.x&&void 0!==e.y)this._targetWindow=l.getWindow(),this._target=e;else{var n=e;this._targetWindow=l.getWindow(n),this._target=e}else this._targetWindow=l.getWindow()},t.defaultProps={items:[],shouldFocusOnMount:!0,gapSpace:0,directionalHint:7,beakWidth:16,getMenuClassNames:s.getContextualMenuClassNames},t=n=o.__decorate([l.customizable("ContextualMenu",["theme"]),c.withResponsiveMode],t);var n}(l.BaseComponent);t.ContextualMenu=_},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0);o.__exportStar(n(196),t),o.__exportStar(n(88),t),o.__exportStar(n(25),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(197),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0);o.__exportStar(n(20),t),o.__exportStar(n(80),t),o.__exportStar(n(154),t),o.__exportStar(n(42),t),o.__exportStar(n(149),t),o.__exportStar(n(147),t),o.__exportStar(n(78),t),o.__exportStar(n(30),t),o.__exportStar(n(146),t),o.__exportStar(n(76),t),o.__exportStar(n(77),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(6).registerIconAlias("trash","delete")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-14"',src:"url('"+e+"fabric-icons-14-cf85ed5b.woff') format('woff')"},icons:{PublishCourse:"",DictionaryRemove:"",UserRemove:"",UserEvent:"",Encryption:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-13"',src:"url('"+e+"fabric-icons-13-be3ab2c9.woff') format('woff')"},icons:{PaddingTop:"",PaddingBottom:"",PaddingLeft:"",PaddingRight:"",NavigationFlipper:"",AlignJustify:"",TextOverflow:"",VisualsFolder:"",VisualsStore:"",PictureCenter:"",PictureFill:"",PicturePosition:"",PictureStretch:"",PictureTile:"",Slider:"",SliderHandleSize:"",DefaultRatio:"",NumberSequence:"",GUID:"",ReportAdd:"",DashboardAdd:"",MapPinSolid:"",WebPublish:"",PieSingleSolid:"",BlockedSolid:"",DrillDown:"",DrillDownSolid:"",DrillExpand:"",DrillShow:"",OneDriveFolder16:"",ChronosLogo:"",FunctionalManagerDashboard:"",BIDashboard:"",CodeEdit:"",RenewalCurrent:"",RenewalFuture:"",SplitObject:"",BulkUpload:"",DownloadDocument:"",WaitlistConfirm:"",WaitlistConfirmMirrored:"",LaptopSecure:"",DragObject:"",EntryView:"",EntryDecline:"",ContactCardSettings:"",ContactCardSettingsMirrored:"",CalendarSettings:"",CalendarSettingsMirrored:"",HardDriveLock:"",HardDriveUnlock:"",AccountManagement:"",TransitionPop:"",TransitionPush:"",TransitionEffect:"",LookupEntities:"",ExploreData:"",AddBookmark:"",SearchBookmark:"",DrillThrough:"",MasterDatabase:"",CertifiedDatabase:"",MaximumValue:"",MinimumValue:"",VisualStudioIDELogo32:"",PasteAsText:"",PasteAsCode:"",BrowserTab:"",BrowserTabScreenshot:"",DesktopScreenshot:"",FileYML:"",ClipboardSolid:"",AnalyticsView:"",Leave:"",Trending12:"",Blocked12:"",Warning12:"",CheckedOutByOther12:"",CheckedOutByYou12:"",CircleShapeSolid:"",SquareShapeSolid:"",TriangleShapeSolid:"",DropShapeSolid:"",RectangleShapeSolid:"",InsertColumnsLeft:"",InsertColumnsRight:"",InsertRowsAbove:"",InsertRowsBelow:"",DeleteColumns:"",DeleteRows:"",DeleteRowsMirrored:"",DeleteTable:"",VersionControlPush:"",ExternalGit:"",WhiteBoardApp16:"",WhiteBoardApp32:"",InsertSignatureLine:"",ArrangeByFrom:"",Phishing:"",CreateMailRule:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-12"',src:"url('"+e+"fabric-icons-12-e5eef780.woff') format('woff')"},icons:{ProjectLogo16:"",ProjectLogoFill16:"",SwayLogo32:"",SwayLogoFill32:"",SwayLogo16:"",SwayLogoFill16:"",ClassNotebookLogo32:"",ClassNotebookLogoFill32:"",ClassNotebookLogo16:"",ClassNotebookLogoFill16:"",ClassNotebookLogoInverse32:"",ClassNotebookLogoInverse16:"",StaffNotebookLogo32:"",StaffNotebookLogoFill32:"",StaffNotebookLogo16:"",StaffNotebookLogoFill16:"",StaffNotebookLogoInverted32:"",StaffNotebookLogoInverted16:"",KaizalaLogo:"",TaskLogo:"",ProtectionCenterLogo32:"",NonprofitLogo32:"",GallatinLogo:"",Globe2:"",Guitar:"",Breakfast:"",Brunch:"",BeerMug:"",Vacation:"",Teeth:"",Taxi:"",Chopsticks:"",SyncOccurence:"",UnsyncOccurence:"",PrimaryCalendar:"",SearchCalendar:"",VideoOff:"",MicrosoftFlowLogo:"",BusinessCenterLogo:"",ToDoLogoBottom:"",ToDoLogoTop:"",EditSolid12:"",EditSolidMirrored12:"",UneditableSolid12:"",UneditableSolidMirrored12:"",UneditableMirrored:"",AdminALogo32:"",AdminALogoFill32:"",ToDoLogoInverse:"",Snooze:"",WaffleOffice365:"",ImageSearch:"",NewsSearch:"",VideoSearch:"",R:"",FontColorA:"",FontColorSwatch:"",LightWeight:"",NormalWeight:"",SemiboldWeight:"",GroupObject:"",UngroupObject:"",AlignHorizontalLeft:"",AlignHorizontalCenter:"",AlignHorizontalRight:"",AlignVerticalTop:"",AlignVerticalCenter:"",AlignVerticalBottom:"",HorizontalDistributeCenter:"",VerticalDistributeCenter:"",Ellipse:"",Line:"",Octagon:"",Hexagon:"",Pentagon:"",RightTriangle:"",HalfCircle:"",QuarterCircle:"",ThreeQuarterCircle:"","6PointStar":"","12PointStar":"",ArrangeBringToFront:"",ArrangeSendToBack:"",ArrangeSendBackward:"",ArrangeBringForward:"",BorderDash:"",BorderDot:"",LineStyle:"",LineThickness:"",WindowEdit:"",HintText:"",MediaAdd:"",AnchorLock:"",AutoHeight:"",ChartSeries:"",ChartXAngle:"",ChartYAngle:"",Combobox:"",LineSpacing:"",Padding:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-11"',src:"url('"+e+"fabric-icons-11-2c5983e3.woff') format('woff')"},icons:{ChevronLeftEnd6:"",ChevronRightEnd6:"",ContextMenu:"",AzureAPIManagement:"",AzureServiceEndpoint:"",VSTSLogo:"",VSTSAltLogo1:"",VSTSAltLogo2:"",FileTypeSolution:"",WordLogoInverse16:"",WordLogo16:"",WordLogoFill16:"",PowerPointLogoInverse16:"",PowerPointLogo16:"",PowerPointLogoFill16:"",ExcelLogoInverse16:"",ExcelLogo16:"",ExcelLogoFill16:"",OneNoteLogoInverse16:"",OneNoteLogo16:"",OneNoteLogoFill16:"",OutlookLogoInverse16:"",OutlookLogo16:"",OutlookLogoFill16:"",PublisherLogoInverse16:"",PublisherLogo16:"",PublisherLogoFill16:"",VisioLogoInverse16:"",VisioLogo16:"",VisioLogoFill16:"",TestBeaker:"",TestBeakerSolid:"",TestExploreSolid:"",TestAutoSolid:"",TestUserSolid:"",TestImpactSolid:"",TestPlan:"",TestStep:"",TestParameter:"",TestSuite:"",TestCase:"",Sprint:"",SignOut:"",TriggerApproval:"",Rocket:"",AzureKeyVault:"",Transition:"",LikeSolid:"",DislikeSolid:"",DeclineCall:"",RectangularClipping:"",Spacer:"",SkypeLogo16:"",SkypeForBusinessLogo16:"",SkypeForBusinessLogoFill16:"",FilterSolid:"",MailUndelivered:"",MailTentative:"",MailTentativeMirrored:"",MailReminder:"",ReceiptUndelivered:"",ReceiptTentative:"",ReceiptTentativeMirrored:"",Inbox:"",IRMReply:"",IRMReplyMirrored:"",IRMForward:"",IRMForwardMirrored:"",VoicemailIRM:"",EventAccepted:"",EventTentative:"",EventTentativeMirrored:"",EventDeclined:"",IDBadge:"",BackgroundColor:"",OfficeFormsLogoInverse16:"",OfficeFormsLogo:"",OfficeFormsLogoFill:"",OfficeFormsLogo16:"",OfficeFormsLogoFill16:"",OfficeFormsLogoInverse24:"",OfficeFormsLogo24:"",OfficeFormsLogoFill24:"",PageLock:"",NotExecuted:"",NotImpactedSolid:"",FieldReadOnly:"",FieldRequired:"",BacklogBoard:"",ExternalBuild:"",ExternalTFVC:"",ExternalXAML:"",IssueSolid:"",DefectSolid:"",LadybugSolid:"",MTMLogo:"",NugetLogo:"",TFVCLogo:"",ProjectLogo32:"",ProjectLogoFill32:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-10"',src:"url('"+e+"fabric-icons-10-380f2273.woff') format('woff')"},icons:{FullWidthEdit:"",Plug:"",PlugSolid:"",PlugConnected:"",PlugDisconnected:"",UnlockSolid:"",Variable:"",Parameter:"",CommentUrgent:"",Storyboard:"",DiffInline:"",DiffSideBySide:"",ImageDiff:"",ImagePixel:"",FileBug:"",FileCode:"",FileComment:"",BusinessHoursSign:"",FileImage:"",FileSymlink:"",AutoFillTemplate:"",WorkItem:"",WorkItemBug:"",LogRemove:"",ColumnOptions:"",Packages:"",BuildIssue:"",AssessmentGroup:"",VariableGroup:"",FullHistory:"",SingleColumnEdit:"",DoubleColumnEdit:"",TripleColumnEdit:"",ColumnLeftTwoThirdsEdit:"",ColumnRightTwoThirdsEdit:"",StreamLogo:"",AlertSolid:"",MegaphoneSolid:"",TaskSolid:"",ConfigurationSolid:"",BugSolid:"",CrownSolid:"",Trophy2Solid:"",QuickNoteSolid:"",ConstructionConeSolid:"",PageListSolid:"",PageListMirroredSolid:"",StarburstSolid:"",ReadingModeSolid:"",SadSolid:"",HealthSolid:"",ShieldSolid:"",GiftBoxSolid:"",ShoppingCartSolid:"",MailSolid:"",ChatSolid:"",RibbonSolid:"",FinancialSolid:"",FinancialMirroredSolid:"",HeadsetSolid:"",PermissionsSolid:"",ParkingSolid:"",ParkingMirroredSolid:"",DiamondSolid:"",AsteriskSolid:"",OfflineStorageSolid:"",BankSolid:"",DecisionSolid:"",Parachute:"",ParachuteSolid:"",FiltersSolid:"",ColorSolid:"",ReviewSolid:"",ReviewRequestSolid:"",ReviewRequestMirroredSolid:"",ReviewResponseSolid:"",FeedbackRequestSolid:"",FeedbackRequestMirroredSolid:"",FeedbackResponseSolid:"",WorkItemBar:"",WorkItemBarSolid:"",Separator:"",NavigateExternalInline:"",PlanView:"",TimelineMatrixView:"",EngineeringGroup:"",ProjectCollection:"",CaretBottomRightCenter8:"",CaretBottomLeftCenter8:"",CaretTopRightCenter8:"",CaretTopLeftCenter8:"",DonutChart:"",ChevronUnfold10:"",ChevronFold10:"",DoubleChevronDown8:"",DoubleChevronUp8:"",DoubleChevronLeft8:"",DoubleChevronRight8:"",ChevronDownEnd6:"",ChevronUpEnd6:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-9"',src:"url('"+e+"fabric-icons-9-938d7113.woff') format('woff')"},icons:{BranchMerge:"",BranchPullRequest:"",BranchSearch:"",BranchShelveset:"",RawSource:"",MergeDuplicate:"",RowsGroup:"",RowsChild:"",Deploy:"",Redeploy:"",ServerEnviroment:"",VisioDiagram:"",HighlightMappedShapes:"",TextCallout:"",IconSetsFlag:"",VisioLogo:"",VisioLogoFill:"",VisioDocument:"",TimelineProgress:"",TimelineDelivery:"",Backlog:"",TeamFavorite:"",TaskGroup:"",TaskGroupMirrored:"",ScopeTemplate:"",AssessmentGroupTemplate:"",NewTeamProject:"",CommentAdd:"",CommentNext:"",CommentPrevious:"",ShopServer:"",LocaleLanguage:"",QueryList:"",UserSync:"",UserPause:"",StreamingOff:"",ArrowTallUpLeft:"",ArrowTallUpRight:"",ArrowTallDownLeft:"",ArrowTallDownRight:"",FieldEmpty:"",FieldFilled:"",FieldChanged:"",FieldNotChanged:"",RingerOff:"",PlayResume:"",BulletedList2:"",BulletedList2Mirrored:"",ImageCrosshair:"",GitGraph:"",Repo:"",RepoSolid:"",FolderQuery:"",FolderList:"",FolderListMirrored:"",LocationOutline:"",POISolid:"",CalculatorNotEqualTo:"",BoxSubtractSolid:"",BoxAdditionSolid:"",BoxMultiplySolid:"",BoxPlaySolid:"",BoxCheckmarkSolid:"",CirclePauseSolid:"",CirclePause:"",MSNVideosSolid:"",CircleStopSolid:"",CircleStop:"",NavigateBack:"",NavigateBackMirrored:"",NavigateForward:"",NavigateForwardMirrored:"",UnknownSolid:"",UnknownMirroredSolid:"",CircleAddition:"",CircleAdditionSolid:"",FilePDB:"",FileTemplate:"",FileSQL:"",FileJAVA:"",FileASPX:"",FileCSS:"",FileSass:"",FileLess:"",FileHTML:"",JavaScriptLanguage:"",CSharpLanguage:"",CSharp:"",VisualBasicLanguage:"",VB:"",CPlusPlusLanguage:"",CPlusPlus:"",FSharpLanguage:"",FSharp:"",TypeScriptLanguage:"",PythonLanguage:"",PY:"",CoffeeScript:"",MarkDownLanguage:"",FullWidth:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-8"',src:"url('"+e+"fabric-icons-8-d0700068.woff') format('woff')"},icons:{StatusCircleInfo:"",StatusCircleBlock2:"",StatusCircleQuestionMark:"",Toll:"",ExploreContentSingle:"",CollapseContent:"",CollapseContentSingle:"",InfoSolid:"",ProgressRingDots:"",CaloriesAdd:"",BranchFork:"",MobileReport:"",HardDriveGroup:"",FastMode:"",ToggleOff:"",Trophy2:"",BucketColor:"",BucketColorFill:"",Taskboard:"",SingleColumn:"",DoubleColumn:"",TripleColumn:"",ColumnLeftTwoThirds:"",ColumnRightTwoThirds:"",AccessLogoFill:"",AnalyticsLogo:"",AnalyticsQuery:"",NewAnalyticsQuery:"",AnalyticsReport:"",WordLogo:"",WordLogoFill:"",ExcelLogo:"",ExcelLogoFill:"",OneNoteLogo:"",OneNoteLogoFill:"",OutlookLogo:"",OutlookLogoFill:"",PowerPointLogo:"",PowerPointLogoFill:"",PublisherLogo:"",PublisherLogoFill:"",ScheduleEventAction:"",FlameSolid:"",ServerProcesses:"",Server:"",SaveAll:"",LinkedInLogo:"",SidePanelMirrored:"",ProtectRestrict:"",UnknownMirrored:"",PublicContactCardMirrored:"",GridViewSmall:"",GridViewMedium:"",GridViewLarge:"",Step:"",StepInsert:"",StepShared:"",StepSharedAdd:"",StepSharedInsert:"",ViewDashboard:"",ViewList:"",ViewListGroup:"",ViewListTree:"",TriggerAuto:"",TriggerUser:"",PivotChart:"",StackedBarChart:"",StackedLineChart:"",BuildQueue:"",BuildQueueNew:"",UserFollowed:"",ContactLink:"",Stack:"",Bullseye:"",VennDiagram:"",FiveTileGrid:"",FocalPoint:"",RingerRemove:"",TeamsLogoInverse:"",TeamsLogo:"",TeamsLogoFill:"",SkypeForBusinessLogoFill:"",SharepointLogo:"",SharepointLogoFill:"",DelveLogo:"",DelveLogoFill:"",OfficeVideoLogo:"",OfficeVideoLogoFill:"",ExchangeLogo:"",ExchangeLogoFill:"",DocumentApproval:"",CloneToDesktop:"",InstallToDrive:"",Blur:"",Build:"",ProcessMetaTask:"",BranchFork2:"",BranchLocked:"",BranchCommit:"",BranchCompare:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-7"',src:"url('"+e+"fabric-icons-7-3ac670e6.woff') format('woff')"},icons:{LandscapeOrientation:"",DocumentSearch:"",PublicCalendar:"",PublicContactCard:"",PublicEmail:"",PublicFolder:"",WordDocument:"",PowerPointDocument:"",ExcelDocument:"",GroupedList:"",ClassroomLogo:"",Sections:"",EditPhoto:"",Starburst:"",ShareiOS:"",AirTickets:"",PencilReply:"",Tiles2:"",SkypeCircleCheck:"",SkypeCircleClock:"",SkypeCircleMinus:"",SkypeMessage:"",ClosedCaption:"",ATPLogo:"",OfficeFormsLogoInverse:"",RecycleBin:"",EmptyRecycleBin:"",Hide2:"",Breadcrumb:"",BirthdayCake:"",TimeEntry:"",PageEdit:"",PageRemove:"",Database:"",EditContact:"",ConnectContacts:"",ActivateOrders:"",DeactivateOrders:"",DocumentManagement:"",CRMReport:"",ZipFolder:"",SurveyQuestions:"",TextDocument:"",TextDocumentShared:"",PageCheckedOut:"",SaveAndClose:"",Script:"",Archive:"",ActivityFeed:"",EventDate:"",ArrowUpRight:"",CaretRight:"",SetAction:"",CaretSolidLeft:"",CaretSolidDown:"",CaretSolidRight:"",CaretSolidUp:"",PowerAppsLogo:"",PowerApps2Logo:"",SearchIssue:"",SearchIssueMirrored:"",FabricAssetLibrary:"",FabricDataConnectionLibrary:"",FabricDocLibrary:"",FabricFormLibrary:"",FabricFormLibraryMirrored:"",FabricReportLibrary:"",FabricReportLibraryMirrored:"",FabricPublicFolder:"",FabricFolderSearch:"",FabricMovetoFolder:"",FabricUnsyncFolder:"",FabricSyncFolder:"",FabricOpenFolderHorizontal:"",FabricFolder:"",FabricFolderFill:"",FabricNewFolder:"",FabricPictureLibrary:"",AddFavorite:"",AddFavoriteFill:"",BufferTimeBefore:"",BufferTimeAfter:"",BufferTimeBoth:"",CannedChat:"",SkypeForBusinessLogo:"",PageCheckedin:"",ReadOutLoud:"",CaretBottomLeftSolid8:"",CaretBottomRightSolid8:"",FolderHorizontal:"",MicrosoftStaffhubLogo:"",GiftboxOpen:"",StatusCircleOuter:"",StatusCircleInner:"",StatusCircleRing:"",StatusTriangleOuter:"",StatusTriangleInner:"",StatusTriangleExclamation:"",StatusCircleExclamation:"",StatusCircleErrorX:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-6"',src:"url('"+e+"fabric-icons-6-baae6235.woff') format('woff')"},icons:{Superscript:"",Subscript:"",Strikethrough:"",Export:"",ExportMirrored:"",SingleBookmark:"",SingleBookmarkSolid:"",DoubleChevronDown:"",FollowUser:"",ReplyAll:"",WorkforceManagement:"",Questionnaire:"",ManagerSelfService:"",ReplyMirrored:"",ReplyAllMirrored:"",Medal:"",AddGroup:"",QuestionnaireMirrored:"",TemporaryUser:"",CaretSolid16:"",GroupedDescending:"",GroupedAscending:"",AwayStatus:"",MyMoviesTV:"",GenericScan:"",AustralianRules:"",WifiEthernet:"",TrackersMirrored:"",DateTimeMirrored:"",StopSolid:"",DoubleChevronUp12:"",DoubleChevronDown12:"",DoubleChevronLeft12:"",DoubleChevronRight12:"",CalendarAgenda:"",AddEvent:"",AssetLibrary:"",DataConnectionLibrary:"",DocLibrary:"",FormLibrary:"",FormLibraryMirrored:"",ReportLibrary:"",ReportLibraryMirrored:"",ContactCard:"",CustomList:"",CustomListMirrored:"",IssueTracking:"",IssueTrackingMirrored:"",PictureLibrary:"",OfficeAddinsLogo:"",OfflineOneDriveParachute:"",OfflineOneDriveParachuteDisabled:"",TriangleSolidUp12:"",TriangleSolidDown12:"",TriangleSolidLeft12:"",TriangleSolidRight12:"",TriangleUp12:"",TriangleDown12:"",TriangleLeft12:"",TriangleRight12:"",ArrowUpRight8:"",ArrowDownRight8:"",DocumentSet:"",DelveAnalytics:"",ArrowUpRightMirrored8:"",ArrowDownRightMirrored8:"",CompanyDirectory:"",CompanyDirectoryMirrored:"",OneDriveAdd:"",ProfileSearch:"",Header2:"",Header3:"",Header4:"",MarketDown:"",CalendarWorkWeek:"",SidePanel:"",GlobeFavorite:"",CaretTopLeftSolid8:"",CaretTopRightSolid8:"",ViewAll2:"",DocumentReply:"",PlayerSettings:"",ReceiptForward:"",ReceiptReply:"",ReceiptCheck:"",Fax:"",RecurringEvent:"",ReplyAlt:"",ReplyAllAlt:"",EditStyle:"",EditMail:"",Lifesaver:"",LifesaverLock:"",InboxCheck:"",FolderSearch:"",CollapseMenu:"",ExpandMenu:"",Boards:"",SunAdd:"",SunQuestionMark:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-5"',src:"url('"+e+"fabric-icons-5-5a61f6fb.woff') format('woff')"},icons:{YammerLogo:"",Hide:"",Uneditable:"",ReturnToSession:"",OpenFolderHorizontal:"",CalendarMirrored:"",SwayLogoInverse:"",OutOfOffice:"",Trophy:"",ReopenPages:"",EmojiTabSymbols:"",AADLogo:"",AccessLogo:"",AdminALogoInverse32:"",AdminCLogoInverse32:"",AdminDLogoInverse32:"",AdminELogoInverse32:"",AdminLLogoInverse32:"",AdminMLogoInverse32:"",AdminOLogoInverse32:"",AdminPLogoInverse32:"",AdminSLogoInverse32:"",AdminYLogoInverse32:"",DelveLogoInverse:"",ExchangeLogoInverse:"",LyncLogo:"",OfficeVideoLogoInverse:"",SocialListeningLogo:"",VisioLogoInverse:"",Balloons:"",Cat:"",MailAlert:"",MailCheck:"",MailLowImportance:"",MailPause:"",MailRepeat:"",SecurityGroup:"",Table:"",VoicemailForward:"",VoicemailReply:"",Waffle:"",RemoveEvent:"",EventInfo:"",ForwardEvent:"",WipePhone:"",AddOnlineMeeting:"",JoinOnlineMeeting:"",RemoveLink:"",PeopleBlock:"",PeopleRepeat:"",PeopleAlert:"",PeoplePause:"",TransferCall:"",AddPhone:"",UnknownCall:"",NoteReply:"",NoteForward:"",NotePinned:"",RemoveOccurrence:"",Timeline:"",EditNote:"",CircleHalfFull:"",Room:"",Unsubscribe:"",Subscribe:"",HardDrive:"",RecurringTask:"",TaskManager:"",TaskManagerMirrored:"",Combine:"",Split:"",DoubleChevronUp:"",DoubleChevronLeft:"",DoubleChevronRight:"",TextBox:"",TextField:"",NumberField:"",Dropdown:"",BookingsLogo:"",ClassNotebookLogoInverse:"",DelveAnalyticsLogo:"",DocsLogoInverse:"",Dynamics365Logo:"",DynamicSMBLogo:"",OfficeAssistantLogo:"",OfficeStoreLogo:"",OneNoteEduLogoInverse:"",PlannerLogo:"",PowerApps:"",Suitcase:"",ProjectLogoInverse:"",CaretLeft8:"",CaretRight8:"",CaretUp8:"",CaretDown8:"",CaretLeftSolid8:"",CaretRightSolid8:"",CaretUpSolid8:"",CaretDownSolid8:"",ClearFormatting:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-4"',src:"url('"+e+"fabric-icons-4-0838b5e4.woff') format('woff')"},icons:{Drop:"",SkiResorts:"",Snowflake:"",BusSolid:"",FerrySolid:"",AirplaneSolid:"",TrainSolid:"",Ticket:"",Devices4:"",AzureLogo:"",BingLogo:"",MSNLogo:"",OutlookLogoInverse:"",OfficeLogo:"",SkypeLogo:"",Door:"",EditMirrored:"",GiftCard:"",DoubleBookmark:"",StatusErrorFull:"",Certificate:"",FastForward:"",Rewind:"",Photo2:"",OpenSource:"",Movers:"",CloudDownload:"",Family:"",WindDirection:"",Bug:"",SiteScan:"",BrowserScreenShot:"",F12DevTools:"",CSS:"",JS:"",DeliveryTruck:"",ReminderPerson:"",ReminderGroup:"",TabletMode:"",Umbrella:"",NetworkTower:"",CityNext:"",Section:"",OneNoteLogoInverse:"",ToggleFilled:"",ToggleBorder:"",SliderThumb:"",ToggleThumb:"",Documentation:"",Badge:"",Giftbox:"",VisualStudioLogo:"",ExcelLogoInverse:"",WordLogoInverse:"",PowerPointLogoInverse:"",Cafe:"",SpeedHigh:"",Commitments:"",ThisPC:"",MusicNote:"",MicOff:"",EdgeLogo:"",CompletedSolid:"",AlbumRemove:"",MessageFill:"",TabletSelected:"",MobileSelected:"",LaptopSelected:"",TVMonitorSelected:"",DeveloperTools:"",InsertTextBox:"",LowerBrightness:"",DOM:"",CloudUpload:"",ScrollUpDown:"",DateTime:"",Event:"",Cake:"",Org:"",PartyLeader:"",DRM:"",CloudAdd:"",AppIconDefault:"",Photo2Add:"",Photo2Remove:"",POI:"",AddTo:"",RadioBtnOff:"",RadioBtnOn:"",ExploreContent:"",Product:"",ProgressLoopInner:"",ProgressLoopOuter:"",Blocked2:"",FangBody:"",ChatInviteFriend:"",Crown:"",ScaleUp:"",Feedback:"",SharepointLogoInverse:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-3"',src:"url('"+e+"fabric-icons-3-39ed3795.woff') format('woff')"},icons:{TimeSheet:"",TriangleSolid:"",VideoSolid:"",RainShowersNight:"",SnowShowerNight:"",Teamwork:"",HailNight:"",PeopleAdd:"",Glasses:"",DateTime2:"",Shield:"",Header1:"",PageAdd:"",NumberedList:"",PowerBILogo:"",Info2:"",MusicInCollectionFill:"",Asterisk:"",ErrorBadge:"",CircleFill:"",Record2:"",AllAppsMirrored:"",BookmarksMirrored:"",BulletedListMirrored:"",CaretHollowMirrored:"",CaretSolidMirrored:"",ChromeBackMirrored:"",ClosePaneMirrored:"",DockLeftMirrored:"",DoubleChevronLeftMedMirrored:"",HelpMirrored:"",ImportMirrored:"",ListMirrored:"",MailForwardMirrored:"",MailReplyMirrored:"",MailReplyAllMirrored:"",OpenPaneMirrored:"",ParkingLocationMirrored:"",SendMirrored:"",ShowResultsMirrored:"",ThumbnailViewMirrored:"",Devices3:"",Lightbulb:"",StatusTriangle:"",VolumeDisabled:"",Puzzle:"",EmojiNeutral:"",EmojiDisappointed:"",HomeSolid:"",Ringer:"",PDF:"",HeartBroken:"",StoreLogo16:"",MultiSelectMirrored:"",Broom:"",Cocktails:"",Wines:"",Articles:"",Cycling:"",DietPlanNotebook:"",Pill:"",ExerciseTracker:"",HandsFree:"",Medical:"",Running:"",Weights:"",Trackers:"",AddNotes:"",BarChart4:"",CirclePlus:"",Coffee:"",Cotton:"",Market:"",Money:"",PieDouble:"",PieSingle:"",RemoveFilter:"",Savings:"",Sell:"",StockDown:"",StockUp:"",Lamp:"",Source:"",MSNVideos:"",Cricket:"",Golf:"",Baseball:"",Soccer:"",MoreSports:"",AutoRacing:"",CollegeHoops:"",CollegeFootball:"",ProFootball:"",ProHockey:"",Rugby:"",SubstitutionsIn:"",Tennis:"",Arrivals:"",Design:"",Website:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-2"',src:"url('"+e+"fabric-icons-2-e49d4cfd.woff') format('woff')"},icons:{World:"",Comment:"",DockLeft:"",DockRight:"",Repair:"",Accounts:"",RadioBullet:"",Stopwatch:"",Clock:"",WorldClock:"",AlarmClock:"",Hospital:"",Timer:"",FullCircleMask:"",LocationFill:"",ChromeMinimize:"",Annotation:"",Fingerprint:"",Handwriting:"",Completed:"",Label:"",FlickDown:"",FlickUp:"",FlickLeft:"",FlickRight:"",MiniExpand:"",MiniContract:"",Streaming:"",MusicInCollection:"",OneDrive:"",CompassNW:"",Code:"",LightningBolt:"",CalculatorMultiply:"",CalculatorAddition:"",CalculatorSubtract:"",CalculatorEqualTo:"",PrintfaxPrinterFile:"",Communications:"",Headset:"",Health:"",ChevronUpSmall:"",ChevronDownSmall:"",ChevronLeftSmall:"",ChevronRightSmall:"",ChevronUpMed:"",ChevronDownMed:"",ChevronLeftMed:"",ChevronRightMed:"",PC1:"",PresenceChickletVideo:"",Reply:"",HalfAlpha:"",ConstructionCone:"",DoubleChevronLeftMed:"",Volume0:"",Volume1:"",Volume2:"",Volume3:"",Chart:"",Robot:"",LockSolid:"",BidiLtr:"",BidiRtl:"",RightDoubleQuote:"",Sunny:"",CloudWeather:"",Cloudy:"",PartlyCloudyDay:"",PartlyCloudyNight:"",ClearNight:"",RainShowersDay:"",Rain:"",Thunderstorms:"",RainSnow:"",Snow:"",BlowingSnow:"",Frigid:"",Fog:"",Squalls:"",Duststorm:"",Unknown:"",Precipitation:"",Ribbon:"",AreaChart:"",Assign:"",CheckList:"",Diagnostic:"",Generate:"",LineChart:"",Equalizer:"",BarChartHorizontal:"",BarChartVertical:"",Freezing:"",Processing:"",SnowShowerDay:"",HailDay:"",WorkFlow:"",HourGlass:"",StoreLogoMed20:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-1"',src:"url('"+e+"fabric-icons-1-8143b877.woff') format('woff')"},icons:{Ferry:"",Highlight:"",PowerButton:"",Tab:"",Admin:"",TVMonitor:"",Speakers:"",StackIndicator:"",Nav2DMapView:"",Car:"",Bus:"",EatDrink:"",LocationCircle:"",Home:"",SwitcherStartEnd:"",ParkingLocation:"",IncidentTriangle:"",Touch:"",MapDirections:"",CaretHollow:"",CaretSolid:"",History:"",Location:"",Work:"",Recent:"",Hotel:"",LocationDot:"",Dictionary:"",ChromeBack:"",FolderOpen:"",PinnedFill:"",RevToggleKey:"",Previous:"",Next:"",Sync:"",Help:"",Emoji:"",MailForward:"",ClosePane:"",OpenPane:"",PreviewLink:"",ZoomIn:"",Bookmarks:"",Document:"",ProtectedDocument:"",OpenInNewWindow:"",MailFill:"",ViewAll:"",Switch:"",Rename:"",Remote:"",SelectAll:"",Orientation:"",Import:"",Picture:"",ChromeClose:"",ShowResults:"",Message:"",CalendarDay:"",CalendarWeek:"",MailReplyAll:"",Read:"",Cut:"",PaymentCard:"",Copy:"",Important:"",MailReply:"",GotoToday:"",Font:"",FontColor:"",FolderFill:"",Permissions:"",DisableUpdates:"",Unfavorite:"",Italic:"",Underline:"",Bold:"",MoveToFolder:"",Dislike:"",Like:"",AlignCenter:"",OpenFile:"",FontDecrease:"",FontIncrease:"",FontSize:"",CellPhone:"",Calculator:"",Library:"",PostUpdate:"",NewFolder:"",CalendarReply:"",UnsyncFolder:"",SyncFolder:"",BlockContact:"",Accept:"",BulletedList:"",Preview:"",News:"",Chat:"",Group:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-0"',src:"url('"+e+"fabric-icons-0-6a62cc1b.woff') format('woff')"},icons:{DecreaseIndentLegacy:"",IncreaseIndentLegacy:"",SizeLegacy:"",InternetSharing:"",Brightness:"",MapPin:"",Airplane:"",Tablet:"",QuickNote:"",Video:"",People:"",Phone:"",Pin:"",Shop:"",Stop:"",Link:"",AllApps:"",Zoom:"",ZoomOut:"",Microphone:"",Camera:"",Attach:"",Send:"",FavoriteList:"",PageSolid:"",Forward:"",Back:"",Refresh:"",Lock:"",ReportHacked:"",EMI:"",MiniLink:"",Blocked:"",ReadingMode:"",Favicon:"",Remove:"",Checkbox:"",CheckboxComposite:"",CheckboxIndeterminate:"",CheckboxCompositeReversed:"",BackToWindow:"",FullScreen:"",Print:"",Up:"",Down:"",OEM:"",Save:"",Cloud:"",CommandPrompt:"",Sad:"",SIPMove:"",EraseTool:"",GripperTool:"",Dialpad:"",PageLeft:"",PageRight:"",MultiSelect:"",Play:"",Pause:"",Emoji2:"",GripperBarHorizontal:"",System:"",Personalize:"",SearchAndApps:"",Globe:"",ContactInfo:"",Unpin:"",Contact:"",Memo:"",Paste:"",WindowsLogo:"",Error:"",GripperBarVertical:"",Unlock:"",AutoEnhanceOn:"",AutoEnhanceOff:"",Color:"",SaveAs:"",Light:"",Filters:"",AspectRatio:"",Contrast:"",Redo:"",Crop:"",PhotoCollection:"",Album:"",Rotate:"",PanoIndicator:"",RedEye:"",ThumbnailView:"",Package:"",Warning:"",Financial:"",Education:"",ShoppingCart:"",Train:"",Move:"",TouchPointer:"",Merge:"",TurnRight:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(6);t.initializeIcons=function(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons"',src:"url('"+e+"fabric-icons-a13498cf.woff') format('woff')"},icons:{GlobalNavButton:"",ChevronDown:"",ChevronUp:"",Edit:"",Add:"",Cancel:"",More:"",Settings:"",Mail:"",Filter:"",Search:"",Share:"",BlockedSite:"",FavoriteStar:"",FavoriteStarFill:"",CheckMark:"",Delete:"",ChevronLeft:"",ChevronRight:"",Calendar:"",Megaphone:"",Undo:"",Flag:"",Page:"",Pinned:"",View:"",Clear:"",Download:"",Upload:"",Folder:"",Sort:"",AlignRight:"",AlignLeft:"",Tag:"",AddFriend:"",Info:"",SortLines:"",List:"",CircleRing:"",Heart:"",HeartFill:"",Tiles:"",Embed:"",Glimmer:"",Ascending:"",Descending:"",SortUp:"",SortDown:"",SyncToPC:"",LargeGrid:"",SkypeCheck:"",SkypeClock:"",SkypeMinus:"",ClearFilter:"",Flow:"",StatusCircleCheckmark:"",MoreVertical:""}};o.registerIcons(n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(17),r=n(44),i=n(33);for(var a in t.ColorClassNames={},r.DefaultPalette)r.DefaultPalette.hasOwnProperty(a)&&(s(t.ColorClassNames,a,"",!1,"color"),s(t.ColorClassNames,a,"Hover",!0,"color"),s(t.ColorClassNames,a,"Background",!1,"background"),s(t.ColorClassNames,a,"BackgroundHover",!0,"background"),s(t.ColorClassNames,a,"Border",!1,"borderColor"),s(t.ColorClassNames,a,"BorderHover",!0,"borderColor"));function s(e,t,n,r,a){Object.defineProperty(e,t+n,{get:function(){var e,n=((e={})[a]=i.getTheme().palette[t],e);return o.mergeStyles(r?{selectors:{":hover":n}}:n).toString()},enumerable:!0,configurable:!0})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(45),r=n(33);t.FontClassNames=o.buildClassMap(r.DefaultFontStyles)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.normalize={boxShadow:"none",margin:0,padding:0,boxSizing:"border-box"},t.noWrap={overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var n="__currentId__",o="id__",r="undefined"!=typeof window&&window||e;function i(e,t){for(var n in e)if(e.hasOwnProperty(n)&&(!t.hasOwnProperty(n)||t[n]!==e[n]))return!1;return!0}function a(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];t=t||{};for(var r=0,i=n;r<i.length;r++){var a=i[r];if(a)for(var s in a)!a.hasOwnProperty(s)||e&&!e(s)||(t[s]=a[s])}return t}void 0===r[n]&&(r[n]=0),t.shallowCompare=function(e,t){return i(e,t)&&i(t,e)},t.assign=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return a.apply(this,[null,e].concat(t))},t.filteredAssign=a,t.getId=function(e){var t=r[n]++;return(e||o)+t},t.mapEnumByName=function(e,t){return Object.keys(e).map(function(n){if(String(Number(n))!==n)return t(n,e[n])}).filter(function(e){return!!e})},t.values=function(e){return Object.keys(e).reduce(function(t,n){return t.push(e[n]),t},[])}}).call(this,n(52))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(220),r=function(){function e(t){this._id=e._uniqueId++,this._parent=t,this._eventRecords=[]}return e.raise=function(t,n,r,i){var a;if(e._isElement(t)){if(document.createEvent){var s=document.createEvent("HTMLEvents");s.initEvent(n,i||!1,!0),o.assign(s,r),a=t.dispatchEvent(s)}else if(document.createEventObject){var l=document.createEventObject(r);t.fireEvent("on"+n,l)}}else for(;t&&!1!==a;){var u=t.__events__,c=u?u[n]:null;if(c)for(var d in c)if(c.hasOwnProperty(d))for(var p=c[d],f=0;!1!==a&&f<p.length;f++){var h=p[f];h.objectCallback&&(a=h.objectCallback.call(h.parent,r))}t=i?t.parent:null}return a},e.isObserved=function(e,t){var n=e&&e.__events__;return!!n&&!!n[t]},e.isDeclared=function(e,t){var n=e&&e.__declaredEvents;return!!n&&!!n[t]},e.stopPropagation=function(e){e.stopPropagation?e.stopPropagation():e.cancelBubble=!0},e._isElement=function(e){return!!e&&(!!e.addEventListener||"undefined"!=typeof HTMLElement&&e instanceof HTMLElement)},e.prototype.dispose=function(){this._isDisposed||(this._isDisposed=!0,this.off(),this._parent=null)},e.prototype.onAll=function(e,t,n){for(var o in t)t.hasOwnProperty(o)&&this.on(e,o,t[o],n)},e.prototype.on=function(t,n,o,r){var i=this;if(n.indexOf(",")>-1)for(var a=n.split(/[ ,]+/),s=0;s<a.length;s++)this.on(t,a[s],o,r);else{var l=this._parent,u={target:t,eventName:n,parent:l,callback:o,useCapture:r||!1};if((a=t.__events__=t.__events__||{})[n]=a[n]||{count:0},a[n][this._id]=a[n][this._id]||[],a[n][this._id].push(u),a[n].count++,e._isElement(t)){var c=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!i._isDisposed){var n;try{if(!1===(n=o.apply(l,e))&&e[0]){var r=e[0];r.preventDefault&&r.preventDefault(),r.stopPropagation&&r.stopPropagation(),r.cancelBubble=!0}}catch(r){}return n}};u.elementCallback=c,t.addEventListener?t.addEventListener(n,c,r):t.attachEvent&&t.attachEvent("on"+n,c)}else{u.objectCallback=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!i._isDisposed)return o.apply(l,e)}}this._eventRecords.push(u)}},e.prototype.off=function(e,t,n,o){for(var r=0;r<this._eventRecords.length;r++){var i=this._eventRecords[r];if(!(e&&e!==i.target||t&&t!==i.eventName||n&&n!==i.callback||"boolean"==typeof o&&o!==i.useCapture)){var a=i.target.__events__,s=a[i.eventName],l=s?s[this._id]:null;l&&(1!==l.length&&n?(s.count--,l.splice(l.indexOf(i),1)):(s.count-=l.length,delete a[i.eventName][this._id]),s.count||delete a[i.eventName]),i.elementCallback&&(i.target.removeEventListener?i.target.removeEventListener(i.eventName,i.elementCallback,i.useCapture):i.target.detachEvent&&i.target.detachEvent("on"+i.eventName,i.elementCallback)),this._eventRecords.splice(r--,1)}}},e.prototype.raise=function(t,n,o){return e.raise(this._parent,t,n,o)},e.prototype.declare=function(e){var t=this._parent.__declaredEvents=this._parent.__declaredEvents||{};if("string"==typeof e)t[e]=!0;else for(var n=0;n<e.length;n++)t[e[n]]=!0},e._uniqueId=0,e}();t.EventGroup=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(100),i=n(221),a={settings:{},scopedSettings:{}},s=r.GlobalSettings.getValue("customizations",{settings:{},scopedSettings:{}}),l=new i.EventGroup(s),u=function(){function e(){}return e.reset=function(){s.settings={},s.scopedSettings={}},e.applySettings=function(t){s.settings=o.__assign({},s.settings,t),e._raiseChange()},e.applyScopedSettings=function(t,n){s.scopedSettings[t]=o.__assign({},s.scopedSettings[t],n),e._raiseChange()},e.getSettings=function(e,t,n){void 0===n&&(n=a);for(var o={},r=t&&n.scopedSettings[t]||{},i=t&&s.scopedSettings[t]||{},l=0,u=e;l<u.length;l++){var c=u[l];o[c]=r[c]||n.settings[c]||i[c]||s.settings[c]}return o},e.observe=function(e){l.on(s,"change",e)},e.unobserve=function(e){l.off(s,"change",e)},e._raiseChange=function(){l.raise("change")},e}();t.Customizations=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(0),i=n(222),a=n(99),s=n(44),l=n(28),u={palette:s.DefaultPalette,semanticColors:f(s.DefaultPalette,!1,!1),fonts:a.DefaultFontStyles,isInverted:!1,disableGlobalClassNames:!1},c=[];if(t.ThemeSettingName="theme",!i.Customizations.getSettings([t.ThemeSettingName]).theme){var d="undefined"!=typeof window?window:void 0;d&&d.FabricConfig&&d.FabricConfig.theme&&(u=p(d.FabricConfig.theme)),i.Customizations.applySettings(((o={})[t.ThemeSettingName]=u,o))}function p(e,t){void 0===t&&(t=!1);var n=r.__assign({},s.DefaultPalette,e.palette);e.palette&&e.palette.accent||(n.accent=n.themePrimary);var o=r.__assign({},f(n,!!e.isInverted,t),e.semanticColors);return{palette:n,fonts:r.__assign({},a.DefaultFontStyles,e.fonts),semanticColors:o,isInverted:!!e.isInverted,disableGlobalClassNames:!!e.disableGlobalClassNames}}function f(e,t,n){return function(e,t){var n="";!0===t&&(n=" /* @deprecated */");return e.listTextColor=e.listText+n,e}({bodyBackground:e.white,bodyText:e.neutralPrimary,bodyTextChecked:e.black,bodySubtext:e.neutralSecondary,bodyDivider:e.neutralTertiaryAlt,disabledBackground:e.neutralLighter,disabledText:e.neutralTertiary,disabledBodyText:e.neutralTertiaryAlt,disabledSubtext:e.neutralQuaternary,focusBorder:e.black,errorText:t?"#ff5f5f":e.redDark,warningText:t?"#ffffff":"#333333",errorBackground:t?"rgba(232, 17, 35, .5)":"rgba(232, 17, 35, .2)",blockingBackground:t?"rgba(234, 67, 0, .5)":"rgba(234, 67, 0, .2)",warningBackground:t?"rgba(255, 251, 0, .6)":"rgba(255, 185, 0, .2)",warningHighlight:t?"#fff100":"#ffb900",successBackground:t?"rgba(186, 216, 10, .4)":"rgba(186, 216, 10, .2)",inputBorder:e.neutralTertiary,inputBorderHovered:e.neutralDark,inputBackground:e.white,inputBackgroundChecked:e.themePrimary,inputBackgroundCheckedHovered:e.themeDarkAlt,inputForegroundChecked:e.white,inputFocusBorderAlt:e.themePrimary,smallInputBorder:e.neutralSecondary,inputPlaceholderText:e.neutralSecondary,buttonBackground:e.neutralLighter,buttonBackgroundChecked:e.neutralTertiaryAlt,buttonBackgroundHovered:e.neutralLight,buttonBackgroundCheckedHovered:e.neutralLight,buttonBorder:"transparent",buttonText:e.neutralPrimary,buttonTextHovered:e.black,buttonTextChecked:e.neutralDark,buttonTextCheckedHovered:e.black,menuItemBackgroundHovered:e.neutralLighter,menuItemBackgroundChecked:e.neutralLight,menuIcon:e.themePrimary,menuHeader:e.themePrimary,listBackground:e.white,listText:e.neutralPrimary,listItemBackgroundHovered:e.neutralLighter,listItemBackgroundChecked:e.neutralLight,listItemBackgroundCheckedHovered:e.neutralQuaternaryAlt,listHeaderBackgroundHovered:e.neutralLighter,listHeaderBackgroundPressed:e.neutralLight,link:e.themePrimary,linkHovered:e.themeDarker,listTextColor:""},n)}t.getTheme=function(e){return void 0===e&&(e=!1),!0===e&&(u=p({},e)),u},t.registerOnThemeChangeCallback=function(e){-1===c.indexOf(e)&&c.push(e)},t.removeOnThemeChangeCallback=function(e){var t=c.indexOf(e);-1!==t&&c.splice(t,1)},t.loadTheme=function(e,n){return void 0===n&&(n=!1),u=p(e,n),l.loadTheme(r.__assign({},u.palette,u.semanticColors)),i.Customizations.applySettings(((o={})[t.ThemeSettingName]=u,o)),c.forEach(function(e){try{e(u)}catch(e){}}),u;var o},t.createTheme=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getGlobalClassNames=function(e,t){return t.disableGlobalClassNames?{}:e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(17),i="14s",a="2s",s="1";function l(e,t){return{borderColor:e,borderWidth:"0px",width:t,height:t}}function u(e){return{opacity:1,borderWidth:e}}function c(e,t){return{borderWidth:"0",width:t,height:t,opacity:0,borderColor:e}}function d(e,t){return o.__assign({},l(e,t),{opacity:0})}t.PulsingBeaconAnimationStyles={continuousPulseAnimationDouble:function(e,t,n,o,i){return r.keyframes({"0%":l(e,n),"1.42%":u(i),"3.57%":{opacity:1},"7.14%":c(t,o),"8%":d(e,n),"29.99%":d(e,n),"30%":l(e,n),"31.42%":u(i),"33.57%":{opacity:1},"37.14%":c(t,o),"38%":d(e,n),"79.42%":d(e,n),79.43:l(e,n),81.85:u(i),83.42:{opacity:1},"87%":c(t,o),"100%":{}})},continuousPulseAnimationSingle:function(e,t,n,o,i){return r.keyframes({"0%":l(e,n),"14.2%":u(i),"35.7%":{opacity:1},"71.4%":c(t,o),"100%":{}})},createDefaultAnimation:function(e){return{animationName:e,animationIterationCount:s,animationDuration:i,animationDelay:a}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hiddenContentStyle={position:"absolute",width:1,height:1,margin:-1,padding:0,border:0,overflow:"hidden"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=((o={})[38]=1,o[40]=1,o[37]=1,o[39]=1,o[36]=1,o[35]=1,o[9]=1,o[33]=1,o[34]=1,o);t.isDirectionalKeyCode=function(e){return!!r[e]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(97),r=n(227);function i(e){var n=o.getWindow(e.target);if(n){var r=n.document.body.classList;r.contains(t.IsFocusVisibleClassName)&&r.remove(t.IsFocusVisibleClassName)}}function a(e){var n=o.getWindow(e.target);if(n){var i=n.document.body.classList;r.isDirectionalKeyCode(e.which)&&!i.contains(t.IsFocusVisibleClassName)&&i.add(t.IsFocusVisibleClassName)}}t.IsFocusVisibleClassName="ms-Fabric--isFocusVisible",t.initializeFocusRects=function(e){var t=e||o.getWindow();t&&!t.__hasInitializeFocusRects__&&(t.__hasInitializeFocusRects__=!0,t.addEventListener("mousedown",i,!0),t.addEventListener("keydown",a,!0))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(96),r=n(228),i=n(95);t.getFocusStyle=function(e,t,n,a){return void 0===t&&(t=0),void 0===n&&(n="relative"),void 0===a&&(a=void 0),{outline:"transparent",position:n,selectors:(s={"::-moz-focus-inner":{border:"0"}},s["."+r.IsFocusVisibleClassName+" &:focus:after"]={content:'""',position:"absolute",left:t+1,top:t+1,bottom:t+1,right:t+1,border:"1px solid "+e.palette.white,outline:"1px solid "+e.palette.neutralSecondary,zIndex:i.ZIndexes.FocusStyle,selectors:(l={},l[o.HighContrastSelector]=a,l)},s)};var s,l},t.focusClear=function(){return{selectors:{"&::-moz-focus-inner":{border:0},"&":{outline:"transparent"}}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getItem=function(e){var t=null;try{t=window.localStorage.getItem(e)}catch(e){}return t},t.setItem=function(e,t){try{window.localStorage.setItem(e,t)}catch(e){}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(97),i=n(230);t.getLanguage=function(){if(void 0===o){var e=r.getDocument(),t=i.getItem("language");null!==t&&(o=t),void 0===o&&e&&(o=e.documentElement.getAttribute("lang")),void 0===o&&(o="en")}return o},t.setLanguage=function(e,t){void 0===t&&(t=!1);var n=r.getDocument();n&&n.documentElement.setAttribute("lang",e),t||i.setItem("language",e),o=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(17),r="cubic-bezier(.1,.9,.2,1)",i="cubic-bezier(.1,.25,.75,.9)",a=o.keyframes({from:{opacity:0},to:{opacity:1}}),s=o.keyframes({from:{opacity:1},to:{opacity:0}}),l=U(-10),u=U(-20),c=U(-40),d=U(-400),p=U(10),f=U(20),h=U(40),m=U(400),g=j(10),_=j(20),v=j(-10),y=j(-20),b=W(10),C=W(20),S=W(40),x=W(400),E=W(-10),k=W(-20),w=W(-40),I=W(-400),T=H(-10),M=H(-20),P=H(10),D=H(20),O=o.keyframes({from:{transform:"scale3d(.98,.98,1)"},to:{transform:"scale3d(1,1,1)"}}),F=o.keyframes({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(.98,.98,1)"}}),R=o.keyframes({from:{transform:"scale3d(1.03,1.03,1)"},to:{transform:"scale3d(1,1,1)"}}),A=o.keyframes({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(1.03,1.03,1)"}}),L=o.keyframes({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(90deg)"}}),N=o.keyframes({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(-90deg)"}});function B(e,t,n){return{animationName:e,animationDuration:t,animationTimingFunction:n,animationFillMode:"both"}}function U(e){return o.keyframes({from:{transform:"translate3d("+e+"px,0,0)"},to:{transform:"translate3d(0,0,0)"}})}function j(e){return o.keyframes({from:{transform:"translate3d(0,"+e+"px,0)"},to:{transform:"translate3d(0,0,0)"}})}function W(e){return o.keyframes({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d("+e+"px,0,0)"}})}function H(e){return o.keyframes({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d(0,"+e+"px,0)"}})}t.AnimationVariables={easeFunction1:r,easeFunction2:i,durationValue1:"0.167s",durationValue2:"0.267s",durationValue3:"0.367s",durationValue4:"0.467s"},t.AnimationStyles={slideRightIn10:B(a+","+l,"0.367s",r),slideRightIn20:B(a+","+u,"0.367s",r),slideRightIn40:B(a+","+c,"0.367s",r),slideRightIn400:B(a+","+d,"0.367s",r),slideLeftIn10:B(a+","+p,"0.367s",r),slideLeftIn20:B(a+","+f,"0.367s",r),slideLeftIn40:B(a+","+h,"0.367s",r),slideLeftIn400:B(a+","+m,"0.367s",r),slideUpIn10:B(a+","+g,"0.367s",r),slideUpIn20:B(a+","+_,"0.367s",r),slideDownIn10:B(a+","+v,"0.367s",r),slideDownIn20:B(a+","+y,"0.367s",r),slideRightOut10:B(s+","+b,"0.367s",r),slideRightOut20:B(s+","+C,"0.367s",r),slideRightOut40:B(s+","+S,"0.367s",r),slideRightOut400:B(s+","+x,"0.367s",r),slideLeftOut10:B(s+","+E,"0.367s",r),slideLeftOut20:B(s+","+k,"0.367s",r),slideLeftOut40:B(s+","+w,"0.367s",r),slideLeftOut400:B(s+","+I,"0.367s",r),slideUpOut10:B(s+","+T,"0.367s",r),slideUpOut20:B(s+","+M,"0.367s",r),slideDownOut10:B(s+","+P,"0.367s",r),slideDownOut20:B(s+","+D,"0.367s",r),scaleUpIn100:B(a+","+O,"0.367s",r),scaleDownIn100:B(a+","+R,"0.367s",r),scaleUpOut103:B(s+","+A,"0.167s",i),scaleDownOut98:B(s+","+F,"0.167s",i),fadeIn100:B(a,"0.167s",i),fadeIn200:B(a,"0.267s",i),fadeIn400:B(a,"0.367s",i),fadeIn500:B(a,"0.467s",i),fadeOut100:B(s,"0.167s",i),fadeOut200:B(s,"0.267s",i),fadeOut400:B(s,"0.367s",i),fadeOut500:B(s,"0.467s",i),rotate90deg:B(L,"0.1s",i),rotateN90deg:B(N,"0.1s",i)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(17),r=n(101),i={display:"inline-block"};t.getIconClassName=function(e){var t="",n=r.getIcon(e);return n&&(t=o.mergeStyles(n.subset.className,i,{selectors:{"::before":{content:'"'+n.code+'"'}}})),t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=void 0;function r(e){o?o(e):console&&console.warn&&console.warn(e)}t.warnDeprecations=function(e,t,n){for(var o in n)if(t&&o in t){var i=e+" property '"+o+"' was used but has been deprecated.",a=n[o];a&&(i+=" Use '"+a+"' instead."),r(i)}},t.warnMutuallyExclusive=function(e,t,n){for(var o in n)if(t&&o in t){var i=n[o];i&&i in t&&r(e+" property '"+o+"' is mutually exclusive with '"+n[o]+"'. Use one or the other.")}},t.warnConditionallyRequiredProps=function(e,t,n,o,i){if(!0===i)for(var a=0,s=n;a<s.length;a++){var l=s[a];l in t||r(e+" property '"+l+"' is required when '"+o+"' is used.'")}},t.warn=r,t.setWarningCallback=function(e){o=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(21),r=n(34);t.keyframes=function(e){var t=o.Stylesheet.getInstance(),n=t.getClassName(),i=[];for(var a in e)e.hasOwnProperty(a)&&i.push(a,"{",r.serializeRuleEntries(e[a]),"}");var s=i.join("");return t.insertRule("@keyframes "+n+"{"+s+"}"),t.cacheClassName(n,s,[],["keyframes",s]),n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(21),r=n(34);t.fontFace=function(e){o.Stylesheet.getInstance().insertRule("@font-face{"+r.serializeRuleEntries(e)+"}")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(103),r=n(102),i=n(34);t.mergeStyleSets=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n={},a={},s=e[0];if(s){e.length>1&&(s=r.concatStyleSets.apply(void 0,e));var l=[];for(var u in s)if(s.hasOwnProperty(u)){var c=s[u],d=o.extractStyleParts(c),p=d.classes,f=d.objects,h=i.styleToRegistration({displayName:u},f);l.push(h),h&&(a[u]=h.className,n[u]=p.concat([h.className]).join(" "))}for(var m=0,g=l;m<g.length;m++)(h=g[m])&&i.applyRegistration(h,a)}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(21),i="left",a="right",s="@noflip",l=((o={})[i]=a,o[a]=i,o),u={"w-resize":"e-resize","sw-resize":"se-resize","nw-resize":"ne-resize"},c=d();function d(){return void 0===c&&(c="undefined"!=typeof document&&!!document.documentElement&&"rtl"===document.documentElement.getAttribute("dir")),c}t.setRTL=function(e){c!==e&&(r.Stylesheet.getInstance().resetKeys(),c=e)},t.getRTL=d,t.rtlifyRules=function(e,t){if(d()){var n=e[t];if(!n)return;var o=e[t+1];if("string"==typeof o&&o.indexOf(s)>=0)e[t+1]=o.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g,"");else if(n.indexOf(i)>=0)e[t]=n.replace(i,a);else if(n.indexOf(a)>=0)e[t]=n.replace(a,i);else if(String(o).indexOf(i)>=0)e[t+1]=o.replace(i,a);else if(String(o).indexOf(a)>=0)e[t+1]=o.replace(a,i);else if(l[n])e[t]=l[n];else if(u[o])e[t+1]=u[o];else switch(n){case"margin":case"padding":e[t+1]=function(e){if("string"==typeof e){var t=e.split(" ");if(4===t.length)return t[0]+" "+t[3]+" "+t[2]+" "+t[1]}return e}(o);break;case"box-shadow":e[t+1]=function(e,t){var n=e.split(" "),o=parseInt(n[t],10);return n[0]=n[0].replace(String(o),String(-1*o)),n.join(" ")}(o,0)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=["column-count","font-weight","flex-basis","flex","flex-grow","flex-shrink","fill-opacity","opacity","order","z-index","zoom"];t.provideUnits=function(e,t){var n=e[t],r=e[t+1];if("number"==typeof r){var i=-1===o.indexOf(n)?"px":"";e[t+1]=""+r+i}}},function(e,t,n){"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.getVendorSettings=function(){if(!o){var e="undefined"!=typeof document?document:void 0,t="undefined"!=typeof navigator?navigator:void 0,n=t?t.userAgent.toLowerCase():void 0;o=e?{isWebkit:!!(e&&"WebkitAppearance"in e.documentElement.style),isMoz:!!(n&&n.indexOf("firefox")>-1),isOpera:!!(n&&n.indexOf("opera")>-1),isMs:!(!t||!/rv:11.0/i.test(t.userAgent)&&!/Edge\/\d./i.test(navigator.userAgent))}:{isWebkit:!0,isMoz:!0,isOpera:!0,isMs:!0}}return o},t.setVendorSettings=function(e){o=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(240),r={"user-select":1};t.prefixRules=function(e,t){var n=o.getVendorSettings(),i=e[t];if(r[i]){var a=e[t+1];r[i]&&(n.isWebkit&&e.push("-webkit-"+i,a),n.isMoz&&e.push("-moz-"+i,a),n.isMs&&e.push("-ms-"+i,a),n.isOpera&&e.push("-o-"+i,a))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.kebabRules=function(e,t){e[t]=e[t].replace(/([A-Z])/g,"-$1").toLowerCase()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(34),r=n(103);t.mergeStyles=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=r.extractStyleParts(e),i=n.classes,a=n.objects;return a.length&&i.push(o.styleToClassName(a)),i.join(" ")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(104);t.buildClassMap=function(e){var t={},n=function(n){var r;e.hasOwnProperty(n)&&Object.defineProperty(t,n,{get:function(){return void 0===r&&(r=o.mergeStyles(e[n]).toString()),r},enumerable:!0,configurable:!0})};for(var r in e)n(r);return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(45),r=n(33);t.AnimationClassNames=o.buildClassMap(r.AnimationStyles)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(245);t.AnimationClassNames=o.AnimationClassNames;var r=n(218);t.FontClassNames=r.FontClassNames;var i=n(217);t.ColorClassNames=i.ColorClassNames},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4);t.getStyles=function(e){var t,n,r,i=e.className,a=e.theme,s=e.reversed,l=e.checked,u=e.disabled,c=a.semanticColors,d=c.inputForegroundChecked,p=c.disabledBackground,f=c.inputBorder,h=c.smallInputBorder,m=c.inputBackgroundChecked,g=c.disabledBodyText,_=c.inputBorderHovered,v=c.inputBackgroundChecked,y=c.inputBackgroundCheckedHovered,b=c.inputBackgroundCheckedHovered,C=c.bodyText,S=c.disabledBodyText,x=c.bodyText,E=c.disabledText;return{root:["ms-Checkbox",s&&"reversed",l&&"is-checked",!u&&"is-enabled",u&&"is-disabled",o.getFocusStyle(a,-3),a.fonts.medium,{padding:"0",border:"none",background:"none",margin:"0",outline:"none",display:"block",cursor:"pointer"},!u&&[!l&&{selectors:{":hover .ms-Checkbox-checkbox":{borderColor:_},":focus .ms-Checkbox-checkbox":{borderColor:_},":hover .ms-Checkbox-checkmark":{color:f,opacity:"1"}}},l&&{selectors:(t={":hover .ms-Checkbox-checkbox":{background:y,borderColor:b},":focus .ms-Checkbox-checkbox":{background:y,borderColor:b}},t[o.HighContrastSelector]={selectors:{":hover .ms-Checkbox-checkbox":{background:"WindowText",borderColor:"WindowText"},":focus .ms-Checkbox-checkbox":{background:"WindowText",borderColor:"WindowText"}}},t)},{selectors:{":hover .ms-Checkbox-text":{color:C},":focus .ms-Checkbox-text":{color:C}}}],i],label:["ms-Checkbox-label",{display:"inline-flex",margin:"0 -4px",alignItems:"center",cursor:u?"default":"pointer",position:"relative",userSelect:"none",textAlign:"left"},s&&{flexDirection:"row-reverse",justifyContent:"flex-end"}],checkbox:["ms-Checkbox-checkbox",{display:"flex",flexShrink:0,alignItems:"center",justifyContent:"center",height:"20px",width:"20px",borderWidth:"1px",borderStyle:"solid",borderColor:h,margin:"0 4px",boxSizing:"border-box",transitionProperty:"background, border, border-color",transitionDuration:"200ms",transitionTimingFunction:"cubic-bezier(.4, 0, .23, 1)",overflow:"hidden"},!u&&l&&{background:v,borderColor:m,selectors:(n={},n[o.HighContrastSelector]={background:"WindowText",borderColor:"WindowText"},n)},u&&{borderColor:g},l&&u&&{background:S,borderColor:g}],checkmark:["ms-Checkbox-checkmark",{opacity:l?"1":"0",color:l&&u?p:d,selectors:(r={},r[o.HighContrastSelector]={color:u?"InactiveBorder":"Window",MsHighContrastAdjust:"none"},r)}],text:["ms-Checkbox-text",{color:u?E:x,margin:"0 4px",fontSize:o.FontSizes.medium}]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(106),r=n(2);function i(e){return e.reduce(function(e,t){return e+o.KTP_SEPARATOR+t.split("").join(o.KTP_SEPARATOR)},o.KTP_PREFIX)}t.sequencesToID=i,t.mergeOverflows=function(e,t){var n=t.length,o=t.slice().pop(),i=e.slice();return r.addElementAtIndex(i,n-1,o)},t.ktpTargetFromSequences=function(e){return"["+o.DATAKTP_TARGET+'="'+i(e)+'"]'},t.ktpTargetFromId=function(e){return"["+o.DATAKTP_EXECUTE_TARGET+'="'+e+'"]'},t.getAriaDescribedBy=function(e){var t=" "+o.KTP_LAYER_ID;return e.length?t+" "+i(e):t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(2),i=n(106),a=function(){function e(){this.keytips=[],this.persistedKeytips=[],this.inKeytipMode=!1,this.shouldEnterKeytipMode=!0}return e.getInstance=function(){return this._instance},e.prototype.register=function(e,t){void 0===t&&(t=!1);var n=e;t||(n=this.addParentOverflow(e));var o=this._getUniqueKtp(n);t?this.persistedKeytips.push(o):this.keytips.push(o);var a=t?i.KeytipEvents.PERSISTED_KEYTIP_ADDED:i.KeytipEvents.KEYTIP_ADDED;return r.EventGroup.raise(this,a,{keytip:n,uniqueID:o.uniqueID}),o.uniqueID},e.prototype.update=function(e,t){var n=this.addParentOverflow(e),o=this._getUniqueKtp(n,t),a=r.findIndex(this.keytips,function(e){return e.uniqueID===t});a>=0&&(o.keytip.visible=this.keytips[a].keytip.visible,this.keytips=r.replaceElement(this.keytips,o,a),r.EventGroup.raise(this,i.KeytipEvents.KEYTIP_UPDATED,{keytip:o.keytip,uniqueID:o.uniqueID}))},e.prototype.unregister=function(e,t,n){void 0===n&&(n=!1),n?this.persistedKeytips=this.persistedKeytips.filter(function(e){return e.uniqueID!==t}):this.keytips=this.keytips.filter(function(e){return e.uniqueID!==t});var o=n?i.KeytipEvents.PERSISTED_KEYTIP_REMOVED:i.KeytipEvents.KEYTIP_REMOVED;r.EventGroup.raise(this,o,{keytip:e,uniqueID:t})},e.prototype.enterKeytipMode=function(){r.EventGroup.raise(this,i.KeytipEvents.ENTER_KEYTIP_MODE)},e.prototype.exitKeytipMode=function(){r.EventGroup.raise(this,i.KeytipEvents.EXIT_KEYTIP_MODE)},e.prototype.getKeytips=function(){return this.keytips.map(function(e){return e.keytip})},e.prototype.addParentOverflow=function(e){var t=e.keySequences.slice();if(t.pop(),0!==t.length){var n=r.find(this.getKeytips(),function(e){return r.arraysEqual(t,e.keySequences)});if(n&&n.overflowSetSequence)return o.__assign({},e,{overflowSetSequence:n.overflowSetSequence})}return e},e.prototype.menuExecute=function(e,t){r.EventGroup.raise(this,i.KeytipEvents.PERSISTED_KEYTIP_EXECUTE,{overflowButtonSequences:e,keytipSequences:t})},e.prototype._getUniqueKtp=function(e,t){return void 0===t&&(t=r.getId()),{keytip:o.__assign({},e),uniqueID:t}},e._instance=new e,e}();t.KeytipManager=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(2),i=n(249),a=n(248),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._keytipManager=i.KeytipManager.getInstance(),t}return o.__extends(t,e),t.prototype.componentDidMount=function(){this.props.keytipProps&&(this._uniqueId=this._keytipManager.register(this._getKtpProps()))},t.prototype.componentWillUnmount=function(){this.props.keytipProps&&this._keytipManager.unregister(this._getKtpProps(),this._uniqueId)},t.prototype.componentDidUpdate=function(){this.props.keytipProps&&this._keytipManager.update(this._getKtpProps(),this._uniqueId)},t.prototype.render=function(){var e=this.props,t=e.children,n=e.keytipProps,o=e.ariaDescribedBy,r={};return n&&(r=this._getKtpAttrs(n,o)),t(r)},t.prototype._getKtpProps=function(){return o.__assign({disabled:this.props.disabled},this.props.keytipProps)},t.prototype._getKtpAttrs=function(e,t){if(e){var n=this._keytipManager.addParentOverflow(e),o=a.getAriaDescribedBy(n.keySequences),r=n.keySequences.slice();n.overflowSetSequence&&(r=a.mergeOverflows(r,n.overflowSetSequence));var i=a.sequencesToID(r);return{"aria-describedby":(t||"")+o,"data-ktp-target":i,"data-ktp-execute-target":i}}},t}(r.BaseComponent);t.KeytipData=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(250),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getStyles=function(e){var t=e.className,n=e.iconClassName,o=e.isPlaceholder,r=e.isImage,i=e.styles;return{root:[r&&"ms-Icon-imageContainer",o&&"ms-Icon-placeHolder",{display:"inline-block"},o&&{width:"1em"},r&&{overflow:"hidden"},n,t,i&&i.root,i&&i.imageContainer]}}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),r={root:"ms-Image",rootMaximizeFrame:"ms-Image--maximizeFrame",image:"ms-Image-image",imageCenter:"ms-Image-image--center",imageContain:"ms-Image-image--contain",imageCover:"ms-Image-image--cover",imageNone:"ms-Image-image--none",imageLandscape:"ms-Image-image--landscape",imagePortrait:"ms-Image-image--portrait"};t.getStyles=function(e){var t=e.className,n=e.width,i=e.height,a=e.maximizeFrame,s=e.isLoaded,l=e.shouldFadeIn,u=e.shouldStartVisible,c=e.isLandscape,d=e.isCenter,p=e.isContain,f=e.isCover,h=e.isNone,m=e.isError,g=e.isNotImageFit,_=e.theme,v=o.getGlobalClassNames(r,_),y={position:"absolute",left:"50% /* @noflip */",top:"50%",transform:"translate(-50%,-50%)"};return{root:[v.root,{overflow:"hidden"},a&&[v.rootMaximizeFrame,{height:"100%",width:"100%"}],(d||p||f)&&{position:"relative"},t],image:[v.image,{display:"block",opacity:0},s&&["is-loaded",{opacity:1}],d&&[v.imageCenter,y],p&&[v.imageContain,c&&{width:"100%",height:"auto"},!c&&{width:"auto",height:"100%"},y],f&&[v.imageCover,c&&{width:"auto",height:"100%"},!c&&{width:"100%",height:"auto"},y],h&&[v.imageNone,{width:"auto",height:"auto"}],g&&[!!n&&!i&&{height:"auto",width:"100%"},!n&&!!i&&{height:"100%",width:"auto"},!!n&&!!i&&{height:"100%",width:"100%"}],s&&l&&!u&&o.AnimationClassNames.fadeIn400,c&&v.imageLandscape,!c&&v.imagePortrait,!s&&"is-notLoaded",l&&"is-fadeIn",m&&"is-error"]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=n(107),s=i.classNamesFunction(),l=function(e){function t(t){var n=e.call(this,t)||this;return n._coverStyle=a.ImageCoverStyle.portrait,n._imageElement=i.createRef(),n._frameElement=i.createRef(),n._onImageLoaded=function(e){var t=n.props,o=t.src,r=t.onLoad;r&&r(e),n._computeCoverStyle(n.props),o&&n.setState({loadState:a.ImageLoadState.loaded})},n._onImageError=function(e){n.props.onError&&n.props.onError(e),n.setState({loadState:a.ImageLoadState.error})},n.state={loadState:a.ImageLoadState.notLoaded},n}return o.__extends(t,e),n=t,t.prototype.componentWillReceiveProps=function(e){e.src!==this.props.src?this.setState({loadState:a.ImageLoadState.notLoaded}):this.state.loadState===a.ImageLoadState.loaded&&this._computeCoverStyle(e)},t.prototype.componentDidUpdate=function(e,t){this._checkImageLoaded(),this.props.onLoadingStateChange&&t.loadState!==this.state.loadState&&this.props.onLoadingStateChange(this.state.loadState)},t.prototype.render=function(){var e=i.getNativeProps(this.props,i.imageProperties,["width","height"]),t=this.props,n=t.src,l=t.alt,u=t.width,c=t.height,d=t.shouldFadeIn,p=t.shouldStartVisible,f=t.className,h=t.imageFit,m=t.role,g=t.maximizeFrame,_=t.styles,v=t.theme,y=this.state.loadState,b=void 0!==this.props.coverStyle?this.props.coverStyle:this._coverStyle,C=s(_,{theme:v,className:f,width:u,height:c,maximizeFrame:g,shouldFadeIn:d,shouldStartVisible:p,isLoaded:y===a.ImageLoadState.loaded||y===a.ImageLoadState.notLoaded&&this.props.shouldStartVisible,isLandscape:b===a.ImageCoverStyle.landscape,isCenter:h===a.ImageFit.center,isContain:h===a.ImageFit.contain,isCover:h===a.ImageFit.cover,isNone:h===a.ImageFit.none,isError:y===a.ImageLoadState.error,isNotImageFit:void 0===h});return r.createElement("div",{className:C.root,style:{width:u,height:c},ref:this._frameElement},r.createElement("img",o.__assign({},e,{onLoad:this._onImageLoaded,onError:this._onImageError,key:"fabricImage"+this.props.src||"",className:C.image,ref:this._imageElement,src:n,alt:l,role:m})))},t.prototype._checkImageLoaded=function(){var e=this.props.src;this.state.loadState===a.ImageLoadState.notLoaded&&(!!this._imageElement.current&&(e&&this._imageElement.current.naturalWidth>0&&this._imageElement.current.naturalHeight>0||this._imageElement.current.complete&&n._svgRegex.test(e))&&(this._computeCoverStyle(this.props),this.setState({loadState:a.ImageLoadState.loaded})))},t.prototype._computeCoverStyle=function(e){var t=e.imageFit,n=e.width,o=e.height;if((t===a.ImageFit.cover||t===a.ImageFit.contain)&&void 0===this.props.coverStyle&&this._imageElement.current&&this._frameElement.current){var r=void 0;r=n&&o?n/o:this._frameElement.current.clientWidth/this._frameElement.current.clientHeight;var i=this._imageElement.current.naturalWidth/this._imageElement.current.naturalHeight;this._coverStyle=i>r?a.ImageCoverStyle.landscape:a.ImageCoverStyle.portrait}},t.defaultProps={shouldFadeIn:!0},t._svgRegex=/\.svg$/i,t=n=o.__decorate([i.customizable("Image",["theme"])],t);var n}(i.BaseComponent);t.ImageBase=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(255),i=n(254);t.Image=o.styled(r.ImageBase,i.getStyles)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(109),i=n(252);t.Icon=o.styled(r.IconBase,i.getStyles)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0);o.__exportStar(n(257),t),o.__exportStar(n(109),t),o.__exportStar(n(108),t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=n(35),s=n(27),l=i.classNamesFunction(),u=function(e){function t(t,n){var o=e.call(this,t,n)||this;return o._checkBox=i.createRef(),o._onFocus=function(e){var t=o.props.inputProps;t&&t.onFocus&&t.onFocus(e)},o._onBlur=function(e){var t=o.props.inputProps;t&&t.onBlur&&t.onBlur(e)},o._onClick=function(e){var t=o.props,n=t.disabled,r=t.onChange,i=o.state.isChecked;e.preventDefault(),e.stopPropagation(),n||(r&&r(e,!i),void 0===o.props.checked&&o.setState({isChecked:!i}))},o._onRenderLabel=function(e){var t=e.label;return t?r.createElement("span",{className:o._classNames.text},t):null},o._warnMutuallyExclusive({checked:"defaultChecked"}),o._id=i.getId("checkbox-"),o.state={isChecked:!!(void 0!==t.checked?t.checked:t.defaultChecked)},o}return o.__extends(t,e),t.prototype.componentWillReceiveProps=function(e){void 0!==e.checked&&this.setState({isChecked:!!e.checked})},t.prototype.render=function(){var e=this,t=this.props,n=t.checked,i=t.className,u=t.defaultChecked,c=t.disabled,d=t.inputProps,p=t.name,f=t.boxSide,h=t.theme,m=t.ariaLabel,g=t.ariaLabelledBy,_=t.ariaDescribedBy,v=t.styles,y=t.onRenderLabel,b=void 0===y?this._onRenderLabel:y,C=t.checkmarkIconProps,S=t.ariaPositionInSet,x=t.ariaSetSize,E=t.keytipProps,k=void 0===n?this.state.isChecked:n,w="start"!==f;return this._classNames=l(v,{theme:h,className:i,disabled:c,checked:k,reversed:w}),r.createElement(s.KeytipData,{keytipProps:E,disabled:c},function(t){return r.createElement("button",o.__assign({},d,{"data-ktp-execute-target":t["data-ktp-execute-target"]},void 0!==n&&{checked:n},void 0!==u&&{defaultChecked:u},{disabled:c,ref:e._checkBox,name:p,id:e._id,role:"checkbox",type:"button",className:e._classNames.root,onClick:e._onClick,onFocus:e._onFocus,onBlur:e._onBlur,"aria-checked":k,"aria-disabled":c,"aria-label":m,"aria-labelledby":g,"aria-describedby":(_||"")+(t["aria-describedby"]||""),"aria-posinset":S,"aria-setsize":x}),r.createElement("label",{className:e._classNames.label,htmlFor:e._id},r.createElement("div",{className:e._classNames.checkbox,"data-ktp-target":t["data-ktp-target"]},r.createElement(a.Icon,o.__assign({iconName:"CheckMark"},C,{className:e._classNames.checkmark}))),b(e.props,e._onRenderLabel)))})},Object.defineProperty(t.prototype,"checked",{get:function(){return this.state.isChecked},enumerable:!0,configurable:!0}),t.prototype.focus=function(){this._checkBox.current&&this._checkBox.current.focus()},t.defaultProps={boxSide:"start"},t=o.__decorate([i.customizable("Checkbox",["theme"])],t)}(i.BaseComponent);t.CheckboxBase=u},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var o=n(53),r=n(54),i=n(260);e.exports=function(){function e(e,t,n,o,a,s){s!==i&&r(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(259),i=n(247);t.Checkbox=o.styled(r.CheckboxBase,i.getStyles)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(0).__exportStar(n(262),t)},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var o=n(120),r=n(54),i=n(119),a=n(53),s="function"==typeof Symbol&&Symbol.for,l=s?Symbol.for("react.element"):60103,u=s?Symbol.for("react.portal"):60106,c=s?Symbol.for("react.fragment"):60107,d=s?Symbol.for("react.strict_mode"):60108,p=s?Symbol.for("react.provider"):60109,f=s?Symbol.for("react.context"):60110,h=s?Symbol.for("react.async_mode"):60111,m=s?Symbol.for("react.forward_ref"):60112,g="function"==typeof Symbol&&Symbol.iterator;function _(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function y(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||v}function b(){}function C(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||v}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&_("85"),this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=y.prototype;var S=C.prototype=new b;S.constructor=C,o(S,y.prototype),S.isPureReactComponent=!0;var x={current:null},E=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function w(e,t,n){var o=void 0,r={},i=null,a=null;if(null!=t)for(o in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,o)&&!k.hasOwnProperty(o)&&(r[o]=t[o]);var s=arguments.length-2;if(1===s)r.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];r.children=u}if(e&&e.defaultProps)for(o in s=e.defaultProps)void 0===r[o]&&(r[o]=s[o]);return{$$typeof:l,type:e,key:i,ref:a,props:r,_owner:x.current}}function I(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var T=/\/+/g,M=[];function P(e,t,n,o){if(M.length){var r=M.pop();return r.result=e,r.keyPrefix=t,r.func=n,r.context=o,r.count=0,r}return{result:e,keyPrefix:t,func:n,context:o,count:0}}function D(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>M.length&&M.push(e)}function O(e,t,n,o){var r=typeof e;"undefined"!==r&&"boolean"!==r||(e=null);var i=!1;if(null===e)i=!0;else switch(r){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case l:case u:i=!0}}if(i)return n(o,e,""===t?"."+F(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var s=t+F(r=e[a],a);i+=O(r,s,n,o)}else if(null===e||void 0===e?s=null:s="function"==typeof(s=g&&e[g]||e["@@iterator"])?s:null,"function"==typeof s)for(e=s.call(e),a=0;!(r=e.next()).done;)i+=O(r=r.value,s=t+F(r,a++),n,o);else"object"===r&&_("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function F(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function R(e,t){e.func.call(e.context,t,e.count++)}function A(e,t,n){var o=e.result,r=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,o,n,a.thatReturnsArgument):null!=e&&(I(e)&&(t=r+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(T,"$&/")+"/")+n,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),o.push(e))}function L(e,t,n,o,r){var i="";null!=n&&(i=(""+n).replace(T,"$&/")+"/"),t=P(t,i,o,r),null==e||O(e,"",A,t),D(t)}var N={Children:{map:function(e,t,n){if(null==e)return e;var o=[];return L(e,o,null,t,n),o},forEach:function(e,t,n){if(null==e)return e;t=P(null,null,t,n),null==e||O(e,"",R,t),D(t)},count:function(e){return null==e?0:O(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return L(e,t,null,a.thatReturnsArgument),t},only:function(e){return I(e)||_("143"),e}},createRef:function(){return{current:null}},Component:y,PureComponent:C,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:m,render:e}},Fragment:c,StrictMode:d,unstable_AsyncMode:h,createElement:w,cloneElement:function(e,t,n){(null===e||void 0===e)&&_("267",e);var r=void 0,i=o({},e.props),a=e.key,s=e.ref,u=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,u=x.current),void 0!==t.key&&(a=""+t.key);var c=void 0;for(r in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)E.call(t,r)&&!k.hasOwnProperty(r)&&(i[r]=void 0===t[r]&&void 0!==c?c[r]:t[r])}if(1===(r=arguments.length-2))i.children=n;else if(1<r){c=Array(r);for(var d=0;d<r;d++)c[d]=arguments[d+2];i.children=c}return{$$typeof:l,type:e.type,key:a,ref:s,props:i,_owner:u}},createFactory:function(e){var t=w.bind(null,e);return t.type=e,t},isValidElement:I,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:x,assign:o}},B=Object.freeze({default:N}),U=B&&N||B;e.exports=U.default?U.default:U},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=(o=n(1))&&"object"==typeof o&&"default"in o?o.default:o,i=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},s=function(e){function t(){return i(this,t),a(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){return r.Children.only(this.props.children)},t}(r.Component);t.AppContainer=s,t.hot=function(){return function(e){return e}},t.areComponentsEqual=function(e,t){return e===t},t.setConfig=function(){}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../shared/built/activityVisitor.js":
/*!******************************************!*\
  !*** ../shared/built/activityVisitor.js ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const sdk_shared_1 = __webpack_require__(/*! @bfemulator/sdk-shared */ "../../sdk/shared/built/index.js");
class ActivityVisitor {
    traverseActivity(activity) {
        let messageActivity = activity;
        if (messageActivity) {
            this.traverseMessageActivity(messageActivity);
        }
    }
    traverseMessageActivity(messageActivity) {
        if (messageActivity) {
            if (messageActivity.attachments) {
                messageActivity.attachments.forEach(attachment => this.traverseAttachment(attachment));
            }
        }
    }
    traverseAttachment(attachment) {
        if (attachment) {
            switch (attachment.contentType) {
                case sdk_shared_1.AttachmentContentTypes.animationCard:
                case sdk_shared_1.AttachmentContentTypes.videoCard:
                case sdk_shared_1.AttachmentContentTypes.audioCard:
                    this.traverseMediaCard(attachment.content);
                    break;
                case sdk_shared_1.AttachmentContentTypes.heroCard:
                case sdk_shared_1.AttachmentContentTypes.thumbnailCard:
                    this.traverseThumbnailCard(attachment.content);
                    break;
                case sdk_shared_1.AttachmentContentTypes.receiptCard:
                    this.traverseReceiptCard(attachment.content);
                    break;
                case sdk_shared_1.AttachmentContentTypes.signInCard:
                    this.traverseSignInCard(attachment.content);
                    break;
                default:
                    break;
            }
        }
    }
    traverseMediaCard(mediaCard) {
        if (mediaCard) {
            this.traverseCardImage(mediaCard.image);
            this.traverseButtons(mediaCard.buttons);
        }
    }
    traverseThumbnailCard(thumbnailCard) {
        this.visitCardAction(thumbnailCard.tap);
        this.traverseButtons(thumbnailCard.buttons);
        this.traverseCardImages(thumbnailCard.images);
    }
    traverseSignInCard(signInCard) {
        this.traverseButtons(signInCard.buttons);
    }
    traverseReceiptCard(receiptCard) {
        this.visitCardAction(receiptCard.tap);
        this.traverseButtons(receiptCard.buttons);
    }
    traverseButtons(buttons) {
        if (buttons) {
            buttons.forEach(cardAction => this.visitCardAction(cardAction));
        }
    }
    traverseCardImages(cardImages) {
        if (cardImages) {
            cardImages.forEach(image => {
                this.traverseCardImage(image);
            });
        }
    }
    traverseCardImage(cardImage) {
        if (cardImage) {
            this.visitCardAction(cardImage.tap);
        }
    }
}
exports.ActivityVisitor = ActivityVisitor;
//# sourceMappingURL=activityVisitor.js.map

/***/ }),

/***/ "../shared/built/constants.js":
/*!************************************!*\
  !*** ../shared/built/constants.js ***!
  \************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SharedConstants;
(function (SharedConstants) {
    SharedConstants.TEMP_BOT_IN_MEMORY_PATH = 'TEMP_BOT_IN_MEMORY';
})(SharedConstants = exports.SharedConstants || (exports.SharedConstants = {}));
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "../shared/built/index.js":
/*!********************************!*\
  !*** ../shared/built/index.js ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "../../../node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./paymentEncoder */ "../shared/built/paymentEncoder.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./activityVisitor */ "../shared/built/activityVisitor.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./utils */ "../shared/built/utils.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./platform */ "../shared/built/platform/index.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./types */ "../shared/built/types/index.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./constants */ "../shared/built/constants.js"), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../shared/built/paymentEncoder.js":
/*!*****************************************!*\
  !*** ../shared/built/paymentEncoder.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const activityVisitor_1 = __webpack_require__(/*! ./activityVisitor */ "../shared/built/activityVisitor.js");
class PaymentEncoder extends activityVisitor_1.ActivityVisitor {
    visitCardAction(cardAction) {
        if (cardAction && cardAction.type === 'payment') {
            let paymentRequest = cardAction.value;
            let url = PaymentEncoder.PaymentEmulatorUrlProtocol + '//' + JSON.stringify(paymentRequest);
            cardAction.type = 'openUrl';
            cardAction.value = url;
        }
    }
}
PaymentEncoder.PaymentEmulatorUrlProtocol = 'payment:';
exports.PaymentEncoder = PaymentEncoder;
//# sourceMappingURL=paymentEncoder.js.map

/***/ }),

/***/ "../shared/built/platform/index.js":
/*!*****************************************!*\
  !*** ../shared/built/platform/index.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "../../../node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./log */ "../shared/built/platform/log/index.js"), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../shared/built/platform/log/index.js":
/*!*********************************************!*\
  !*** ../shared/built/platform/log/index.js ***!
  \*********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Debug"] = 0] = "Debug";
    LogLevel[LogLevel["Info"] = 1] = "Info";
    LogLevel[LogLevel["Warn"] = 2] = "Warn";
    LogLevel[LogLevel["Error"] = 3] = "Error";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
function textItem(level, text) {
    return {
        type: 'text',
        payload: {
            level,
            text
        }
    };
}
exports.textItem = textItem;
function externalLinkItem(text, hyperlink) {
    return {
        type: 'external-link',
        payload: {
            text,
            hyperlink
        }
    };
}
exports.externalLinkItem = externalLinkItem;
function inspectableObjectItem(text, obj) {
    return {
        type: 'inspectable-object',
        payload: {
            text,
            obj
        }
    };
}
exports.inspectableObjectItem = inspectableObjectItem;
function summaryTextItem(obj) {
    return {
        type: 'summary-text',
        payload: {
            obj
        }
    };
}
exports.summaryTextItem = summaryTextItem;
function appSettingsItem(text) {
    return {
        type: 'open-app-settings',
        payload: {
            text
        }
    };
}
exports.appSettingsItem = appSettingsItem;
function exceptionItem(err) {
    return {
        type: 'exception',
        payload: {
            err
        }
    };
}
exports.exceptionItem = exceptionItem;
function logEntry(...items) {
    return {
        timestamp: Date.now(),
        items: [...items]
    };
}
exports.logEntry = logEntry;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../shared/built/types/index.js":
/*!**************************************!*\
  !*** ../shared/built/types/index.js ***!
  \**************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "../../../node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./responseTypes */ "../shared/built/types/responseTypes.js"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./serverSettingsTypes */ "../shared/built/types/serverSettingsTypes.js"), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../shared/built/types/responseTypes.js":
/*!**********************************************!*\
  !*** ../shared/built/types/responseTypes.js ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorCodes = {
    ServiceError: 'ServiceError',
    BadArgument: 'BadArgument',
    BadSyntax: 'BadSyntax',
    MissingProperty: 'MissingProperty',
    MessageSizeTooBig: 'MessageSizeTooBig'
};
function createResourceResponse(id) {
    return { id: id };
}
exports.createResourceResponse = createResourceResponse;
function createConversationResponse(id, activityId) {
    let response = { id: id };
    if (activityId != null) {
        response.activityId = activityId;
    }
    return response;
}
exports.createConversationResponse = createConversationResponse;
function createErrorResponse(code, message) {
    return {
        error: {
            code: code,
            message: message
        }
    };
}
exports.createErrorResponse = createErrorResponse;
function createAPIException(statusCode, code, message) {
    return {
        statusCode: statusCode,
        error: createErrorResponse(code, message)
    };
}
exports.createAPIException = createAPIException;
//# sourceMappingURL=responseTypes.js.map

/***/ }),

/***/ "../shared/built/types/serverSettingsTypes.js":
/*!****************************************************!*\
  !*** ../shared/built/types/serverSettingsTypes.js ***!
  \****************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class Settings {
    constructor(settings) {
        Object.assign(this, settings);
    }
}
exports.Settings = Settings;
exports.frameworkDefault = {
    ngrokPath: '',
    bypassNgrokLocalhost: true,
    stateSizeLimit: 64,
    use10Tokens: false,
    useCodeValidation: false,
    localhost: 'localhost',
    locale: ''
};
exports.windowStateDefault = {
    zoomLevel: 0,
    width: 800,
    height: 600,
    left: 100,
    top: 50
};
exports.usersDefault = {
    currentUserId: 'default-user',
    usersById: {
        'default-user': {
            id: 'default-user',
            name: 'User'
        }
    }
};
exports.settingsDefault = {
    framework: exports.frameworkDefault,
    bots: [
        {
            'botId': 'default-bot',
            'botUrl': 'http://localhost:3978/api/messages',
            'msaAppId': '',
            'msaPassword': '',
            'locale': ''
        }
    ],
    windowState: exports.windowStateDefault,
    users: exports.usersDefault
};
//# sourceMappingURL=serverSettingsTypes.js.map

/***/ }),

/***/ "../shared/built/utils.js":
/*!********************************!*\
  !*** ../shared/built/utils.js ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const sdk_shared_1 = __webpack_require__(/*! @bfemulator/sdk-shared */ "../../sdk/shared/built/index.js");
const schema_1 = __webpack_require__(/*! msbot/bin/schema */ "../../../node_modules/msbot/bin/schema.js");
function isObject(item) {
    return (item && typeof item === 'object' && !Array.isArray(item) && item !== null);
}
exports.isObject = isObject;
function mergeDeep(target, source) {
    let output = Object.assign({}, target);
    {
        Object.keys(source).forEach(key => {
            if (isObject(source[key])) {
                if (!(key in target)) {
                    Object.assign(output, { [key]: source[key] });
                }
                else {
                    output[key] = mergeDeep(target[key], source[key]);
                }
            }
            else {
                Object.assign(output, { [key]: source[key] });
            }
        });
    }
    return output;
}
exports.mergeDeep = mergeDeep;
function deepCopySlow(obj) {
    return JSON.parse(JSON.stringify(obj));
}
exports.deepCopySlow = deepCopySlow;
exports.safeStringify = (o, space = undefined) => {
    let cache = [];
    if (typeof o !== 'object') {
        return `${o}`;
    }
    return JSON.stringify(o, function (key, value) {
        if (typeof value === 'object' && value !== null) {
            if (cache.indexOf(value) !== -1) {
                return;
            }
            cache.push(value);
        }
        return value;
    }, space);
};
exports.approximateObjectSize = (object, cache = []) => {
    switch (typeof object) {
        case 'boolean':
            return 4;
        case 'number':
            return 8;
        case 'string':
            return object.length * 2;
        case 'object':
            let bytes = 0;
            cache.push(object);
            for (let i in object) {
                if (!object.hasOwnProperty(i)) {
                    continue;
                }
                let value = object[i];
                if (typeof value === 'object' && value !== null) {
                    if (cache.indexOf(value) !== -1) {
                        continue;
                    }
                    cache.push(value);
                }
                bytes += exports.approximateObjectSize(value, cache);
            }
            return bytes;
        default:
            return 0;
    }
};
exports.getBotDisplayName = (bot = exports.newBot()) => {
    return bot.name || bot.path || (exports.getFirstBotEndpoint(bot) ? exports.getFirstBotEndpoint(bot).endpoint : null) || '¯\\_(ツ)_/¯';
};
exports.newBot = (...bots) => {
    return Object.assign({}, {
        name: '',
        description: '',
        services: []
    }, ...bots);
};
exports.newEndpoint = (...endpoints) => {
    return Object.assign({}, {
        type: schema_1.ServiceType.Endpoint,
        name: '',
        id: sdk_shared_1.uniqueId(),
        appId: '',
        appPassword: '',
        endpoint: 'http://localhost:3978/api/messages'
    }, ...endpoints);
};
exports.addIdToBotEndpoints = (bot) => {
    bot.services.map(service => {
        if (service.type === schema_1.ServiceType.Endpoint && !service.id) {
            service.id = sdk_shared_1.uniqueId();
            return service;
        }
        return service;
    });
    return bot;
};
exports.getFirstBotEndpoint = (bot) => {
    if (bot.services && bot.services.length) {
        return bot.services.find(service => service.type === schema_1.ServiceType.Endpoint);
    }
    return null;
};
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./src/shared.ts":
/*!***********************!*\
  !*** ./src/shared.ts ***!
  \***********************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _bfemulator_app_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bfemulator/app-shared */ "../shared/built/index.js");
/* harmony import */ var _bfemulator_app_shared__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_bfemulator_app_shared__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _bfemulator_ui_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bfemulator/ui-react */ "../../sdk/ui-react/built/index.js");
/* harmony import */ var _bfemulator_ui_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_bfemulator_ui_react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _bfemulator_sdk_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bfemulator/sdk-shared */ "../../sdk/shared/built/index.js");
/* harmony import */ var _bfemulator_sdk_shared__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_bfemulator_sdk_shared__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _bfemulator_sdk_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @bfemulator/sdk-client */ "../../sdk/client/built/index.js");
/* harmony import */ var _bfemulator_sdk_client__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_bfemulator_sdk_client__WEBPACK_IMPORTED_MODULE_3__);






/***/ }),

/***/ 0:
/*!******************!*\
  !*** dll shared ***!
  \******************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__;

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ }),

/***/ "dll-reference vendors_6dc1bf031c792a36dced":
/*!***********************************************!*\
  !*** external "vendors_6dc1bf031c792a36dced" ***!
  \***********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = vendors_6dc1bf031c792a36dced;

/***/ })

/******/ });
//# sourceMappingURL=shared.js.map